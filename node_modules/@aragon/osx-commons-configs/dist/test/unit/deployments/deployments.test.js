"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const deployments_1 = require("../../../deployments");
const networks_1 = require("../../../networks");
describe('Deployments', () => {
    describe('getNetworkDeployments', () => {
        it('should return the correct value', () => {
            const inputs = Object.values(networks_1.SupportedNetworks).map(network => {
                return {
                    network,
                    expected: deployments_1.contracts[network],
                };
            });
            inputs.map(({ network, expected }) => {
                expect((0, deployments_1.getNetworkDeployments)(network)).toMatchObject(expected);
            });
        });
    });
    describe('getNetworkDeploymentForVersion', () => {
        it('should return the correct value', () => {
            const inputs = Object.values(networks_1.SupportedNetworks).flatMap(network => {
                return Object.values(deployments_1.SupportedVersions).map(version => {
                    return {
                        network,
                        version,
                        expected: deployments_1.contracts[network][version] || null,
                    };
                });
            });
            inputs.map(({ network, version, expected }) => {
                if (expected === null) {
                    expect((0, deployments_1.getNetworkDeploymentForVersion)(network, version)).toBeNull();
                    return;
                }
                expect((0, deployments_1.getNetworkDeploymentForVersion)(network, version)).toMatchObject(expected);
            });
        });
    });
    describe('getLatestNetworkDeployment', () => {
        it('should return the correct value', () => {
            const inputs = Object.values(networks_1.SupportedNetworks).map(network => {
                return {
                    network,
                    expected: deployments_1.contracts[network][deployments_1.SupportedVersions.V1_3_0] ||
                        deployments_1.contracts[network][deployments_1.SupportedVersions.V1_0_0] ||
                        null,
                };
            });
            inputs.map(({ network, expected }) => {
                if (!expected) {
                    expect((0, deployments_1.getLatestNetworkDeployment)(network)).toBeNull();
                    return;
                }
                expect((0, deployments_1.getLatestNetworkDeployment)(network)).toMatchObject(expected);
            });
        });
    });
});
//# sourceMappingURL=deployments.test.js.map