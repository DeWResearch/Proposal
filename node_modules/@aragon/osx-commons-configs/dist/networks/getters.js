"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkAlias = exports.getNetworkNameByAlias = exports.getNetworkByAlias = exports.getNetworkByNameOrAlias = exports.getNetworkByChainId = exports.getNetwork = void 0;
const networks_1 = require("./networks");
const types_1 = require("./types");
/**
 * Retrieves the network configuration for a given supported network.
 *
 * @param {SupportedNetworks} network - The supported network to retrieve the configuration for.
 * @return {NetworkConfig | null} The network configuration if it exists, otherwise null.
 */
function getNetwork(network) {
    if (networks_1.networks[network]) {
        return networks_1.networks[network];
    }
    return null;
}
exports.getNetwork = getNetwork;
function getNetworkByChainId(chainId) {
    return (Object.values(networks_1.networks).find(network => network.chainId === chainId) || null);
}
exports.getNetworkByChainId = getNetworkByChainId;
/**
 * Retrieves the network configuration object by name or alias.
 *
 * @param {string | SupportedNetworks} network - The name or alias of the network.
 * @return {NetworkConfig | null} The network configuration object if found, or `null` if not found.
 */
function getNetworkByNameOrAlias(network) {
    const networkConfig = getNetworkByAlias(network) || getNetwork(network);
    if (networkConfig) {
        return networkConfig;
    }
    return null;
}
exports.getNetworkByNameOrAlias = getNetworkByNameOrAlias;
/**
 * Retrieves the network configuration object based on the given alias.
 *
 * @param {string} alias - The alias of the network.
 * @return {NetworkConfig | null} The network configuration object corresponding to the alias, or null if not found.
 */
function getNetworkByAlias(alias) {
    const networkName = getNetworkNameByAlias(alias);
    if (networkName) {
        return getNetwork(networkName);
    }
    return null;
}
exports.getNetworkByAlias = getNetworkByAlias;
/**
 * Retrieves the network name by its alias. If the name is already supported it returns the alias back as name
 *
 * @param {string} alias - The alias of the network.
 * @return {SupportedNetworks | null} The network name corresponding to the alias, or null if no match is found.
 */
function getNetworkNameByAlias(alias) {
    if (Object.values(types_1.SupportedNetworks).includes(alias)) {
        return alias;
    }
    for (const networkName of Object.values(types_1.SupportedNetworks)) {
        const network = getNetwork(networkName);
        if (network) {
            const aliases = Object.values(network.aliases);
            if (aliases.includes(alias)) {
                return networkName;
            }
        }
    }
    return null;
}
exports.getNetworkNameByAlias = getNetworkNameByAlias;
function getNetworkAlias(aliasName, network) {
    const networkConfig = getNetwork(network);
    if (!networkConfig) {
        return null;
    }
    return networkConfig.aliases[aliasName] || network;
}
exports.getNetworkAlias = getNetworkAlias;
//# sourceMappingURL=getters.js.map