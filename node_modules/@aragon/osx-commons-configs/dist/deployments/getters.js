"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPluginEnsDomain = exports.getDaoEnsDomain = exports.getLatestNetworkDeployment = exports.getNetworkDeploymentForVersion = exports.getNetworkDeployments = void 0;
const contracts_1 = require("./contracts");
const ens_1 = require("./ens");
const types_1 = require("./types");
/**
 * Retrieves the network deployments based on the specified network.
 *
 * @param {SupportedNetworks} network - The network to retrieve the deployments for.
 * @return {NetworkDeployments} The network deployments for the specified network.
 */
function getNetworkDeployments(network) {
    return contracts_1.contracts[network];
}
exports.getNetworkDeployments = getNetworkDeployments;
/**
 * Retrieves the network deployment for a specific version.
 *
 * @param {SupportedNetworks} network - The network to retrieve the deployment for.
 * @param {SupportedVersions} version - The version of the deployment.
 * @return {NetworkDeployment | null} The network deployment for the specified version, or null if not found.
 */
function getNetworkDeploymentForVersion(network, version) {
    return getNetworkDeployments(network)[version] || null;
}
exports.getNetworkDeploymentForVersion = getNetworkDeploymentForVersion;
/**
 * Retrieves the latest network deployment for the specified network.
 *
 * @param {SupportedNetworks} network - The network to retrieve the deployment for.
 * @return {NetworkDeployment | null} The latest network deployment, or null if not found.
 */
function getLatestNetworkDeployment(network) {
    const versions = Object.values(types_1.SupportedVersions).reverse();
    for (const version of versions) {
        const deployment = getNetworkDeploymentForVersion(network, version);
        if (deployment) {
            return deployment;
        }
    }
    return null;
}
exports.getLatestNetworkDeployment = getLatestNetworkDeployment;
function getDaoEnsDomain(networkName) {
    var _a;
    if (ens_1.exceptionalDomains[networkName]) {
        return (_a = ens_1.exceptionalDomains[networkName]) === null || _a === void 0 ? void 0 : _a.daoEns;
    }
    else {
        return ens_1.commonDomain.daoEns;
    }
}
exports.getDaoEnsDomain = getDaoEnsDomain;
function getPluginEnsDomain(networkName) {
    var _a;
    if (ens_1.exceptionalDomains[networkName]) {
        return (_a = ens_1.exceptionalDomains[networkName]) === null || _a === void 0 ? void 0 : _a.pluginEns;
    }
    else {
        return ens_1.commonDomain.pluginEns;
    }
}
exports.getPluginEnsDomain = getPluginEnsDomain;
//# sourceMappingURL=getters.js.map