/**
 * Ensures that a hex string has the "0x" prefix
 *
 * @export
 * @param {string} value
 * @return {string}
 */
export declare function ensure0x(value: string): string;
/**
 * Strips the "0x" prefix from a hex string
 *
 * @export
 * @param {string} value
 * @return {string}
 */
export declare function strip0x(value: string): string;
/**
 * Encodes a buffer into a hex string with the "0x" prefix
 *
 * @export
 * @param {string} hexString
 * @return {Uint8Array}
 */
export declare function hexToBytes(hexString: string): Uint8Array;
/**
 * Encodes a buffer into a hex string with the "0x" prefix
 *
 * @export
 * @param {Uint8Array} buff
 * @param {boolean} [skip0x]
 * @return {string}
 */
export declare function bytesToHex(buff: Uint8Array, skip0x?: boolean): string;
/**
 * Encodes a 0-1 ratio within the given digit precision for storage on a smart contract
 *
 * @export
 * @param {number} ratio
 * @param {number} digits
 * @return {bigint}
 */
export declare function encodeRatio(ratio: number, digits: number): number;
/**
 * Decodes a value received from a smart contract to a number with
 *
 * @export
 * @param {bigint} onChainValue
 * @param {number} digits
 * @return {number}
 */
export declare function decodeRatio(onChainValue: bigint | number, digits: number): number;
/**
 * Encodes the particles of a proposalId into a globally unique value for subgraph
 *
 * @export
 * @param {string} pluginAddress
 * @param {number} id
 * @return {string} proposalId
 */
export declare function encodeProposalId(pluginAddress: string, id: number): string;
/**
 * Decodes a proposalId from subgraph and returns the original pluginAddress and the nonce
 *
 * @export
 * @param {string} proposalId
 * @return {object} pluginAddress: string; id: number
 */
export declare function decodeProposalId(proposalId: string): {
    pluginAddress: string;
    id: number;
};
/**
 * Transforms an array of booleans into a bitmap big integer
 *
 * @export
 * @param {Array<boolean>} [bools]
 * @return {BigInt} bitmap
 */
export declare function boolArrayToBitmap(bools?: Array<boolean>): bigint;
/**
 * Transforms a bigint into an array of booleans
 *
 * @param {bigint} bitmap
 * @return {Array<boolean>}
 */
export declare function bitmapToBoolArray(bitmap: bigint): Array<boolean>;
/**
 * Gets the extended version of a proposal id from the compact one
 *
 * @export
 * @param {string} proposalId
 * @returns {string}
 */
export declare const getExtendedProposalId: (proposalId: string) => string;
/**
 * Gets the compact version of a proposal id from the extended one
 *
 * @export
 * @param {string} proposalId
 * @returns {string}
 */
export declare const getCompactProposalId: (proposalId: string) => string;
