/**
 * Run a promise with a timeout
 *
 * @export
 * @template T
 * @param {Promise<T>} prom The promise to track
 * @param {number} timeout Timeout (in milliseconds) to wait before failing
 * @param {string} [timeoutMessage] (optional) Message to use when throwing a timeout error. By default: `"Time out"`
 * @return {Promise<T>}
 */
export declare function promiseWithTimeout<T>(prom: Promise<T>, timeout: number, timeoutMessage?: string): Promise<T>;
/**
 * Run a promise and retry it until it succeeds or the `shouldRetry` function returns false
 *
 * @export
 * @template T
 * @param {{
 *   func: () => Promise<T>;
 *   onFail?: (e: Error) => void;
 *   shouldRetry: () => boolean;
 * }} { func, onFail, shouldRetry }
 * @return {void}
 */
export declare function runAndRetry<T>({ func, onFail, shouldRetry }: {
    func: () => Promise<T>;
    onFail?: (e: Error) => void;
    shouldRetry: () => boolean;
}): Promise<T>;
