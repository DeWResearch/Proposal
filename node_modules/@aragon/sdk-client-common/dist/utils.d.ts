import { FunctionFragment, Interface } from "@ethersproject/abi";
import { Log, Networkish } from "@ethersproject/providers";
import { ContractReceipt } from "@ethersproject/contracts";
import { GasFeeEstimation, MetadataAbiInput, PrepareInstallationParams, PrepareInstallationStepValue, PrepareUpdateParams, PrepareUpdateStepValue } from "./types";
import { IClientGraphQLCore, IClientWeb3Core } from "./internal";
import { Network } from "@ethersproject/networks";
import { SupportedNetworks } from "@aragon/osx-commons-configs";
/**
 * Finds a log in a receipt given the event name
 *
 * @export
 * @param {ContractReceipt} receipt
 * @param {Interface} iface
 * @param {string} eventName
 * @return {(Log | undefined)}
 */
export declare function findLog(receipt: ContractReceipt, iface: Interface, eventName: string): Log | undefined;
/**
 * Gets a function fragment from encoded data
 *
 * @export
 * @param {Uint8Array} data
 * @param {string[]} availableFunctions
 * @return {FunctionFragment}
 */
export declare function getFunctionFragment(data: Uint8Array, availableFunctions: string[]): FunctionFragment;
/**
 * Gets the named types from a metadata abi input
 *
 * @export
 * @param {MetadataAbiInput[]} [inputs=[]]
 * @return {string[]}
 */
export declare function getNamedTypesFromMetadata(inputs?: MetadataAbiInput[]): string[];
/**
 * Gets the named types from a metadata abi input
 *
 * @export
 * @param {IClientWeb3Core} web3
 * @param {PrepareInstallationParams} params
 * @return {Promise<GasFeeEstimation>}
 */
export declare function prepareGenericInstallationEstimation(web3: IClientWeb3Core, params: PrepareInstallationParams): Promise<GasFeeEstimation>;
/**
 * Prepares an installation of a plugin
 *
 * @export
 * @param {IClientWeb3Core} web3
 * @param {(PrepareInstallationParams & { pluginSetupProcessorAddress: string })} params
 * @return {AsyncGenerator<PrepareInstallationStepValue>}
 */
export declare function prepareGenericInstallation(web3: IClientWeb3Core, params: PrepareInstallationParams & {
    pluginSetupProcessorAddress: string;
}): AsyncGenerator<PrepareInstallationStepValue>;
/**
 * Gets an estimation of the gas fee of preparing an update
 *
 * @export
 * @param {IClientWeb3Core} web3
 * @param {IClientGraphQLCore} graphql
 * @param {(PrepareUpdateParams & { pluginSetupProcessorAddress: string })} params
 * @return {Promise<GasFeeEstimation>}
 */
export declare function prepareGenericUpdateEstimation(web3: IClientWeb3Core, graphql: IClientGraphQLCore, params: PrepareUpdateParams & {
    pluginSetupProcessorAddress: string;
}): Promise<GasFeeEstimation>;
export declare function prepareGenericUpdate(web3: IClientWeb3Core, graphql: IClientGraphQLCore, params: PrepareUpdateParams & {
    pluginSetupProcessorAddress: string;
}): AsyncGenerator<PrepareUpdateStepValue>;
/**
 * Replacing function for ethers getNetwork that includes additional networks
 *
 * @export
 * @param {Networkish} networkish
 * @return {Network}
 */
export declare function getNetwork(networkish: Networkish): Network;
/**
 * Gets the interfaceId of a given interface
 *
 * @export
 * @param {Interface} iface
 * @return {string}
 */
export declare function getInterfaceId(iface: Interface): string;
export declare function getDefaultIpfsNodes(network: SupportedNetworks): {
    url: string;
    headers: {
        "X-API-KEY": string;
    };
}[];
export declare function getDefaultGraphqlNodes(network: SupportedNetworks): {
    url: string;
}[];
