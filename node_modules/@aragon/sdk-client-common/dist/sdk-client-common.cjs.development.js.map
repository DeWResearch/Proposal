{"version":3,"file":"sdk-client-common.cjs.development.js","sources":["../src/types.ts","../src/constants.ts","../src/internal/graphql-queries/status.ts","../src/internal/graphql-queries/plugin.ts","../src/errors.ts","../src/multiuri.ts","../src/validation.ts","../src/encoding.ts","../src/utils.ts","../src/context-core.ts","../src/promises.ts","../src/internal/modules/graphql.ts","../src/internal/modules/ipfs.ts","../src/internal/modules/web3.ts","../src/client-core.ts","../src/context.ts","../src/internal/constants.ts","../src/schemas.ts"],"sourcesContent":["import {\n  FrameworkContractsNames,\n  NonFrameworkContractsNames,\n} from \"@aragon/osx-commons-configs\";\nimport {\n  GraphQLContextParams,\n  GraphQLContextState,\n  IpfsContextParams,\n  IpfsContextState,\n  Web3ContextParams,\n  Web3ContextState,\n} from \"./internal\";\n\nexport type ContextParams =\n  & Web3ContextParams\n  & IpfsContextParams\n  & GraphQLContextParams;\n\nexport type ContextState =\n  & Web3ContextState\n  & IpfsContextState\n  & GraphQLContextState;\n\nexport type OverriddenState =\n  & {\n    [key in FrameworkContractsNames]: boolean;\n  }\n  & {\n    [key in NonFrameworkContractsNames]: boolean;\n  }\n  & {\n    gasFeeEstimationFactor: boolean;\n    ipfsNodes: boolean;\n    graphqlNodes: boolean;\n  };\n\n/**\n * Contains the payload passed to the global DAO factory so that\n * plugins can be initialized\n */\nexport interface PluginInstallItem {\n  id: string; // ENS domain or address of the plugin's Repo\n  data: Uint8Array;\n}\n\nexport type GasFeeEstimation = {\n  average: bigint;\n  max: bigint;\n};\n\n/**\n * Contains the payload passed to governance contracts, serializing\n * the actions to do upon approval\n */\nexport type DaoAction = {\n  to: string;\n  value: bigint;\n  data: Uint8Array;\n};\n\nexport type MetadataAbiInput = {\n  name: string;\n  type: string;\n  internalType: string;\n  description: string;\n  components?: MetadataAbiInput[];\n};\n\nexport type PrepareInstallationParams = {\n  daoAddressOrEns: string;\n  pluginRepo: string;\n  version?: {\n    build: number;\n    release: number;\n  };\n  installationParams?: any[];\n  installationAbi?: MetadataAbiInput[];\n};\n\nexport enum PrepareInstallationStep {\n  PREPARING = \"preparing\",\n  DONE = \"done\",\n}\n\nexport type PrepareInstallationStepValue =\n  | { key: PrepareInstallationStep.PREPARING; txHash: string }\n  | {\n    key: PrepareInstallationStep.DONE;\n  } & ApplyInstallationParams;\n\nexport type ApplyInstallationParamsBase = {\n  permissions: MultiTargetPermission[];\n  versionTag: VersionTag;\n  pluginRepo: string;\n  pluginAddress: string;\n};\n\nexport type ApplyInstallationParams = ApplyInstallationParamsBase & {\n  helpers: string[];\n};\nexport type DecodedApplyInstallationParams = ApplyInstallationParamsBase & {\n  helpersHash: string;\n};\n\n/* Uninstallation */\nexport type PrepareUninstallationParams = {\n  daoAddressOrEns: string;\n  pluginAddress: string;\n  pluginInstallationIndex?: number;\n  uninstallationParams?: any[];\n  uninstallationAbi?: string[];\n};\nexport enum PrepareUninstallationSteps {\n  PREPARING = \"preparing\",\n  DONE = \"done\",\n}\nexport type PrepareUninstallationStepValue =\n  | { key: PrepareUninstallationSteps.PREPARING; txHash: string }\n  | {\n    key: PrepareUninstallationSteps.DONE;\n  } & ApplyUninstallationParams;\n\nexport type ApplyUninstallationParams = ApplyInstallationParamsBase;\nexport type DecodedApplyUninstallationParams = ApplyInstallationParamsBase;\n\nexport type VersionTag = {\n  build: number;\n  release: number;\n};\n\nexport enum PermissionOperationType {\n  GRANT = 0,\n  REVOKE = 1,\n  GRANT_WITH_CONDITION = 2,\n}\n\nexport type MultiTargetPermission = {\n  operation: PermissionOperationType;\n  where: string;\n  who: string;\n  condition?: string;\n  permissionId: string;\n};\n\nexport type Pagination = {\n  skip?: number;\n  limit?: number;\n  direction?: SortDirection;\n};\n\nexport enum SortDirection {\n  ASC = \"asc\",\n  DESC = \"desc\",\n}\n\nexport interface InterfaceParams {\n  id: string;\n  functionName: string;\n  hash: string;\n}\n\nexport enum TokenType {\n  NATIVE = \"native\",\n  ERC20 = \"erc20\",\n  ERC721 = \"erc721\",\n  ERC1155 = \"erc1155\",\n}\n\n/**\n * Contains the human-readable information about a proposal\n */\nexport type ProposalMetadata = {\n  title: string;\n  summary: string;\n  description: string;\n  resources: Array<{ url: string; name: string }>;\n  media?: {\n    header?: string;\n    logo?: string;\n  };\n};\n\n/**\n * Contains the human-readable information about a proposal\n */\nexport type ProposalMetadataSummary = {\n  title: string;\n  summary: string;\n};\n\nexport enum ProposalStatus {\n  ACTIVE = \"Active\",\n  PENDING = \"Pending\",\n  SUCCEEDED = \"Succeeded\",\n  EXECUTED = \"Executed\",\n  DEFEATED = \"Defeated\",\n}\n\n// Long version\nexport type ProposalBase = {\n  id: string;\n  dao: {\n    address: string;\n    name: string;\n  };\n  creatorAddress: string;\n  metadata: ProposalMetadata;\n  metadataHash?: string;\n  startDate: Date;\n  endDate: Date;\n  creationDate: Date;\n  actions: DaoAction[];\n  status: ProposalStatus;\n  creationBlockNumber: number;\n  executionDate: Date | null;\n  executionBlockNumber: number | null;\n  executionTxHash: string | null;\n};\n\n// Short version\nexport type ProposalListItemBase = {\n  id: string;\n  dao: {\n    address: string;\n    name: string;\n  };\n  creatorAddress: string;\n  metadata: ProposalMetadataSummary;\n  metadataHash?: string;\n  startDate: Date;\n  endDate: Date;\n  status: ProposalStatus;\n  actions: DaoAction[];\n};\n\nexport type PrepareUpdateParams = {\n  pluginAddress: string;\n  daoAddressOrEns: string;\n  pluginInstallationIndex?: number;\n  newVersion: VersionTag;\n  updateParams?: any[];\n  updateAbi?: MetadataAbiInput[];\n  pluginRepo: string;\n};\n\nexport enum PrepareUpdateStep {\n  PREPARING = \"preparing\",\n  DONE = \"done\",\n}\n\nexport type PrepareUpdateStepValue =\n  | { key: PrepareUpdateStep.PREPARING; txHash: string }\n  | {\n    key: PrepareUpdateStep.DONE;\n  } & ApplyUpdateParams;\n\nexport type ApplyUpdateParamsBase = {\n  versionTag: VersionTag;\n  initData: Uint8Array;\n  pluginRepo: string;\n  pluginAddress: string;\n  permissions: MultiTargetPermission[];\n};\nexport type ApplyUpdateParams = ApplyUpdateParamsBase & {\n  helpers: string[];\n};\nexport type DecodedApplyUpdateParams = ApplyUpdateParamsBase & {\n  helpersHash: string;\n};\nexport type IsMemberParams = {\n  address: string;\n  pluginAddress: string;\n  blockNumber?: number;\n};\n","import { ProposalMetadata } from \"./types\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\n/** Timeout that will be applied to operations involving\n * many fetch requests that could take a long time */\nexport const MULTI_FETCH_TIMEOUT = 7 * 1000;\n\nexport const UNSUPPORTED_PROPOSAL_METADATA_LINK: ProposalMetadata = {\n  title: \"(unsupported metadata link)\",\n  summary: \"(the link to the metadata is not supported)\",\n  description: \"(the link to the metadata is not supported)\",\n  resources: [],\n};\nexport const EMPTY_PROPOSAL_METADATA_LINK: ProposalMetadata = {\n  title: \"(the proposal has no metadata)\",\n  summary: \"(the current proposal does not have any content defined)\",\n  description: \"(the current proposal does not have any content defined)\",\n  resources: [],\n};\nexport const UNAVAILABLE_PROPOSAL_METADATA: ProposalMetadata = {\n  title: \"(unavailable metadata)\",\n  summary: \"(the proposal metadata is not available)\",\n  description: \"(the proposal metadata is not available)\",\n  resources: [],\n};\n\nexport const IPFS_ENDPOINTS = {\n  prod: [\n    {\n      url: \"https://prod.ipfs.aragon.network/api/v0\",\n      headers: {\n        \"X-API-KEY\": \"b477RhECf8s8sdM7XrkLBs2wHc4kCMwpbcFC55Kt\",\n      },\n    },\n  ],\n  test: [\n    {\n      url: \"https://test.ipfs.aragon.network/api/v0\",\n      headers: {\n        \"X-API-KEY\": \"b477RhECf8s8sdM7XrkLBs2wHc4kCMwpbcFC55Kt\",\n      },\n    },\n  ],\n};\n\nconst Permissions = {\n  UPGRADE_PERMISSION: \"UPGRADE_PERMISSION\",\n  UPGRADE_PLUGIN_PERMISSION: \"UPGRADE_PLUGIN_PERMISSION\",\n  SET_METADATA_PERMISSION: \"SET_METADATA_PERMISSION\",\n  EXECUTE_PERMISSION: \"EXECUTE_PERMISSION\",\n  WITHDRAW_PERMISSION: \"WITHDRAW_PERMISSION\",\n  SET_SIGNATURE_VALIDATOR_PERMISSION: \"SET_SIGNATURE_VALIDATOR_PERMISSION\",\n  SET_TRUSTED_FORWARDER_PERMISSION: \"SET_TRUSTED_FORWARDER_PERMISSION\",\n  ROOT_PERMISSION: \"ROOT_PERMISSION\",\n  CREATE_VERSION_PERMISSION: \"CREATE_VERSION_PERMISSION\",\n  REGISTER_PERMISSION: \"REGISTER_PERMISSION\",\n  REGISTER_DAO_PERMISSION: \"REGISTER_DAO_PERMISSION\",\n  REGISTER_ENS_SUBDOMAIN_PERMISSION: \"REGISTER_ENS_SUBDOMAIN_PERMISSION\",\n  MINT_PERMISSION: \"MINT_PERMISSION\",\n  MERKLE_MINT_PERMISSION: \"MERKLE_MINT_PERMISSION\",\n  MODIFY_ALLOWLIST_PERMISSION: \"MODIFY_ALLOWLIST_PERMISSION\",\n  SET_CONFIGURATION_PERMISSION: \"SET_CONFIGURATION_PERMISSION\",\n};\n\nconst PermissionIds = Object.entries(Permissions).reduce(\n  (acc, [k, v]) => ({ ...acc, [k + \"_ID\"]: keccak256(toUtf8Bytes(v)) }),\n  {} as { [k: string]: string },\n);\nObject.freeze(Permissions);\nexport { Permissions };\nObject.freeze(PermissionIds);\nexport { PermissionIds };\nexport const IPFS_CID_REGEX =\n  /^((Qm[1-9A-HJ-NP-Za-km-z]{44,})|(b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,})|(z[1-9A-HJ-NP-Za-km-z]{48,})|(F[0-9A-F]{50,}))$/;\n\nexport const IPFS_URI_REGEX =\n  /^ipfs:\\/\\/((Qm[1-9A-HJ-NP-Za-km-z]{44,})|(b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,})|(z[1-9A-HJ-NP-Za-km-z]{48,})|(F[0-9A-F]{50,}))$/;\nexport const OSX_PROPOSAL_ID_REGEX =\n  /^(0x[A-Fa-f0-9]{40})_(0x[A-Fa-f0-9]{1,64})$/;\nexport const HEX_STRING_REGEX = /^(0x)?[0-9a-fA-F]*$/;\nexport const ENS_REGEX = /^(?:[a-z0-9-]+\\.)*[a-z0-9-]+\\.eth$/;\nexport const SUBDOMAIN_REGEX = /^[a-z0-9-]+$/;\n","import { gql } from \"graphql-request\";\n\nexport const QueryStatus = gql`\n{\n  _meta{\n    deployment\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryIPlugin = gql`\nquery IPlugin($address: ID!, $where: IPlugin_filter!) {\n\tiplugin(id:$address, where:$where) {\n    installations(where:{state: Installed}) {\n      appliedPreparation {\n        helpers\n        pluginRepo {\n          id\n        }\n      }\n     \tappliedVersion {\n        metadata\n        build\n        release {\n          release\n        }\n      }\n    }   \n  }\n}\n`;\n","class SdkError extends Error {\n  public cause?: Error | string;\n  constructor(message: string, cause?: any) {\n    super(message);\n    if (typeof cause === \"string\") {\n      this.cause = cause;\n    } else if (cause instanceof Error) {\n      this.cause = cause.message;\n    }\n  }\n}\n\nexport class TimeoutError extends SdkError {\n  constructor(message?: string, cause?: any) {\n    super(message ? message : \"Time out\", cause);\n  }\n}\nexport class UnsupportedProtocolError extends SdkError {\n  constructor(protocol: string, cause?: any) {\n    super(\"Unsupported protocol: \" + protocol, cause);\n  }\n}\nexport class GraphQLError extends SdkError {\n  constructor(model: string, cause?: any) {\n    super(\"Cannot fetch the \" + model + \" data from GraphQL\", cause);\n  }\n}\nexport class IpfsError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Cannot add or get data from ipfs\", cause);\n  }\n}\nexport class InvalidAddressOrEnsError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Invalid address or ENS\", cause);\n  }\n}\nexport class InvalidAddressError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Invalid address\", cause);\n  }\n}\nexport class InvalidCidError extends SdkError {\n  constructor(cause?: any) {\n    super(\"The value does not contain a valid CiD\", cause);\n  }\n}\nexport class InvalidProposalIdError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Invalid proposal ID\", cause);\n  }\n}\nexport class NoProviderError extends SdkError {\n  constructor(cause?: any) {\n    super(\"A web3 provider is needed\", cause);\n  }\n}\nexport class NoSignerError extends SdkError {\n  constructor(cause?: any) {\n    super(\"A signer is needed\", cause);\n  }\n}\nexport class UnexpectedActionError extends SdkError {\n  constructor(cause?: any) {\n    super(\"The received action is different from the expected one\", cause);\n  }\n}\n\nexport class NoTokenAddress extends SdkError {\n  constructor(cause?: any) {\n    super(\"A token address is needed\", cause);\n  }\n}\n\nexport class NoDaoFactory extends SdkError {\n  constructor(cause?: any) {\n    super(\"A dao factory address is needed\", cause);\n  }\n}\n\nexport class NoPluginRepoRegistry extends SdkError {\n  constructor(cause?: any) {\n    super(\"A plugin repo registry address is needed\", cause);\n  }\n}\n\nexport class NoDaoRegistry extends SdkError {\n  constructor(cause?: any) {\n    super(\"A dao registry address is needed\", cause);\n  }\n}\n\nexport class IpfsPinError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Failed to pin data on IPFS\", cause);\n  }\n}\n\nexport class ProposalCreationError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Failed to create proposal\", cause);\n  }\n}\nexport class DaoCreationError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Failed to create DAO\", cause);\n  }\n}\n\nexport class MissingExecPermissionError extends SdkError {\n  constructor(cause?: any) {\n    super(\"No plugin requests EXECUTE_PERMISSION\", cause);\n  }\n}\nexport class IpfsFetchError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Failed to fetch data from IPFS\", cause);\n  }\n}\nexport class InvalidVotingModeError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Invalid voting mode\", cause);\n  }\n}\nexport class UpdateAllowanceError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Could not define a minimum allowance\", cause);\n  }\n}\nexport class InvalidPrecisionError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Invalid precision, number must be an integer greater than 0\", cause);\n  }\n}\nexport class FailedDepositError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Failed to deposit\", cause);\n  }\n}\nexport class AmountMismatchError extends SdkError {\n  constructor(expected: bigint, received: bigint, cause?: any) {\n    super(\n      `Deposited amount mismatch. Expected: ${expected}, received: ${received}`,\n      cause,\n    );\n  }\n}\nexport class UnsupportedNetworkError extends SdkError {\n  constructor(network: string, cause?: any) {\n    super(\"Unsupported network: \" + network, cause);\n  }\n}\nexport class ClientNotInitializedError extends SdkError {\n  constructor(client: string, cause?: any) {\n    super(client + \" client is not initialized\", cause);\n  }\n}\nexport class NoNodesAvailableError extends SdkError {\n  constructor(name: string, cause?: any) {\n    super(\"No \" + name + \" nodes available\", cause);\n  }\n}\n\nexport class PluginInstallationPreparationError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Failed to install plugin\", cause);\n  }\n}\nexport class DataDecodingError extends SdkError {\n  constructor(message: string, cause?: any) {\n    super(\"Cannot decode data: \" + message, cause);\n  }\n}\n\nexport class InvalidContractAddressError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Invalid contract address\", cause);\n  }\n}\nexport class InvalidContractAbiError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Invalid contract ABI\", cause);\n  }\n}\nexport class CannotEstimateGasError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Cannot estimate gas error\", cause);\n  }\n}\nexport class InstallationNotFoundError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Installation not found\", cause);\n  }\n}\nexport class PluginUninstallationPreparationError extends SdkError {\n  constructor(cause?: any) {\n    super(\"plugin uninstallation error\", cause);\n  }\n}\n\nexport class MissingMetadataError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Missing metadata\", cause);\n  }\n}\n\nexport class InvalidPrepareUninstallationAbiError extends SdkError {\n  constructor(cause?: Error) {\n    super(\"Invalid prepare uninstallation ABI\", cause);\n  }\n}\n\nexport class InvalidEnsError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Invalid subdomain format: use a-z, 0-9 and -\", cause);\n  }\n}\n\nexport class DepositNativeTokenError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Please, use the token's transfer function directly\", cause);\n  }\n}\nexport class AlwaysFailingProposalError extends SdkError {\n  constructor(cause?: Error) {\n    super(\n      \"invalid actions, the types or order of the actions may cause the execution to fail\",\n      cause,\n    );\n  }\n}\n\nexport class SizeMismatchError extends SdkError {\n  constructor(field1: string, field2: string, cause?: Error) {\n    super(`Size mismatch: ${field1} and ${field2} should match`, cause);\n  }\n}\n\nexport class InvalidProposalStatusError extends SdkError {\n  constructor(cause?: Error) {\n    super(\"Invalid proposal status\", cause);\n  }\n}\n\nexport class NotImplementedError extends SdkError {\n  constructor(message?: string, cause?: Error) {\n    super(`Not implemented: ${message}`, cause);\n  }\n}\n\nexport class InvalidActionError extends SdkError {\n  constructor(cause?: Error) {\n    super(\"The received action is not recognized\", cause);\n  }\n}\n\nexport class InvalidSubdomainError extends SdkError {\n  constructor(cause?: Error) {\n    super(\"Invalid subdomain format: use a-z, 0-9 and -\", cause);\n  }\n}\n\nexport class InvalidGasEstimationFactorError extends SdkError {\n  constructor(cause?: Error) {\n    super(\n      \"Gas estimation factor value should be a number between 0 and 1\",\n      cause,\n    );\n  }\n}\nexport class InvalidParameter extends SdkError {\n  constructor(message?: string, cause?: Error) {\n    super(\n      \"Invalid parameter:\" + message,\n      cause,\n    );\n  }\n}\nexport class NotAContractError extends SdkError {\n  constructor(cause?: Error) {\n    super(\n      \"The provided address does not point to a contract\",\n      cause,\n    );\n  }\n}\n\nexport class InvalidVersionError extends SdkError {\n  constructor(cause?: string) {\n    super(\n      \"The new version and the current version should have the same release number and the new build number should be greater than the current build number\",\n      cause,\n    );\n  }\n}\nexport class PluginUpdatePreparationError extends SdkError {\n  constructor(cause?: string) {\n    super(\n      \"Failed to prepare plugin update\",\n      cause,\n    );\n  }\n}\nexport class ProposalNotFoundError extends SdkError {\n  constructor(cause?: any) {\n    super(\"Proposal not found\", cause);\n  }\n}\n\nexport class InvalidArraySizeError extends SdkError {\n  constructor(size: number, cause?: any) {\n    super(`Invalid array size: ${size}`, cause);\n  }\n}\n\nexport class InvalidRatioValueError extends SdkError {\n  constructor(ratio: number, cause?: any) {\n    super(\n      `The ratio value should range between 0 and 1, received value: ${ratio}`,\n      cause,\n    );\n  }\n}\n\nexport class InvalidDigitsValueError extends SdkError {\n  constructor(digits: number, cause?: any) {\n    super(\n      `The number of digits should range between 1 and 15, received value: ${digits}`,\n      cause,\n    );\n  }\n}\n\nexport class ValueOutOfRangeError extends SdkError {\n  constructor(cause?: any) {\n    super(\n      `The value is out of range`,\n      cause,\n    );\n  }\n}\n\nexport class InvalidBitMapValueError extends SdkError {\n  constructor(cause?: any) {\n    super(\n      \"The bitmap value is too big\",\n      cause,\n    );\n  }\n}\n\nexport class EmptyMultiUriError extends SdkError {\n  constructor(cause?: any) {\n    super(\n      \"The multi URI is empty\",\n      cause,\n    );\n  }\n}\n\nexport class InvalidPromiseError extends SdkError {\n  constructor(cause?: any) {\n    super(\n      \"Invalid promise\",\n      cause,\n    );\n  }\n}\n\nexport class InvalidTimeoutError extends SdkError {\n  constructor(cause?: any) {\n    super(\n      \"Invalid timeout\",\n      cause,\n    );\n  }\n}\n\nexport class InvalidPermissionOperationType extends SdkError {\n  constructor(cause?: any) {\n    super(\"Invalid permission operation\", cause);\n  }\n}\n\nexport class ContractNotDeployedError extends SdkError {\n  constructor(\n    contractName: string,\n    version: string,\n    network: string,\n    cause?: any,\n  ) {\n    super(\n      `Contract \"${contractName}\" version \"${version}\" is not deployed on network \"${network}\"`,\n      cause,\n    );\n  }\n}\n","import { IPFS_CID_REGEX } from \"./constants\";\nimport { EmptyMultiUriError } from \"./errors\";\n\n/**\n * Parses a multi URI and returns the IPFS or HTTP URI.\n *\n * @export\n * @class MultiUri\n */\nexport class MultiUri {\n  readonly items: string[] = [];\n\n  constructor(multiUri: string) {\n    if (!multiUri) throw new EmptyMultiUriError();\n    this.items = multiUri.split(\",\");\n  }\n\n  get ipfsCid() {\n    for (let item of this.items) {\n      if (IPFS_CID_REGEX.test(item)) return item;\n      else if (item.startsWith(\"ipfs://\")) {\n        item = item.substring(7);\n      }\n      const idx = item.indexOf(\"/\");\n      const cid = (idx < 0) ? item : item.substring(0, idx);\n\n      if (!IPFS_CID_REGEX.test(cid)) continue;\n      return cid;\n    }\n    return null;\n  }\n  get ipfs() {\n    for (let item of this.items) {\n      if (IPFS_CID_REGEX.test(item)) return { cid: item, path: \"\" };\n      else if (item.startsWith(\"ipfs://\")) {\n        item = item.substring(7);\n      }\n      let pathIdx = item.indexOf(\"/\");\n\n      let cid = item;\n      if (pathIdx < 0) {\n        if (!IPFS_CID_REGEX.test(cid)) continue;\n        return { cid, path: \"\" };\n      }\n      cid = item.substring(0, pathIdx);\n      if (!IPFS_CID_REGEX.test(cid)) continue;\n\n      let searchIdx = item.indexOf(\"?\");\n      if (searchIdx < 0) searchIdx = item.indexOf(\"#\");\n\n      if (searchIdx < 0) {\n        return {\n          cid,\n          path: item.substring(pathIdx),\n        };\n      }\n\n      return {\n        cid,\n        path: item.substring(pathIdx, searchIdx),\n      };\n    }\n    return null;\n  }\n  get http() {\n    return this.items.filter((item) =>\n      item.startsWith(\"http://\") || item.startsWith(\"https://\")\n    );\n  }\n}\n","import {\n  ENS_REGEX,\n  IPFS_URI_REGEX,\n  OSX_PROPOSAL_ID_REGEX,\n  SUBDOMAIN_REGEX,\n} from \"./constants\";\nimport { InvalidCidError } from \"./errors\";\nimport { MultiUri } from \"./multiuri\";\n\n/**\n * Attempts to parse the given string as a URL and returns the IPFS CiD contained in it.\n * Alternatively it tries to use the raw value after validating it.\n *\n * @export\n * @param {string} data\n * @return {string}\n */\nexport function resolveIpfsCid(data: string): string {\n  const uri = new MultiUri(data);\n  const cid = uri.ipfsCid;\n  if (!cid) {\n    throw new InvalidCidError();\n  }\n  return cid;\n}\n\n/**\n * Checks if the given string is a valid proposal ID\n *\n * @export\n * @param {string} proposalId\n * @return {boolean}\n */\nexport function isProposalId(proposalId: string): boolean {\n  const regex = new RegExp(OSX_PROPOSAL_ID_REGEX);\n  return regex.test(proposalId);\n}\n\n/**\n * Checks if the given string is a valid ENS name\n *\n * @export\n * @param {string} name\n * @return {boolean}\n */\nexport function isEnsName(name: string): boolean {\n  const regex = new RegExp(ENS_REGEX);\n  return regex.test(name);\n}\n\n/**\n * Checks if the given string is a valid IPFS URI\n *\n * @export\n * @param {string} cid\n * @return {boolean}\n */\nexport function isIpfsUri(cid: string): boolean {\n  const regex = new RegExp(\n    IPFS_URI_REGEX,\n  );\n  return regex.test(cid);\n}\n\n/**\n * Checks if the given string is a valid subdomain\n *\n * @export\n * @param {string} name\n * @return {boolean}\n */\nexport function isSubdomain(name: string): boolean {\n  const regex = new RegExp(SUBDOMAIN_REGEX);\n  return regex.test(name);\n}\n","import { hexZeroPad } from \"@ethersproject/bytes\";\nimport { HEX_STRING_REGEX, OSX_PROPOSAL_ID_REGEX } from \"./constants\";\nimport { isProposalId } from \"./validation\";\nimport {\n  InvalidArraySizeError,\n  InvalidBitMapValueError,\n  InvalidDigitsValueError,\n  InvalidProposalIdError,\n  InvalidRatioValueError,\n  ValueOutOfRangeError,\n} from \"./errors\";\n\n/**\n * Ensures that a hex string has the \"0x\" prefix\n *\n * @export\n * @param {string} value\n * @return {string}\n */\nexport function ensure0x(value: string): string {\n  return value.startsWith(\"0x\") ? value : \"0x\" + value;\n}\n\n/**\n * Strips the \"0x\" prefix from a hex string\n *\n * @export\n * @param {string} value\n * @return {string}\n */\nexport function strip0x(value: string): string {\n  return value.startsWith(\"0x\") ? value.substring(2) : value;\n}\n\n/**\n * Encodes a buffer into a hex string with the \"0x\" prefix\n *\n * @export\n * @param {string} hexString\n * @return {Uint8Array}\n */\nexport function hexToBytes(hexString: string): Uint8Array {\n  if (!hexString) return new Uint8Array();\n  else if (!HEX_STRING_REGEX.test(hexString)) {\n    throw new Error(\"Invalid hex string\");\n  } else if (hexString.length % 2 !== 0) {\n    throw new Error(\"The hex string has an odd length\");\n  }\n\n  hexString = strip0x(hexString);\n  const bytes = [];\n  for (let i = 0; i < hexString.length; i += 2) {\n    bytes.push(\n      parseInt(hexString.substring(i, i + 2), 16),\n    );\n  }\n  return Uint8Array.from(bytes);\n}\n\n/**\n * Encodes a buffer into a hex string with the \"0x\" prefix\n *\n * @export\n * @param {Uint8Array} buff\n * @param {boolean} [skip0x]\n * @return {string}\n */\nexport function bytesToHex(buff: Uint8Array, skip0x?: boolean): string {\n  const bytes: string[] = [];\n  for (let i = 0; i < buff.length; i++) {\n    if (buff[i] >= 16) bytes.push(buff[i].toString(16));\n    else bytes.push(\"0\" + buff[i].toString(16));\n  }\n  if (skip0x) return bytes.join(\"\");\n  return ensure0x(bytes.join(\"\"));\n}\n\n/**\n * Encodes a 0-1 ratio within the given digit precision for storage on a smart contract\n *\n * @export\n * @param {number} ratio\n * @param {number} digits\n * @return {bigint}\n */\nexport function encodeRatio(ratio: number, digits: number): number {\n  if (ratio < 0 || ratio > 1) {\n    throw new InvalidRatioValueError(ratio);\n  } else if (!Number.isInteger(digits) || digits < 1 || digits > 15) {\n    throw new InvalidDigitsValueError(digits);\n  }\n  return Math.round(ratio * (10 ** digits));\n}\n\n/**\n * Decodes a value received from a smart contract to a number with\n *\n * @export\n * @param {bigint} onChainValue\n * @param {number} digits\n * @return {number}\n */\nexport function decodeRatio(\n  onChainValue: bigint | number,\n  digits: number,\n): number {\n  if (!Number.isInteger(digits) || digits < 1 || digits > 15) {\n    throw new InvalidDigitsValueError(digits);\n  } else if (onChainValue > 10 ** digits) {\n    throw new ValueOutOfRangeError();\n  }\n\n  return Number(onChainValue) / (10 ** digits);\n}\n\n/**\n * Encodes the particles of a proposalId into a globally unique value for subgraph\n *\n * @export\n * @param {string} pluginAddress\n * @param {number} id\n * @return {string} proposalId\n */\nexport function encodeProposalId(pluginAddress: string, id: number) {\n  if (!/^0x[A-Fa-f0-9]{40}$/.test(pluginAddress)) {\n    throw new Error(\"Invalid address\");\n  }\n\n  return `${pluginAddress}_0x${id.toString(16)}`;\n}\n\n/**\n * Decodes a proposalId from subgraph and returns the original pluginAddress and the nonce\n *\n * @export\n * @param {string} proposalId \n * @return {object} pluginAddress: string; id: number\n */\nexport function decodeProposalId(\n  proposalId: string,\n): { pluginAddress: string; id: number } {\n  if (!isProposalId(proposalId)) {\n    throw new InvalidProposalIdError();\n  }\n\n  const matchedRegexResult = proposalId.match(OSX_PROPOSAL_ID_REGEX) || [];\n  if (matchedRegexResult.length !== 3) {\n    throw new InvalidProposalIdError();\n  }\n\n  return {\n    pluginAddress: matchedRegexResult[1],\n    id: parseInt(strip0x(matchedRegexResult[2]), 16),\n  };\n}\n\n/**\n * Transforms an array of booleans into a bitmap big integer\n *\n * @export\n * @param {Array<boolean>} [bools]\n * @return {BigInt} bitmap\n */\nexport function boolArrayToBitmap(bools?: Array<boolean>) {\n  if (!bools || !bools.length) return BigInt(0);\n  else if (bools.length > 256) throw new InvalidArraySizeError(bools.length);\n\n  let result = BigInt(0);\n  for (let i = 0; i < 256; i++) {\n    if (!bools[i]) continue;\n    result |= BigInt(1) << BigInt(i);\n  }\n\n  return result;\n}\n\n/**\n * Transforms a bigint into an array of booleans\n *\n * @param {bigint} bitmap\n * @return {Array<boolean>}\n */\nexport function bitmapToBoolArray(bitmap: bigint): Array<boolean> {\n  if (bitmap >= (BigInt(1) << BigInt(256))) {\n    throw new InvalidBitMapValueError();\n  }\n\n  const result: Array<boolean> = [];\n  for (let i = 0; i < 256; i++) {\n    const mask = BigInt(1) << BigInt(i);\n    result.push((bitmap & mask) != BigInt(0));\n  }\n\n  return result;\n}\n\n/**\n * Gets the extended version of a proposal id from the compact one\n *\n * @export\n * @param {string} proposalId\n * @returns {string}\n */\nexport const getExtendedProposalId = (proposalId: string): string => {\n  if (!isProposalId(proposalId)) {\n    throw new InvalidProposalIdError();\n  }\n  const splits = proposalId.split(\"_\");\n  return splits[0].toLowerCase() + \"_\" + hexZeroPad(splits[1], 32);\n};\n\n/**\n * Gets the compact version of a proposal id from the extended one\n *\n * @export\n * @param {string} proposalId\n * @returns {string}\n */\nexport const getCompactProposalId = (proposalId: string): string => {\n  if (!proposalId.match(/^(0x[A-Fa-f0-9]{40})_(0x[A-Fa-f0-9]{1,64})$/)) {\n    throw new Error(\"Invalid proposalId\");\n  }\n  const splits = proposalId.split(\"_\");\n  return splits[0].toLowerCase() + \"_0x\" + parseInt(splits[1]).toString(16);\n};\n","import {\n  defaultAbiCoder,\n  FunctionFragment,\n  Interface,\n} from \"@ethersproject/abi\";\nimport { id } from \"@ethersproject/hash\";\nimport {\n  getNetwork as ethersGetNetwork,\n  Log,\n  Networkish,\n} from \"@ethersproject/providers\";\nimport { ContractReceipt } from \"@ethersproject/contracts\";\nimport {\n  GasFeeEstimation,\n  MetadataAbiInput,\n  PrepareInstallationParams,\n  PrepareInstallationStep,\n  PrepareInstallationStepValue,\n  PrepareUpdateParams,\n  PrepareUpdateStep,\n  PrepareUpdateStepValue,\n} from \"./types\";\nimport {\n  IClientGraphQLCore,\n  IClientWeb3Core,\n  SubgraphPluginInstallation,\n} from \"./internal\";\nimport {\n  PluginRepo__factory,\n  PluginSetupProcessor,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport { IPFS_ENDPOINTS } from \"./constants\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { Network } from \"@ethersproject/networks\";\nimport { QueryIPlugin } from \"./internal/graphql-queries\";\nimport { bytesToHex, hexToBytes } from \"./encoding\";\nimport {\n  InstallationNotFoundError,\n  InvalidAddressError,\n  InvalidVersionError,\n  PluginInstallationPreparationError,\n  PluginUpdatePreparationError,\n  UnsupportedNetworkError,\n} from \"./errors\";\nimport { Zero } from \"@ethersproject/constants\";\nimport {\n  FrameworkContractsNames,\n  getNetworkAlias,\n  getNetworkByChainId,\n  getNetworkByNameOrAlias,\n  getNetworkDeploymentForVersion,\n  NetworkConfig,\n  networks,\n  SupportedAliases,\n  SupportedNetworks,\n  SupportedVersions,\n} from \"@aragon/osx-commons-configs\";\n\n/**\n * Finds a log in a receipt given the event name\n *\n * @export\n * @param {ContractReceipt} receipt\n * @param {Interface} iface\n * @param {string} eventName\n * @return {(Log | undefined)}\n */\nexport function findLog(\n  receipt: ContractReceipt,\n  iface: Interface,\n  eventName: string,\n): Log | undefined {\n  return receipt.logs.find(\n    (log) =>\n      log.topics[0] ===\n        id(\n          iface.getEvent(eventName).format(\n            \"sighash\",\n          ),\n        ),\n  );\n}\n\n/**\n * Gets a function fragment from encoded data\n *\n * @export\n * @param {Uint8Array} data\n * @param {string[]} availableFunctions\n * @return {FunctionFragment}\n */\nexport function getFunctionFragment(\n  data: Uint8Array,\n  availableFunctions: string[],\n): FunctionFragment {\n  const hexBytes = bytesToHex(data);\n  const iface = new Interface(availableFunctions);\n  return iface.getFunction(hexBytes.substring(0, 10));\n}\n\n/**\n * Gets the named types from a metadata abi input\n *\n * @export\n * @param {MetadataAbiInput[]} [inputs=[]]\n * @return {string[]}\n */\nexport function getNamedTypesFromMetadata(\n  inputs: MetadataAbiInput[] = [],\n): string[] {\n  return inputs.map((input) => {\n    if (input.type.startsWith(\"tuple\")) {\n      const tupleResult = getNamedTypesFromMetadata(input.components).join(\n        \", \",\n      );\n\n      let tupleString = `tuple(${tupleResult})`;\n\n      if (input.type.endsWith(\"[]\")) {\n        tupleString = tupleString.concat(\"[]\");\n      }\n\n      return tupleString;\n    } else if (input.type.endsWith(\"[]\")) {\n      const baseType = input.type.slice(0, -2);\n      return `${baseType}[] ${input.name}`;\n    } else {\n      return `${input.type} ${input.name}`;\n    }\n  });\n}\n\n/**\n * Gets the named types from a metadata abi input\n *\n * @export\n * @param {IClientWeb3Core} web3\n * @param {PrepareInstallationParams} params\n * @return {Promise<GasFeeEstimation>}\n */\nexport async function prepareGenericInstallationEstimation(\n  web3: IClientWeb3Core,\n  params: PrepareInstallationParams,\n) {\n  const provider = web3.getProvider();\n  if (!isAddress(params.pluginRepo)) {\n    throw new InvalidAddressError();\n  }\n  const ethers5NetworkName = (await provider.getNetwork()).name;\n  const networkName = getNetworkByNameOrAlias(ethers5NetworkName)?.name;\n  if (!networkName) {\n    throw new UnsupportedNetworkError(ethers5NetworkName);\n  }\n  let version = params.version;\n  // if version is not specified install latest version\n  if (!version) {\n    const pluginRepo = PluginRepo__factory.connect(\n      params.pluginRepo,\n      provider,\n    );\n    const currentRelease = await pluginRepo.latestRelease();\n    const latestVersion = await pluginRepo[\"getLatestVersion(uint8)\"](\n      currentRelease,\n    );\n    version = latestVersion.tag;\n  }\n  // encode installation params\n  const { installationParams = [], installationAbi = [] } = params;\n  const data = defaultAbiCoder.encode(\n    getNamedTypesFromMetadata(installationAbi),\n    installationParams,\n  );\n  // connect to psp contract\n  const deployment = getNetworkDeploymentForVersion(\n    networkName,\n    SupportedVersions.V1_3_0,\n  );\n  if (!deployment) {\n    throw new UnsupportedNetworkError(networkName);\n  }\n  const pspContract = PluginSetupProcessor__factory.connect(\n    deployment[FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR].address,\n    provider,\n  );\n\n  const gasEstimation = await pspContract.estimateGas.prepareInstallation(\n    params.daoAddressOrEns,\n    {\n      pluginSetupRef: {\n        pluginSetupRepo: params.pluginRepo,\n        versionTag: version,\n      },\n      data,\n    },\n  );\n  return web3.getApproximateGasFee(gasEstimation.toBigInt());\n}\n\n/**\n * Prepares an installation of a plugin\n *\n * @export\n * @param {IClientWeb3Core} web3\n * @param {(PrepareInstallationParams & { pluginSetupProcessorAddress: string })} params\n * @return {AsyncGenerator<PrepareInstallationStepValue>}\n */\nexport async function* prepareGenericInstallation(\n  web3: IClientWeb3Core,\n  params: PrepareInstallationParams & { pluginSetupProcessorAddress: string },\n): AsyncGenerator<PrepareInstallationStepValue> {\n  const signer = web3.getConnectedSigner();\n  if (!isAddress(params.pluginRepo)) {\n    throw new InvalidAddressError();\n  }\n  let version = params.version;\n  // if version is not specified install latest version\n  if (!version) {\n    const pluginRepo = PluginRepo__factory.connect(\n      params.pluginRepo,\n      signer,\n    );\n    const currentRelease = await pluginRepo.latestRelease();\n    const latestVersion = await pluginRepo[\"getLatestVersion(uint8)\"](\n      currentRelease,\n    );\n    version = latestVersion.tag;\n  }\n  // encode installation params\n  const { installationParams = [], installationAbi = [] } = params;\n  const data = defaultAbiCoder.encode(\n    getNamedTypesFromMetadata(installationAbi),\n    installationParams,\n  );\n  // connect to psp contract\n  const pspContract = PluginSetupProcessor__factory.connect(\n    params.pluginSetupProcessorAddress,\n    signer,\n  );\n  const tx = await pspContract.prepareInstallation(params.daoAddressOrEns, {\n    pluginSetupRef: {\n      pluginSetupRepo: params.pluginRepo,\n      versionTag: version,\n    },\n    data,\n  });\n\n  yield {\n    key: PrepareInstallationStep.PREPARING,\n    txHash: tx.hash,\n  };\n\n  const receipt = await tx.wait();\n  const pspContractInterface = PluginSetupProcessor__factory\n    .createInterface();\n  const log = findLog(\n    receipt,\n    pspContractInterface,\n    \"InstallationPrepared\",\n  );\n  if (!log) {\n    throw new PluginInstallationPreparationError();\n  }\n  const parsedLog = pspContractInterface.parseLog(log);\n  const pluginAddress = parsedLog.args[\"plugin\"];\n  const preparedSetupData = parsedLog.args[\"preparedSetupData\"];\n  if (!(pluginAddress || preparedSetupData)) {\n    throw new PluginInstallationPreparationError();\n  }\n  yield {\n    key: PrepareInstallationStep.DONE,\n    pluginAddress,\n    pluginRepo: params.pluginRepo,\n    versionTag: version,\n    permissions: preparedSetupData.permissions,\n    helpers: preparedSetupData.helpers,\n  };\n}\n\n/**\n * Gets the parameters to be given when preparing an update\n *\n * @param {IClientGraphQLCore} graphql\n * @param {PrepareUpdateParams} params\n * @return {Promise<PluginSetupProcessor.PrepareUpdateParamsStruct>}\n */\nasync function getPrepareUpdateParams(\n  graphql: IClientGraphQLCore,\n  params: PrepareUpdateParams,\n): Promise<PluginSetupProcessor.PrepareUpdateParamsStruct> {\n  type T = {\n    iplugin: { installations: SubgraphPluginInstallation[] };\n  };\n  const { iplugin } = await graphql.request<T>({\n    query: QueryIPlugin,\n    params: {\n      address: params.pluginAddress.toLowerCase(),\n      where: { dao: params.daoAddressOrEns.toLowerCase() },\n    },\n    name: \"plugin\",\n  });\n\n  // filter specified installation\n  const { pluginInstallationIndex = 0 } = params;\n  const selectedInstallation = iplugin.installations[pluginInstallationIndex];\n  if (!selectedInstallation) {\n    throw new InstallationNotFoundError();\n  }\n  // check if version is valid\n  if (\n    params.newVersion.release !==\n      selectedInstallation.appliedVersion.release.release ||\n    params.newVersion.build <= selectedInstallation.appliedVersion.build\n  ) {\n    throw new InvalidVersionError();\n  }\n  // encode update params\n  const { updateParams = [], updateAbi = [] } = params;\n  const data = defaultAbiCoder.encode(\n    getNamedTypesFromMetadata(updateAbi),\n    updateParams,\n  );\n  return {\n    currentVersionTag: {\n      build: selectedInstallation.appliedVersion.build,\n      release: selectedInstallation.appliedVersion.release.release,\n    },\n    newVersionTag: params.newVersion,\n    pluginSetupRepo: params.pluginRepo,\n    setupPayload: {\n      plugin: params.pluginAddress,\n      currentHelpers: selectedInstallation.appliedPreparation.helpers,\n      data,\n    },\n  };\n}\n\n/**\n * Gets an estimation of the gas fee of preparing an update\n *\n * @export\n * @param {IClientWeb3Core} web3\n * @param {IClientGraphQLCore} graphql\n * @param {(PrepareUpdateParams & { pluginSetupProcessorAddress: string })} params\n * @return {Promise<GasFeeEstimation>}\n */\nexport async function prepareGenericUpdateEstimation(\n  web3: IClientWeb3Core,\n  graphql: IClientGraphQLCore,\n  params: PrepareUpdateParams & { pluginSetupProcessorAddress: string },\n): Promise<GasFeeEstimation> {\n  const signer = web3.getConnectedSigner();\n  const prepareUpdateParams = await getPrepareUpdateParams(graphql, params);\n  // connect to psp contract\n  const pspContract = PluginSetupProcessor__factory.connect(\n    params.pluginSetupProcessorAddress,\n    signer,\n  );\n  const gasEstimation = await pspContract.estimateGas.prepareUpdate(\n    params.daoAddressOrEns,\n    prepareUpdateParams,\n  );\n  return web3.getApproximateGasFee(gasEstimation.toBigInt());\n}\n\nexport async function* prepareGenericUpdate(\n  web3: IClientWeb3Core,\n  graphql: IClientGraphQLCore,\n  params: PrepareUpdateParams & {\n    pluginSetupProcessorAddress: string;\n  },\n): AsyncGenerator<PrepareUpdateStepValue> {\n  const signer = web3.getConnectedSigner();\n  const prepareUpdateParams = await getPrepareUpdateParams(graphql, params);\n  // connect to psp contract\n  const pspContract = PluginSetupProcessor__factory.connect(\n    params.pluginSetupProcessorAddress,\n    signer,\n  );\n\n  const tx = await pspContract.prepareUpdate(\n    params.daoAddressOrEns,\n    prepareUpdateParams,\n  );\n  yield {\n    key: PrepareUpdateStep.PREPARING,\n    txHash: tx.hash,\n  };\n  const receipt = await tx.wait();\n  const pspContractInterface = PluginSetupProcessor__factory\n    .createInterface();\n  const log = findLog(\n    receipt,\n    pspContractInterface,\n    \"UpdatePrepared\",\n  );\n  if (!log) {\n    throw new PluginUpdatePreparationError();\n  }\n  const parsedLog = pspContractInterface.parseLog(log);\n  const versionTag = parsedLog.args[\"versionTag\"];\n  const preparedSetupData = parsedLog.args[\"preparedSetupData\"];\n  const initData = parsedLog.args[\"initData\"];\n  if (\n    !versionTag || versionTag.build !== params.newVersion.build ||\n    versionTag.release !== params.newVersion.release || !preparedSetupData ||\n    !initData\n  ) {\n    throw new PluginUpdatePreparationError();\n  }\n  yield {\n    key: PrepareUpdateStep.DONE,\n    versionTag,\n    pluginRepo: params.pluginRepo,\n    pluginAddress: params.pluginAddress,\n    initData: hexToBytes(initData),\n    permissions: preparedSetupData.permissions,\n    helpers: preparedSetupData.helpers,\n  };\n}\n\n/**\n * Replacing function for ethers getNetwork that includes additional networks\n *\n * @export\n * @param {Networkish} networkish\n * @return {Network}\n */\nexport function getNetwork(networkish: Networkish): Network {\n  let network: Network | null = null;\n  try {\n    network = ethersGetNetwork(networkish);\n  } catch {}\n  try {\n    network = aragonGetNetwork(networkish);\n  } catch {}\n  if (!network) {\n    throw new UnsupportedNetworkError(networkish.toString());\n  }\n  return network;\n}\n\n/**\n * When ethers 5 does not support the network return a Network object\n * using our osx-commons-configs as a source of truth\n *\n * @private\n * @param {Networkish} networkish\n * @return {*}  {Network}\n */\nfunction aragonGetNetwork(networkish: Networkish): Network | null {\n  let aragonNetwork: NetworkConfig | null = null;\n  let network: Network | null = null;\n  switch (typeof networkish) {\n    case \"string\":\n    case \"number\": {\n      if (typeof networkish === \"number\") {\n        aragonNetwork = getNetworkByChainId(networkish);\n      } else {\n        aragonNetwork = getNetworkByNameOrAlias(networkish);\n      }\n      if (!aragonNetwork) {\n        throw new UnsupportedNetworkError(networkish.toString());\n      }\n      const ethers5Alias = getNetworkAlias(\n        SupportedAliases.ETHERS_5,\n        aragonNetwork.name,\n      );\n      const networkDeployment = getNetworkDeploymentForVersion(\n        aragonNetwork.name,\n        SupportedVersions.V1_3_0,\n      );\n      if (!networkDeployment) {\n        throw new UnsupportedNetworkError(aragonNetwork.name);\n      }\n      const ensRegistryAddress = networkDeployment.ENSRegistry?.address;\n      network = {\n        name: ethers5Alias || aragonNetwork.name,\n        chainId: aragonNetwork.chainId,\n        ensAddress: ensRegistryAddress,\n      };\n      break;\n    }\n    case \"object\":\n      if (networkish.name && networkish.chainId) {\n        network = networkish;\n      }\n      break;\n    default:\n      throw new UnsupportedNetworkError(networkish);\n  }\n  return network;\n}\n\n/**\n * Gets the interfaceId of a given interface\n *\n * @export\n * @param {Interface} iface\n * @return {string}\n */\nexport function getInterfaceId(iface: Interface): string {\n  let interfaceId = Zero;\n  const functions: string[] = Object.keys(iface.functions);\n  for (const func of functions) {\n    interfaceId = interfaceId.xor(iface.getSighash(func));\n  }\n  return interfaceId.toHexString();\n}\n\nexport function getDefaultIpfsNodes(network: SupportedNetworks) {\n  return networks[network].isTestnet\n    ? IPFS_ENDPOINTS.test\n    : IPFS_ENDPOINTS.prod;\n}\n\nexport function getDefaultGraphqlNodes(network: SupportedNetworks) {\n  return [{\n    url:\n      `https://subgraph.satsuma-prod.com/qHR2wGfc5RLi6/aragon/osx-${network}/version/v1.4.0/api`,\n  }];\n}\n","import { JsonRpcProvider, Network, Networkish } from \"@ethersproject/providers\";\nimport { Client as IpfsClient } from \"@aragon/sdk-ipfs\";\nimport { GraphQLClient } from \"graphql-request\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { ContextParams, ContextState, OverriddenState } from \"./types\";\nimport {\n  getDefaultGraphqlNodes,\n  getDefaultIpfsNodes,\n  getNetwork,\n} from \"./utils\";\nimport {\n  InvalidAddressError,\n  InvalidGasEstimationFactorError,\n  UnsupportedNetworkError,\n  UnsupportedProtocolError,\n} from \"./errors\";\nimport {\n  FrameworkContractsNames,\n  getNetworkDeploymentForVersion,\n  getNetworkNameByAlias,\n  NonFrameworkContractsNames,\n  SupportedVersions,\n} from \"@aragon/osx-commons-configs\";\n\nconst DEFAULT_GAS_FEE_ESTIMATION_FACTOR = 0.625;\nconst supportedProtocols = [\"https:\"];\nconst contractNames = [\n  ...Object.values(FrameworkContractsNames),\n  ...Object.values(NonFrameworkContractsNames),\n] as (FrameworkContractsNames | NonFrameworkContractsNames)[];\nif (typeof process !== \"undefined\" && process?.env?.TESTING) {\n  supportedProtocols.push(\"http:\");\n}\n\nexport abstract class ContextCore {\n  protected state: ContextState = {} as ContextState;\n\n  protected overriden: OverriddenState = contractNames.reduce(\n    (acc, key) => ({ ...acc, [key]: false }),\n    { ENSRegistry: false } as OverriddenState,\n  );\n  // INTERNAL CONTEXT STATE\n  /**\n   * @param {Object} params\n   *\n   * @constructor\n   */\n  constructor(params?: Partial<ContextParams>) {\n    // set network to mainnet, overrided by the value of params\n    const mergedParams = Object.assign({ network: \"mainnet\" }, params);\n    this.set(mergedParams);\n  }\n\n  set(contextParams: Partial<ContextParams>) {\n    if (contextParams.network) {\n      this.state.network = ContextCore.resolveNetwork(\n        contextParams.network,\n        contextParams.ENSRegistry,\n      );\n      // once the network is resolved set default values\n      this.setNetworkDefaults();\n    }\n    if (contextParams.signer) {\n      this.state.signer = contextParams.signer;\n    }\n    if (\n      contextParams.web3Providers ||\n      (Array.isArray(contextParams.web3Providers) &&\n        contextParams.web3Providers.length)\n    ) {\n      this.state.web3Providers = ContextCore.resolveWeb3Providers(\n        contextParams.web3Providers,\n        this.state.network,\n      );\n    }\n    if (contextParams.graphqlNodes?.length) {\n      this.state.graphql = ContextCore.resolveGraphql(\n        contextParams.graphqlNodes,\n      );\n      this.overriden.graphqlNodes = true;\n    }\n    if (contextParams.ipfsNodes?.length) {\n      this.state.ipfs = ContextCore.resolveIpfs(contextParams.ipfsNodes);\n      this.overriden.ipfsNodes = true;\n    }\n    // Set all the available addresses\n    for (const address of contractNames) {\n      if (contextParams[address]) {\n        this.state[address] = contextParams[address]!;\n        this.overriden[address] = true;\n      }\n    }\n\n    if (contextParams.gasFeeEstimationFactor) {\n      this.state.gasFeeEstimationFactor = ContextCore\n        .resolveGasFeeEstimationFactor(\n          contextParams.gasFeeEstimationFactor,\n        );\n      this.overriden.gasFeeEstimationFactor = true;\n    }\n  }\n\n  private setNetworkDefaults() {\n    // check network\n    const networkName = getNetworkNameByAlias(this.network.name);\n    if (!networkName) {\n      throw new UnsupportedNetworkError(this.network.name);\n    }\n    // set graphql nodes\n    if (!this.overriden.graphqlNodes) {\n      this.state.graphql = ContextCore.resolveGraphql(\n        getDefaultGraphqlNodes(networkName),\n      );\n    }\n    // set ipfs nodes\n    if (!this.overriden.ipfsNodes) {\n      this.state.ipfs = ContextCore.resolveIpfs(\n        getDefaultIpfsNodes(networkName),\n      );\n    }\n    // set contract addresses\n    for (const contractName of contractNames) {\n      if (!this.overriden[contractName]) {\n        let contractAddress: string | undefined;\n        // get deployment\n        let deployment = getNetworkDeploymentForVersion(\n          networkName,\n          SupportedVersions.V1_3_0,\n        );\n        // get address from deployment\n        if (deployment) {\n          contractAddress = deployment[contractName]?.address;\n        }\n        // custom check for ensRegistryAddress\n        // set the ensRegistryAddress to the network.ensAddress\n        if (\n          contractName === NonFrameworkContractsNames.ENS_REGISTRY &&\n          !contractAddress\n        ) {\n          contractAddress = this.network.ensAddress;\n        }\n        if (contractAddress) {\n          this.state[contractName] = contractAddress;\n        }\n      }\n    }\n\n    if (!this.overriden.gasFeeEstimationFactor) {\n      this.state.gasFeeEstimationFactor = DEFAULT_GAS_FEE_ESTIMATION_FACTOR;\n    }\n  }\n\n  // GETTERS\n\n  /**\n   * Getter for the network\n   *\n   * @var network\n   *\n   * @returns {Networkish}\n   *\n   * @public\n   */\n  get network() {\n    return this.state.network;\n  }\n  /**\n   * Getter for the Signer\n   *\n   * @var signer\n   *\n   * @returns {Signer}\n   *\n   * @public\n   */\n  get signer(): Signer {\n    return this.state.signer;\n  }\n\n  /**\n   * Getter for the web3 providers\n   *\n   * @var web3Providers\n   *\n   * @returns {JsonRpcProvider[]}\n   *\n   * @public\n   */\n  get web3Providers(): JsonRpcProvider[] {\n    return this.state.web3Providers || [];\n  }\n\n  /**\n   * Getter for the gas fee reducer used in estimations\n   *\n   * @var gasFeeEstimationFactor\n   *\n   * @returns {number}\n   *\n   * @public\n   */\n  get gasFeeEstimationFactor(): number {\n    return (\n      this.state.gasFeeEstimationFactor\n    );\n  }\n\n  /**\n   * Getter for the IPFS http client\n   *\n   * @var ipfs\n   *\n   * @returns {IpfsClient[]}\n   *\n   * @public\n   */\n  get ipfs(): IpfsClient[] {\n    return this.state.ipfs;\n  }\n\n  /**\n   * Getter for the GraphQL client\n   *\n   * @var graphql\n   *\n   * @returns {GraphQLClient[]}\n   *\n   * @public\n   */\n  get graphql(): GraphQLClient[] {\n    return this.state.graphql;\n  }\n\n  public getAddress(\n    contractName: FrameworkContractsNames | NonFrameworkContractsNames,\n  ): string | undefined {\n    return this.state[contractName];\n  }\n\n  // INTERNAL HELPERS\n  private static resolveNetwork(\n    networkish: Networkish,\n    ensRegistryAddress?: string,\n  ): Network {\n    const network = getNetwork(networkish);\n    if (ensRegistryAddress) {\n      if (!isAddress(ensRegistryAddress)) {\n        throw new InvalidAddressError();\n      } else {\n        network.ensAddress = ensRegistryAddress;\n      }\n    }\n    return network;\n  }\n\n  private static resolveWeb3Providers(\n    endpoints: string | JsonRpcProvider | (string | JsonRpcProvider)[],\n    network: Network,\n  ): JsonRpcProvider[] {\n    if (Array.isArray(endpoints)) {\n      return endpoints.map((item) => {\n        if (typeof item === \"string\") {\n          const url = new URL(item);\n          if (!supportedProtocols.includes(url.protocol)) {\n            throw new UnsupportedProtocolError(url.protocol);\n          }\n          return new JsonRpcProvider(url.href, network);\n        }\n        return item;\n      });\n    } else if (typeof endpoints === \"string\") {\n      const url = new URL(endpoints);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      return [new JsonRpcProvider(url.href, network)];\n    } else {\n      return [endpoints];\n    }\n  }\n\n  private static resolveIpfs(\n    configs: {\n      url: string;\n      headers?: Record<string, string>;\n    }[],\n  ): IpfsClient[] {\n    let clients: IpfsClient[] = [];\n    configs.forEach((config) => {\n      const url = new URL(config.url);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      clients.push(new IpfsClient(url, config.headers));\n    });\n    return clients;\n  }\n\n  private static resolveGraphql(endpoints: { url: string }[]): GraphQLClient[] {\n    let clients: GraphQLClient[] = [];\n    endpoints.forEach((endpoint) => {\n      const url = new URL(endpoint.url);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      clients.push(new GraphQLClient(url.href));\n    });\n    return clients;\n  }\n\n  private static resolveGasFeeEstimationFactor(\n    gasFeeEstimationFactor: number,\n  ): number {\n    if (gasFeeEstimationFactor < 0 || gasFeeEstimationFactor > 1) {\n      throw new InvalidGasEstimationFactorError();\n    }\n    return gasFeeEstimationFactor;\n  }\n}\n","import {\n  InvalidPromiseError,\n  InvalidTimeoutError,\n  TimeoutError,\n} from \"./errors\";\n\n/**\n * Run a promise with a timeout\n *\n * @export\n * @template T\n * @param {Promise<T>} prom The promise to track\n * @param {number} timeout Timeout (in milliseconds) to wait before failing\n * @param {string} [timeoutMessage] (optional) Message to use when throwing a timeout error. By default: `\"Time out\"`\n * @return {Promise<T>}\n */\nexport function promiseWithTimeout<T>(\n  prom: Promise<T>,\n  timeout: number,\n  timeoutMessage?: string,\n): Promise<T> {\n  if (\n    !prom ||\n    typeof prom.then !== \"function\" ||\n    typeof prom.catch !== \"function\"\n  ) {\n    throw new InvalidPromiseError();\n  } else if (isNaN(timeout) || timeout < 0) throw new InvalidTimeoutError();\n\n  return new Promise((resolve, reject) => {\n    setTimeout(\n      () => reject(new TimeoutError(timeoutMessage || \"Time out\")),\n      timeout,\n    );\n\n    return prom.then((result) => resolve(result)).catch((err) => reject(err));\n  });\n}\n\n/**\n * Run a promise and retry it until it succeeds or the `shouldRetry` function returns false\n *\n * @export\n * @template T\n * @param {{\n *   func: () => Promise<T>;\n *   onFail?: (e: Error) => void;\n *   shouldRetry: () => boolean;\n * }} { func, onFail, shouldRetry }\n * @return {void}\n */\nexport async function runAndRetry<T>({ func, onFail, shouldRetry }: {\n  func: () => Promise<T>;\n  onFail?: (e: Error) => void;\n  shouldRetry: () => boolean;\n}) {\n  let lastErr: Error;\n  do {\n    try {\n      const result = await func();\n      // it worked\n      return result;\n    } catch (err) {\n      lastErr = err as Error;\n      if (typeof onFail === \"function\") {\n        onFail(err as Error);\n      }\n    }\n  } while (shouldRetry());\n\n  // all the iterations failed\n  throw lastErr;\n}\n","import { ClientError, GraphQLClient } from \"graphql-request\";\nimport { IClientGraphQLCore } from \"../interfaces\";\nimport { Context } from \"../../context\";\nimport { QueryStatus } from \"../graphql-queries\";\nimport {\n  ClientNotInitializedError,\n  GraphQLError,\n  NoNodesAvailableError,\n} from \"../../errors\";\nimport { runAndRetry } from \"../../promises\";\n\nexport class GraphqlModule implements IClientGraphQLCore {\n  private clientIdx: number = -1;\n  private clients: GraphQLClient[] = [];\n  constructor(context: Context) {\n    if (context.graphql?.length) {\n      this.clients = context.graphql;\n      this.clientIdx = Math.floor(Math.random() * context.graphql.length);\n    }\n  }\n  /**\n   * Get the current graphql client\n   * @returns {GraphQLClient}\n   */\n  public getClient(): GraphQLClient {\n    if (!this.clients.length || !this.clients[this.clientIdx]) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    return this.clients[this.clientIdx];\n  }\n\n  /**\n   * Starts using the next available Graphql endpoint\n   * @returns {void}\n   */\n  public shiftClient(): void {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    } else if (this.clients.length < 2) {\n      throw new NoNodesAvailableError(\"graphql\");\n    }\n    this.clientIdx = (this.clientIdx + 1) % this.clients.length;\n  }\n\n  /**\n   * Checks if the current node is online\n   * @returns {Promise<boolean>}\n   */\n  public isUp(): Promise<boolean> {\n    return this.getClient().request(QueryStatus).then((res) => {\n      return !!res._meta?.deployment;\n    }).catch(() => {\n      return false;\n    });\n  }\n\n  /**\n   * Ensures that the graphql is online.\n   * If the current node is not online\n   * it will shift to the next one and\n   * repeat until it finds an online\n   * node. In the case that there are no\n   * nodes or none of them is available\n   * it will throw an error\n   * @returns {Promise<void>}\n   */\n  public async ensureOnline(): Promise<void> {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    for (let i = 0; i < this.clients.length; i++) {\n      if (await this.isUp()) return;\n      this.shiftClient();\n    }\n    throw new NoNodesAvailableError(\"graphql\");\n  }\n\n  public request({ query, params, name }: {\n    query: string;\n    params: { [key: string]: any };\n    name?: string;\n  }) {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    let retries = this.clients.length;\n    return runAndRetry({\n      func: () => this.getClient().request(query, params),\n      onFail: (e: Error) => {\n        if (e instanceof ClientError) {\n          // If the error code is not a 5XX means the\n          // error is not generated by the server\n          if (e.response.status < 500) {\n            throw new GraphQLError(name || \"\", e);\n          }\n        }\n        retries--;\n        this.shiftClient();\n      },\n      shouldRetry: () => retries > 0,\n    });\n  }\n}\n","import {\n  Client as IpfsClient,\n  ClientError,\n  PinResponse,\n} from \"@aragon/sdk-ipfs\";\nimport { IClientIpfsCore } from \"../interfaces\";\nimport { Context } from \"../../context\";\nimport {\n  ClientNotInitializedError,\n  DataDecodingError,\n  IpfsError,\n  NoNodesAvailableError,\n} from \"../../errors\";\nimport { runAndRetry } from \"../../promises\";\n\nexport class IPFSModule implements IClientIpfsCore {\n  private clientIdx: number = -1;\n  private clients: IpfsClient[] = [];\n  constructor(context: Context) {\n    // Storing client data in the private module's scope to prevent external mutation\n    if (context.ipfs?.length) {\n      this.clients = context.ipfs;\n      this.clientIdx = Math.floor(Math.random() * context.ipfs.length);\n    }\n  }\n\n  public getClient(): IpfsClient {\n    if (!this.clients.length || !this.clients[this.clientIdx]) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    }\n    return this.clients[this.clientIdx];\n  }\n\n  /**\n   * Starts using the next available IPFS endpoint\n   */\n  public shiftClient(): void {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    } else if (this.clients?.length < 2) {\n      throw new NoNodesAvailableError(\"ipfs\");\n    }\n    this.clientIdx = (this.clientIdx + 1) % this.clients.length;\n  }\n\n  /** Returns `true` if the current client is on line */\n  public isUp(): Promise<boolean> {\n    if (!this.clients?.length) return Promise.resolve(false);\n    return this.getClient().nodeInfo().then(() => true).catch(() => false);\n  }\n\n  public async ensureOnline(): Promise<void> {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    }\n    for (let i = 0; i < this.clients?.length; i++) {\n      if (await this.isUp()) return;\n      this.shiftClient();\n    }\n    throw new NoNodesAvailableError(\"ipfs\");\n  }\n\n  public getOnlineClient(): Promise<IpfsClient> {\n    return this.ensureOnline().then(() => this.getClient());\n  }\n\n  // IPFS METHODS\n\n  public async add(input: string | Uint8Array): Promise<string> {\n    return this.runAndRetryHelper(() => this.getClient().add(input)).then((\n      res,\n    ) => res.hash);\n  }\n\n  public pin(input: string): Promise<PinResponse> {\n    return this.runAndRetryHelper(() => this.getClient().pin(input));\n  }\n\n  public fetchBytes(cid: string): Promise<Uint8Array | undefined> {\n    return this.runAndRetryHelper(() => this.getClient().cat(cid));\n  }\n\n  private runAndRetryHelper<T>(f: () => Promise<T>): Promise<T> {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    }\n    let retries = this.clients.length;\n    return runAndRetry({\n      func: f,\n      onFail: (e: Error) => {\n        if (e instanceof ClientError) {\n          if (e.response.status < 500) {\n            // If the error code is not a 5XX means the\n            // error is not generated by the server\n            throw new IpfsError(e);\n          }\n        }\n        retries--;\n        this.shiftClient();\n      },\n      shouldRetry: () => retries > 0,\n    });\n  }\n\n  public fetchString(cid: string): Promise<string> {\n    return this.fetchBytes(cid)\n      .then((bytes) => new TextDecoder().decode(bytes))\n      .catch((e) => {\n        throw new DataDecodingError(e.message);\n      });\n  }\n}\n","import { JsonRpcProvider } from \"@ethersproject/providers\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { Contract, ContractInterface } from \"@ethersproject/contracts\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { IClientWeb3Core } from \"../interfaces\";\nimport { Context } from \"../../context\";\nimport { GasFeeEstimation } from \"../../types\";\nimport {\n  CannotEstimateGasError,\n  InvalidAddressError,\n  InvalidContractAbiError,\n  NoNodesAvailableError,\n  NoProviderError,\n  NoSignerError,\n  UnsupportedNetworkError,\n} from \"../../errors\";\nimport {\n  FrameworkContractsNames,\n  getNetworkByAlias,\n  NonFrameworkContractsNames,\n  SupportedNetworks,\n} from \"@aragon/osx-commons-configs\";\nexport class Web3Module implements IClientWeb3Core {\n  private static readonly PRECISION_FACTOR_BASE = 1000;\n  private providerIdx: number = -1;\n  private context: Context;\n\n  constructor(context: Context) {\n    this.context = context;\n    this.providerIdx = Math.floor(Math.random() * context.web3Providers.length);\n  }\n\n  /** Starts using the next available Web3 provider */\n  public shiftProvider(): void {\n    if (!this.context.web3Providers.length) {\n      throw new NoProviderError();\n    } else if (this.context.web3Providers.length <= 1) {\n      throw new NoNodesAvailableError(\"web3\");\n    }\n    this.providerIdx = (this.providerIdx + 1) %\n      this.context.web3Providers.length;\n  }\n\n  /** Retrieves the current signer */\n  public getSigner(): Signer {\n    if (!this.context.signer) {\n      throw new NoSignerError();\n    }\n    return this.context.signer;\n  }\n  /** Returns the currently active network provider */\n  public getProvider(): JsonRpcProvider {\n    if (!this.context.web3Providers[this.providerIdx]) {\n      throw new NoProviderError();\n    }\n    return this.context.web3Providers[this.providerIdx];\n  }\n\n  /** Returns the currently active network */\n  public getNetworkName(): SupportedNetworks {\n    const network = getNetworkByAlias(this.context.network.name);\n    if (!network) {\n      throw new UnsupportedNetworkError(this.context.network.name);\n    }\n    return network.name;\n  }\n\n  /** Returns a signer connected to the current network provider */\n  public getConnectedSigner(): Signer {\n    let signer = this.getSigner();\n    if (!signer.provider) {\n      const provider = this.getProvider();\n      signer = signer.connect(provider);\n    }\n    return signer;\n  }\n\n  /** Returns whether the current provider is functional or not */\n  public isUp(): Promise<boolean> {\n    const provider = this.getProvider();\n    return provider\n      .getNetwork()\n      .then(() => true)\n      .catch(() => false);\n  }\n\n  public async ensureOnline(): Promise<void> {\n    if (!this.context.web3Providers.length) {\n      throw new NoProviderError();\n    }\n\n    for (let i = 0; i < this.context.web3Providers.length; i++) {\n      if (await this.isUp()) return;\n      this.shiftProvider();\n    }\n    throw new NoNodesAvailableError(\"web3\");\n  }\n\n  /**\n   * Returns a contract instance at the given address\n   *\n   * @param address Contract instance address\n   * @param abi The Application Binary Inteface of the contract\n   * @return A contract instance attached to the given address\n   */\n  public attachContract<T>(\n    address: string,\n    abi: ContractInterface,\n  ): Contract & T {\n    if (!address || !isAddress(address)) throw new InvalidAddressError();\n    else if (!abi) throw new InvalidContractAbiError();\n    const signer = this.getConnectedSigner();\n    return new Contract(address, abi, signer) as Contract & T;\n  }\n\n  /** Calculates the expected maximum gas fee */\n  public getMaxFeePerGas(): Promise<bigint> {\n    return this.getConnectedSigner()\n      .getFeeData()\n      .then((feeData) => {\n        if (!feeData.maxFeePerGas) {\n          throw new CannotEstimateGasError();\n        }\n        return feeData.maxFeePerGas.toBigInt();\n      });\n  }\n\n  public getApproximateGasFee(estimatedFee: bigint): Promise<GasFeeEstimation> {\n    return this.getMaxFeePerGas().then((maxFeePerGas) => {\n      const max = estimatedFee * maxFeePerGas;\n\n      const factor = this.context.gasFeeEstimationFactor *\n        Web3Module.PRECISION_FACTOR_BASE;\n\n      const average = (max * BigInt(Math.trunc(factor))) /\n        BigInt(Web3Module.PRECISION_FACTOR_BASE);\n\n      return { average, max };\n    });\n  }\n\n  /** FRAMEWORK ADDRESSES */\n  public getAddress(\n    addressName: FrameworkContractsNames | NonFrameworkContractsNames,\n  ): string {\n    const address = this.context.getAddress(addressName);\n    if (!address || !isAddress(address)) {\n      throw new InvalidAddressError();\n    }\n    return address;\n  }\n}\n","import {\n  GraphqlModule,\n  IClientCore,\n  IClientGraphQLCore,\n  IClientIpfsCore,\n  IClientWeb3Core,\n  IPFSModule,\n  Web3Module,\n} from \"./internal\";\nimport { Context } from \"./context\";\n\n/**\n * Provides the low level foundation so that subclasses have ready-made access to Web3, IPFS and GraphQL primitives\n */\nexport abstract class ClientCore implements IClientCore {\n  public web3: IClientWeb3Core;\n  public ipfs: IClientIpfsCore;\n  public graphql: IClientGraphQLCore;\n  constructor(context: Context) {\n    this.web3 = new Web3Module(context);\n    this.ipfs = new IPFSModule(context);\n    this.graphql = new GraphqlModule(context);\n  }\n}\n","import { ContextCore } from \"./context-core\";\nimport { ContextParams } from \"./types\";\n\n// Basic implementation of the contex extending ContextCore\nexport class Context extends ContextCore {\n  constructor(params?: Partial<ContextParams>) {\n    super(params);\n  }\n}\n","export const ANY_ADDRESS = \"0xffffffffffffffffffffffffffffffffffffffff\";\n","import {\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidContractAbiError,\n  InvalidParameter,\n  InvalidSubdomainError,\n} from \"./errors\";\nimport { array, mixed, number, object, string } from \"yup\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { ANY_ADDRESS } from \"./internal/constants\";\nimport { isEnsName, isIpfsUri, isSubdomain } from \"./validation\";\n\nexport const BigintSchema = mixed().test(\n  \"isBigint\",\n  new InvalidParameter(\"bigint\").message,\n  (value) => typeof value === \"bigint\",\n);\nexport const AddressOrEnsSchema = string().notRequired().test(\n  \"isAddressOrEns\",\n  new InvalidAddressOrEnsError().message,\n  (value) => value ? isAddress(value) || isEnsName(value) : true,\n);\nexport const AddressOrEnsWithoutAnySchema = string().notRequired().test(\n  \"isAddressOrEnsWithoutAny\",\n  new InvalidAddressOrEnsError().message,\n  (value) =>\n    value\n      ? (isAddress(value) || isEnsName(value)) && value !== ANY_ADDRESS\n      : true,\n);\nexport const VersionTagSchema = object({\n  build: number().moreThan(0).required(),\n  release: number().moreThan(0).required(),\n});\nexport const AbiSchema = array().notRequired().test(\n  \"isValidAbi\",\n  new InvalidContractAbiError().message,\n  // TODO: validate abi\n  () => true,\n);\nexport const Uint8ArraySchema = mixed().test(\n  \"isUint8Array\",\n  new InvalidParameter(\"Uint8Array\").message,\n  (value) => value ? value instanceof Uint8Array : true,\n);\nexport const IpfsUriSchema = string().test(\n  \"isIpfsUri\",\n  new InvalidCidError().message,\n  (value) => value ? isIpfsUri(value) : true,\n);\nexport const SubdomainSchema = string().test(\n  \"isSubdomain\",\n  new InvalidSubdomainError().message,\n  (value) => value ? isSubdomain(value) : true,\n);\n\nexport const PaginationSchema = object({\n  skip: number().min(0).notRequired(),\n  limit: number().min(1).notRequired(),\n  direction: string().oneOf([\"asc\", \"desc\"]).notRequired(),\n});\n\nexport const PrepareUninstallationSchema = object({\n  daoAddressOrEns: AddressOrEnsSchema.required(),\n  pluginAddress: AddressOrEnsSchema.required(),\n  pluginInstallationIndex: number().notRequired().min(0),\n  uninstallationParams: array().notRequired(),\n  uninstallationAbi: AbiSchema.notRequired(),\n});\nexport const MultiTargetPermissionSchema = object({\n  operation: number().required().oneOf([0, 1, 2]),\n  permissionId: string().required(),\n  where: AddressOrEnsWithoutAnySchema.required(),\n  who: AddressOrEnsWithoutAnySchema.required(),\n  condition: string().notRequired(),\n});\n\nexport const PrepareInstallationSchema = object({\n  daoAddressOrEns: AddressOrEnsSchema.required(),\n  pluginRepo: AddressOrEnsSchema.required(),\n  version: VersionTagSchema.notRequired(),\n  installationParams: array().notRequired(),\n  installationAbi: AbiSchema.notRequired(),\n});\n\nexport const PluginInstallItemSchema = object({\n  id: AddressOrEnsSchema.required(),\n  data: Uint8ArraySchema.required(),\n});\n\nexport const ApplyUninstallationSchema = object({\n  pluginAddress: AddressOrEnsSchema.required(),\n  pluginRepo: AddressOrEnsSchema.required(),\n  versionTag: VersionTagSchema.required(),\n  permissions: array(MultiTargetPermissionSchema).required(),\n});\n\nexport const ApplyInstallationSchema = ApplyUninstallationSchema.concat(object({\n  helpers: array(AddressOrEnsSchema).required(),\n}));\n\nexport const IsMemberSchema = object({\n  address: AddressOrEnsSchema.required(),\n  pluginAddress: AddressOrEnsSchema.required(),\n  blockNumber: number().notRequired(),\n});\n"],"names":["PrepareInstallationStep","PrepareUninstallationSteps","PermissionOperationType","SortDirection","TokenType","ProposalStatus","PrepareUpdateStep","MULTI_FETCH_TIMEOUT","UNSUPPORTED_PROPOSAL_METADATA_LINK","title","summary","description","resources","EMPTY_PROPOSAL_METADATA_LINK","UNAVAILABLE_PROPOSAL_METADATA","IPFS_ENDPOINTS","prod","url","headers","test","Permissions","UPGRADE_PERMISSION","UPGRADE_PLUGIN_PERMISSION","SET_METADATA_PERMISSION","EXECUTE_PERMISSION","WITHDRAW_PERMISSION","SET_SIGNATURE_VALIDATOR_PERMISSION","SET_TRUSTED_FORWARDER_PERMISSION","ROOT_PERMISSION","CREATE_VERSION_PERMISSION","REGISTER_PERMISSION","REGISTER_DAO_PERMISSION","REGISTER_ENS_SUBDOMAIN_PERMISSION","MINT_PERMISSION","MERKLE_MINT_PERMISSION","MODIFY_ALLOWLIST_PERMISSION","SET_CONFIGURATION_PERMISSION","PermissionIds","Object","entries","reduce","acc","_ref","_extends2","k","v","_extends","keccak256","toUtf8Bytes","freeze","IPFS_CID_REGEX","IPFS_URI_REGEX","OSX_PROPOSAL_ID_REGEX","HEX_STRING_REGEX","ENS_REGEX","SUBDOMAIN_REGEX","QueryStatus","gql","_templateObject","_taggedTemplateLiteralLoose","QueryIPlugin","SdkError","_Error","_inheritsLoose","message","cause","_this","call","Error","_wrapNativeSuper","TimeoutError","_SdkError","UnsupportedProtocolError","_SdkError2","protocol","GraphQLError","_SdkError3","model","IpfsError","_SdkError4","InvalidAddressOrEnsError","_SdkError5","InvalidAddressError","_SdkError6","InvalidCidError","_SdkError7","InvalidProposalIdError","_SdkError8","NoProviderError","_SdkError9","NoSignerError","_SdkError10","UnexpectedActionError","_SdkError11","NoTokenAddress","_SdkError12","NoDaoFactory","_SdkError13","NoPluginRepoRegistry","_SdkError14","NoDaoRegistry","_SdkError15","IpfsPinError","_SdkError16","ProposalCreationError","_SdkError17","DaoCreationError","_SdkError18","MissingExecPermissionError","_SdkError19","IpfsFetchError","_SdkError20","InvalidVotingModeError","_SdkError21","UpdateAllowanceError","_SdkError22","InvalidPrecisionError","_SdkError23","FailedDepositError","_SdkError24","AmountMismatchError","_SdkError25","expected","received","UnsupportedNetworkError","_SdkError26","network","ClientNotInitializedError","_SdkError27","client","NoNodesAvailableError","_SdkError28","name","PluginInstallationPreparationError","_SdkError29","DataDecodingError","_SdkError30","InvalidContractAddressError","_SdkError31","InvalidContractAbiError","_SdkError32","CannotEstimateGasError","_SdkError33","InstallationNotFoundError","_SdkError34","PluginUninstallationPreparationError","_SdkError35","MissingMetadataError","_SdkError36","InvalidPrepareUninstallationAbiError","_SdkError37","InvalidEnsError","_SdkError38","DepositNativeTokenError","_SdkError39","AlwaysFailingProposalError","_SdkError40","SizeMismatchError","_SdkError41","field1","field2","InvalidProposalStatusError","_SdkError42","NotImplementedError","_SdkError43","InvalidActionError","_SdkError44","InvalidSubdomainError","_SdkError45","InvalidGasEstimationFactorError","_SdkError46","InvalidParameter","_SdkError47","NotAContractError","_SdkError48","InvalidVersionError","_SdkError49","PluginUpdatePreparationError","_SdkError50","ProposalNotFoundError","_SdkError51","InvalidArraySizeError","_SdkError52","size","InvalidRatioValueError","_SdkError53","ratio","InvalidDigitsValueError","_SdkError54","digits","ValueOutOfRangeError","_SdkError55","InvalidBitMapValueError","_SdkError56","EmptyMultiUriError","_SdkError57","InvalidPromiseError","_SdkError58","InvalidTimeoutError","_SdkError59","InvalidPermissionOperationType","_SdkError60","ContractNotDeployedError","_SdkError61","contractName","version","MultiUri","multiUri","items","split","_createClass","key","get","_iterator","_createForOfIteratorHelperLoose","_step","done","item","value","startsWith","substring","idx","indexOf","cid","_iterator2","_step2","path","pathIdx","searchIdx","filter","resolveIpfsCid","data","uri","ipfsCid","isProposalId","proposalId","regex","RegExp","isEnsName","isIpfsUri","isSubdomain","ensure0x","strip0x","hexToBytes","hexString","Uint8Array","length","bytes","i","push","parseInt","from","bytesToHex","buff","skip0x","toString","join","encodeRatio","Number","isInteger","Math","round","pow","decodeRatio","onChainValue","encodeProposalId","pluginAddress","id","decodeProposalId","matchedRegexResult","match","boolArrayToBitmap","bools","BigInt","result","bitmapToBoolArray","bitmap","mask","getExtendedProposalId","splits","toLowerCase","hexZeroPad","getCompactProposalId","findLog","receipt","iface","eventName","logs","find","log","topics","getEvent","format","getFunctionFragment","availableFunctions","hexBytes","Interface","getFunction","getNamedTypesFromMetadata","inputs","map","input","type","tupleResult","components","tupleString","endsWith","concat","baseType","slice","prepareGenericInstallationEstimation","_x6","_x7","_prepareGenericInstallationEstimation","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","web3","params","_getNetworkByNameOrAl","provider","ethers5NetworkName","networkName","pluginRepo","currentRelease","latestVersion","_params$installationP2","installationParams","_params$installationA2","installationAbi","deployment","pspContract","gasEstimation","wrap","_callee3$","_context3","prev","next","getProvider","isAddress","getNetwork","sent","getNetworkByNameOrAlias","PluginRepo__factory","connect","latestRelease","tag","defaultAbiCoder","encode","getNetworkDeploymentForVersion","SupportedVersions","V1_3_0","PluginSetupProcessor__factory","FrameworkContractsNames","PLUGIN_SETUP_PROCESSOR","address","estimateGas","prepareInstallation","daoAddressOrEns","pluginSetupRef","pluginSetupRepo","versionTag","abrupt","getApproximateGasFee","toBigInt","stop","prepareGenericInstallation","_x","_x2","_prepareGenericInstallation","_wrapAsyncGenerator","_callee","signer","_params$installationP","_params$installationA","tx","pspContractInterface","parsedLog","preparedSetupData","_callee$","_context","getConnectedSigner","_awaitAsyncGenerator","pluginSetupProcessorAddress","PREPARING","txHash","hash","wait","createInterface","parseLog","args","DONE","permissions","helpers","getPrepareUpdateParams","_x8","_x9","_getPrepareUpdateParams","_callee4","graphql","_yield$graphql$reques","iplugin","_params$pluginInstall","pluginInstallationIndex","selectedInstallation","_params$updateParams","updateParams","_params$updateAbi","updateAbi","_callee4$","_context4","request","query","where","dao","installations","newVersion","release","appliedVersion","build","currentVersionTag","newVersionTag","setupPayload","plugin","currentHelpers","appliedPreparation","prepareGenericUpdateEstimation","_x10","_x11","_x12","_prepareGenericUpdateEstimation","_callee5","prepareUpdateParams","_callee5$","_context5","prepareUpdate","prepareGenericUpdate","_x3","_x4","_x5","_prepareGenericUpdate","_callee2","initData","_callee2$","_context2","networkish","ethersGetNetwork","_unused","aragonGetNetwork","_unused2","aragonNetwork","_networkDeployment$EN","getNetworkByChainId","ethers5Alias","getNetworkAlias","SupportedAliases","ETHERS_5","networkDeployment","ensRegistryAddress","ENSRegistry","chainId","ensAddress","getInterfaceId","interfaceId","Zero","functions","keys","_i","_functions","func","xor","getSighash","toHexString","getDefaultIpfsNodes","networks","isTestnet","getDefaultGraphqlNodes","DEFAULT_GAS_FEE_ESTIMATION_FACTOR","supportedProtocols","contractNames","values","NonFrameworkContractsNames","process","_process","env","TESTING","ContextCore","state","overriden","mergedParams","assign","set","_proto","prototype","contextParams","_contextParams$graphq","_contextParams$ipfsNo","resolveNetwork","setNetworkDefaults","web3Providers","Array","isArray","resolveWeb3Providers","graphqlNodes","resolveGraphql","ipfsNodes","ipfs","resolveIpfs","gasFeeEstimationFactor","resolveGasFeeEstimationFactor","getNetworkNameByAlias","contractAddress","_deployment$contractN","ENS_REGISTRY","getAddress","endpoints","URL","includes","JsonRpcProvider","href","configs","clients","forEach","config","IpfsClient","endpoint","GraphQLClient","promiseWithTimeout","prom","timeout","timeoutMessage","then","isNaN","Promise","resolve","reject","setTimeout","err","runAndRetry","_runAndRetry","onFail","shouldRetry","lastErr","t0","GraphqlModule","context","_context$graphql","clientIdx","floor","random","getClient","shiftClient","isUp","res","_res$_meta","_meta","ensureOnline","_ensureOnline","retries","e","ClientError","response","status","IPFSModule","_context$ipfs","_this$clients","_this$clients2","nodeInfo","_this$clients3","getOnlineClient","add","_add","_this2","runAndRetryHelper","pin","_this3","fetchBytes","_this4","cat","f","_this5","fetchString","TextDecoder","decode","Web3Module","providerIdx","shiftProvider","getSigner","getNetworkName","getNetworkByAlias","attachContract","abi","Contract","getMaxFeePerGas","getFeeData","feeData","maxFeePerGas","estimatedFee","max","factor","PRECISION_FACTOR_BASE","average","trunc","addressName","ClientCore","Context","_ContextCore","ANY_ADDRESS","BigintSchema","mixed","AddressOrEnsSchema","string","notRequired","AddressOrEnsWithoutAnySchema","VersionTagSchema","object","number","moreThan","required","AbiSchema","array","Uint8ArraySchema","IpfsUriSchema","SubdomainSchema","PaginationSchema","skip","min","limit","direction","oneOf","PrepareUninstallationSchema","uninstallationParams","uninstallationAbi","MultiTargetPermissionSchema","operation","permissionId","who","condition","PrepareInstallationSchema","PluginInstallItemSchema","ApplyUninstallationSchema","ApplyInstallationSchema","IsMemberSchema","blockNumber"],"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"}