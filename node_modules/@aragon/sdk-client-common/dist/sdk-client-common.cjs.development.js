'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var providers = require('@ethersproject/providers');
var sdkIpfs = require('@aragon/sdk-ipfs');
var graphqlRequest = require('graphql-request');
var address = require('@ethersproject/address');
var abi = require('@ethersproject/abi');
var hash = require('@ethersproject/hash');
var osxEthers = require('@aragon/osx-ethers');
var keccak256 = require('@ethersproject/keccak256');
var strings = require('@ethersproject/strings');
var bytes = require('@ethersproject/bytes');
var constants = require('@ethersproject/constants');
var osxCommonsConfigs = require('@aragon/osx-commons-configs');
var contracts = require('@ethersproject/contracts');
var yup = require('yup');

function _AsyncGenerator(e) {
  var r, t;
  function resume(r, t) {
    try {
      var n = e[r](t),
        o = n.value,
        u = o instanceof _OverloadYield;
      Promise.resolve(u ? o.v : o).then(function (t) {
        if (u) {
          var i = "return" === r ? "return" : "next";
          if (!o.k || t.done) return resume(i, t);
          t = e[i](t).value;
        }
        settle(n.done ? "return" : "normal", t);
      }, function (e) {
        resume("throw", e);
      });
    } catch (e) {
      settle("throw", e);
    }
  }
  function settle(e, n) {
    switch (e) {
      case "return":
        r.resolve({
          value: n,
          done: !0
        });
        break;
      case "throw":
        r.reject(n);
        break;
      default:
        r.resolve({
          value: n,
          done: !1
        });
    }
    (r = r.next) ? resume(r.key, r.arg) : t = null;
  }
  this._invoke = function (e, n) {
    return new Promise(function (o, u) {
      var i = {
        key: e,
        arg: n,
        resolve: o,
        reject: u,
        next: null
      };
      t ? t = t.next = i : (r = t = i, resume(e, n));
    });
  }, "function" != typeof e.return && (this.return = void 0);
}
_AsyncGenerator.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function () {
  return this;
}, _AsyncGenerator.prototype.next = function (e) {
  return this._invoke("next", e);
}, _AsyncGenerator.prototype.throw = function (e) {
  return this._invoke("throw", e);
}, _AsyncGenerator.prototype.return = function (e) {
  return this._invoke("return", e);
};
function _OverloadYield(t, e) {
  this.v = t, this.k = e;
}
function _awaitAsyncGenerator(e) {
  return new _OverloadYield(e, 0);
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw new Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw new Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function _wrapAsyncGenerator(fn) {
  return function () {
    return new _AsyncGenerator(fn.apply(this, arguments));
  };
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  try {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  } catch (e) {
    return typeof fn === "function";
  }
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };
  return _wrapNativeSuper(Class);
}
function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  strings.raw = raw;
  return strings;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

exports.PrepareInstallationStep = void 0;
(function (PrepareInstallationStep) {
  PrepareInstallationStep["PREPARING"] = "preparing";
  PrepareInstallationStep["DONE"] = "done";
})(exports.PrepareInstallationStep || (exports.PrepareInstallationStep = {}));
exports.PrepareUninstallationSteps = void 0;
(function (PrepareUninstallationSteps) {
  PrepareUninstallationSteps["PREPARING"] = "preparing";
  PrepareUninstallationSteps["DONE"] = "done";
})(exports.PrepareUninstallationSteps || (exports.PrepareUninstallationSteps = {}));
exports.PermissionOperationType = void 0;
(function (PermissionOperationType) {
  PermissionOperationType[PermissionOperationType["GRANT"] = 0] = "GRANT";
  PermissionOperationType[PermissionOperationType["REVOKE"] = 1] = "REVOKE";
  PermissionOperationType[PermissionOperationType["GRANT_WITH_CONDITION"] = 2] = "GRANT_WITH_CONDITION";
})(exports.PermissionOperationType || (exports.PermissionOperationType = {}));
exports.SortDirection = void 0;
(function (SortDirection) {
  SortDirection["ASC"] = "asc";
  SortDirection["DESC"] = "desc";
})(exports.SortDirection || (exports.SortDirection = {}));
exports.TokenType = void 0;
(function (TokenType) {
  TokenType["NATIVE"] = "native";
  TokenType["ERC20"] = "erc20";
  TokenType["ERC721"] = "erc721";
  TokenType["ERC1155"] = "erc1155";
})(exports.TokenType || (exports.TokenType = {}));
exports.ProposalStatus = void 0;
(function (ProposalStatus) {
  ProposalStatus["ACTIVE"] = "Active";
  ProposalStatus["PENDING"] = "Pending";
  ProposalStatus["SUCCEEDED"] = "Succeeded";
  ProposalStatus["EXECUTED"] = "Executed";
  ProposalStatus["DEFEATED"] = "Defeated";
})(exports.ProposalStatus || (exports.ProposalStatus = {}));
exports.PrepareUpdateStep = void 0;
(function (PrepareUpdateStep) {
  PrepareUpdateStep["PREPARING"] = "preparing";
  PrepareUpdateStep["DONE"] = "done";
})(exports.PrepareUpdateStep || (exports.PrepareUpdateStep = {}));

/** Timeout that will be applied to operations involving
 * many fetch requests that could take a long time */
var MULTI_FETCH_TIMEOUT = 7 * 1000;
var UNSUPPORTED_PROPOSAL_METADATA_LINK = {
  title: "(unsupported metadata link)",
  summary: "(the link to the metadata is not supported)",
  description: "(the link to the metadata is not supported)",
  resources: []
};
var EMPTY_PROPOSAL_METADATA_LINK = {
  title: "(the proposal has no metadata)",
  summary: "(the current proposal does not have any content defined)",
  description: "(the current proposal does not have any content defined)",
  resources: []
};
var UNAVAILABLE_PROPOSAL_METADATA = {
  title: "(unavailable metadata)",
  summary: "(the proposal metadata is not available)",
  description: "(the proposal metadata is not available)",
  resources: []
};
var IPFS_ENDPOINTS = {
  prod: [{
    url: "https://prod.ipfs.aragon.network/api/v0",
    headers: {
      "X-API-KEY": "b477RhECf8s8sdM7XrkLBs2wHc4kCMwpbcFC55Kt"
    }
  }],
  test: [{
    url: "https://test.ipfs.aragon.network/api/v0",
    headers: {
      "X-API-KEY": "b477RhECf8s8sdM7XrkLBs2wHc4kCMwpbcFC55Kt"
    }
  }]
};
var Permissions = {
  UPGRADE_PERMISSION: "UPGRADE_PERMISSION",
  UPGRADE_PLUGIN_PERMISSION: "UPGRADE_PLUGIN_PERMISSION",
  SET_METADATA_PERMISSION: "SET_METADATA_PERMISSION",
  EXECUTE_PERMISSION: "EXECUTE_PERMISSION",
  WITHDRAW_PERMISSION: "WITHDRAW_PERMISSION",
  SET_SIGNATURE_VALIDATOR_PERMISSION: "SET_SIGNATURE_VALIDATOR_PERMISSION",
  SET_TRUSTED_FORWARDER_PERMISSION: "SET_TRUSTED_FORWARDER_PERMISSION",
  ROOT_PERMISSION: "ROOT_PERMISSION",
  CREATE_VERSION_PERMISSION: "CREATE_VERSION_PERMISSION",
  REGISTER_PERMISSION: "REGISTER_PERMISSION",
  REGISTER_DAO_PERMISSION: "REGISTER_DAO_PERMISSION",
  REGISTER_ENS_SUBDOMAIN_PERMISSION: "REGISTER_ENS_SUBDOMAIN_PERMISSION",
  MINT_PERMISSION: "MINT_PERMISSION",
  MERKLE_MINT_PERMISSION: "MERKLE_MINT_PERMISSION",
  MODIFY_ALLOWLIST_PERMISSION: "MODIFY_ALLOWLIST_PERMISSION",
  SET_CONFIGURATION_PERMISSION: "SET_CONFIGURATION_PERMISSION"
};
var PermissionIds = /*#__PURE__*/Object.entries(Permissions).reduce(function (acc, _ref) {
  var _extends2;
  var k = _ref[0],
    v = _ref[1];
  return _extends({}, acc, (_extends2 = {}, _extends2[k + "_ID"] = keccak256.keccak256(strings.toUtf8Bytes(v)), _extends2));
}, {});
Object.freeze(Permissions);
Object.freeze(PermissionIds);
var IPFS_CID_REGEX = /^((Qm[1-9A-HJ-NP-Za-km-z]{44,})|(b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,})|(z[1-9A-HJ-NP-Za-km-z]{48,})|(F[0-9A-F]{50,}))$/;
var IPFS_URI_REGEX = /^ipfs:\/\/((Qm[1-9A-HJ-NP-Za-km-z]{44,})|(b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,})|(z[1-9A-HJ-NP-Za-km-z]{48,})|(F[0-9A-F]{50,}))$/;
var OSX_PROPOSAL_ID_REGEX = /^(0x[A-Fa-f0-9]{40})_(0x[A-Fa-f0-9]{1,64})$/;
var HEX_STRING_REGEX = /^(0x)?[0-9a-fA-F]*$/;
var ENS_REGEX = /^(?:[a-z0-9-]+\.)*[a-z0-9-]+\.eth$/;
var SUBDOMAIN_REGEX = /^[a-z0-9-]+$/;

var _templateObject$1;
var QueryStatus = /*#__PURE__*/graphqlRequest.gql(_templateObject$1 || (_templateObject$1 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n{\n  _meta{\n    deployment\n  }\n}\n"])));

var _templateObject;
var QueryIPlugin = /*#__PURE__*/graphqlRequest.gql(_templateObject || (_templateObject = /*#__PURE__*/_taggedTemplateLiteralLoose(["\nquery IPlugin($address: ID!, $where: IPlugin_filter!) {\n\tiplugin(id:$address, where:$where) {\n    installations(where:{state: Installed}) {\n      appliedPreparation {\n        helpers\n        pluginRepo {\n          id\n        }\n      }\n     \tappliedVersion {\n        metadata\n        build\n        release {\n          release\n        }\n      }\n    }   \n  }\n}\n"])));

var SdkError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(SdkError, _Error);
  function SdkError(message, cause) {
    var _this;
    _this = _Error.call(this, message) || this;
    _this.cause = void 0;
    if (typeof cause === "string") {
      _this.cause = cause;
    } else if (cause instanceof Error) {
      _this.cause = cause.message;
    }
    return _this;
  }
  return SdkError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
var TimeoutError = /*#__PURE__*/function (_SdkError) {
  _inheritsLoose(TimeoutError, _SdkError);
  function TimeoutError(message, cause) {
    return _SdkError.call(this, message ? message : "Time out", cause) || this;
  }
  return TimeoutError;
}(SdkError);
var UnsupportedProtocolError = /*#__PURE__*/function (_SdkError2) {
  _inheritsLoose(UnsupportedProtocolError, _SdkError2);
  function UnsupportedProtocolError(protocol, cause) {
    return _SdkError2.call(this, "Unsupported protocol: " + protocol, cause) || this;
  }
  return UnsupportedProtocolError;
}(SdkError);
var GraphQLError = /*#__PURE__*/function (_SdkError3) {
  _inheritsLoose(GraphQLError, _SdkError3);
  function GraphQLError(model, cause) {
    return _SdkError3.call(this, "Cannot fetch the " + model + " data from GraphQL", cause) || this;
  }
  return GraphQLError;
}(SdkError);
var IpfsError = /*#__PURE__*/function (_SdkError4) {
  _inheritsLoose(IpfsError, _SdkError4);
  function IpfsError(cause) {
    return _SdkError4.call(this, "Cannot add or get data from ipfs", cause) || this;
  }
  return IpfsError;
}(SdkError);
var InvalidAddressOrEnsError = /*#__PURE__*/function (_SdkError5) {
  _inheritsLoose(InvalidAddressOrEnsError, _SdkError5);
  function InvalidAddressOrEnsError(cause) {
    return _SdkError5.call(this, "Invalid address or ENS", cause) || this;
  }
  return InvalidAddressOrEnsError;
}(SdkError);
var InvalidAddressError = /*#__PURE__*/function (_SdkError6) {
  _inheritsLoose(InvalidAddressError, _SdkError6);
  function InvalidAddressError(cause) {
    return _SdkError6.call(this, "Invalid address", cause) || this;
  }
  return InvalidAddressError;
}(SdkError);
var InvalidCidError = /*#__PURE__*/function (_SdkError7) {
  _inheritsLoose(InvalidCidError, _SdkError7);
  function InvalidCidError(cause) {
    return _SdkError7.call(this, "The value does not contain a valid CiD", cause) || this;
  }
  return InvalidCidError;
}(SdkError);
var InvalidProposalIdError = /*#__PURE__*/function (_SdkError8) {
  _inheritsLoose(InvalidProposalIdError, _SdkError8);
  function InvalidProposalIdError(cause) {
    return _SdkError8.call(this, "Invalid proposal ID", cause) || this;
  }
  return InvalidProposalIdError;
}(SdkError);
var NoProviderError = /*#__PURE__*/function (_SdkError9) {
  _inheritsLoose(NoProviderError, _SdkError9);
  function NoProviderError(cause) {
    return _SdkError9.call(this, "A web3 provider is needed", cause) || this;
  }
  return NoProviderError;
}(SdkError);
var NoSignerError = /*#__PURE__*/function (_SdkError10) {
  _inheritsLoose(NoSignerError, _SdkError10);
  function NoSignerError(cause) {
    return _SdkError10.call(this, "A signer is needed", cause) || this;
  }
  return NoSignerError;
}(SdkError);
var UnexpectedActionError = /*#__PURE__*/function (_SdkError11) {
  _inheritsLoose(UnexpectedActionError, _SdkError11);
  function UnexpectedActionError(cause) {
    return _SdkError11.call(this, "The received action is different from the expected one", cause) || this;
  }
  return UnexpectedActionError;
}(SdkError);
var NoTokenAddress = /*#__PURE__*/function (_SdkError12) {
  _inheritsLoose(NoTokenAddress, _SdkError12);
  function NoTokenAddress(cause) {
    return _SdkError12.call(this, "A token address is needed", cause) || this;
  }
  return NoTokenAddress;
}(SdkError);
var NoDaoFactory = /*#__PURE__*/function (_SdkError13) {
  _inheritsLoose(NoDaoFactory, _SdkError13);
  function NoDaoFactory(cause) {
    return _SdkError13.call(this, "A dao factory address is needed", cause) || this;
  }
  return NoDaoFactory;
}(SdkError);
var NoPluginRepoRegistry = /*#__PURE__*/function (_SdkError14) {
  _inheritsLoose(NoPluginRepoRegistry, _SdkError14);
  function NoPluginRepoRegistry(cause) {
    return _SdkError14.call(this, "A plugin repo registry address is needed", cause) || this;
  }
  return NoPluginRepoRegistry;
}(SdkError);
var NoDaoRegistry = /*#__PURE__*/function (_SdkError15) {
  _inheritsLoose(NoDaoRegistry, _SdkError15);
  function NoDaoRegistry(cause) {
    return _SdkError15.call(this, "A dao registry address is needed", cause) || this;
  }
  return NoDaoRegistry;
}(SdkError);
var IpfsPinError = /*#__PURE__*/function (_SdkError16) {
  _inheritsLoose(IpfsPinError, _SdkError16);
  function IpfsPinError(cause) {
    return _SdkError16.call(this, "Failed to pin data on IPFS", cause) || this;
  }
  return IpfsPinError;
}(SdkError);
var ProposalCreationError = /*#__PURE__*/function (_SdkError17) {
  _inheritsLoose(ProposalCreationError, _SdkError17);
  function ProposalCreationError(cause) {
    return _SdkError17.call(this, "Failed to create proposal", cause) || this;
  }
  return ProposalCreationError;
}(SdkError);
var DaoCreationError = /*#__PURE__*/function (_SdkError18) {
  _inheritsLoose(DaoCreationError, _SdkError18);
  function DaoCreationError(cause) {
    return _SdkError18.call(this, "Failed to create DAO", cause) || this;
  }
  return DaoCreationError;
}(SdkError);
var MissingExecPermissionError = /*#__PURE__*/function (_SdkError19) {
  _inheritsLoose(MissingExecPermissionError, _SdkError19);
  function MissingExecPermissionError(cause) {
    return _SdkError19.call(this, "No plugin requests EXECUTE_PERMISSION", cause) || this;
  }
  return MissingExecPermissionError;
}(SdkError);
var IpfsFetchError = /*#__PURE__*/function (_SdkError20) {
  _inheritsLoose(IpfsFetchError, _SdkError20);
  function IpfsFetchError(cause) {
    return _SdkError20.call(this, "Failed to fetch data from IPFS", cause) || this;
  }
  return IpfsFetchError;
}(SdkError);
var InvalidVotingModeError = /*#__PURE__*/function (_SdkError21) {
  _inheritsLoose(InvalidVotingModeError, _SdkError21);
  function InvalidVotingModeError(cause) {
    return _SdkError21.call(this, "Invalid voting mode", cause) || this;
  }
  return InvalidVotingModeError;
}(SdkError);
var UpdateAllowanceError = /*#__PURE__*/function (_SdkError22) {
  _inheritsLoose(UpdateAllowanceError, _SdkError22);
  function UpdateAllowanceError(cause) {
    return _SdkError22.call(this, "Could not define a minimum allowance", cause) || this;
  }
  return UpdateAllowanceError;
}(SdkError);
var InvalidPrecisionError = /*#__PURE__*/function (_SdkError23) {
  _inheritsLoose(InvalidPrecisionError, _SdkError23);
  function InvalidPrecisionError(cause) {
    return _SdkError23.call(this, "Invalid precision, number must be an integer greater than 0", cause) || this;
  }
  return InvalidPrecisionError;
}(SdkError);
var FailedDepositError = /*#__PURE__*/function (_SdkError24) {
  _inheritsLoose(FailedDepositError, _SdkError24);
  function FailedDepositError(cause) {
    return _SdkError24.call(this, "Failed to deposit", cause) || this;
  }
  return FailedDepositError;
}(SdkError);
var AmountMismatchError = /*#__PURE__*/function (_SdkError25) {
  _inheritsLoose(AmountMismatchError, _SdkError25);
  function AmountMismatchError(expected, received, cause) {
    return _SdkError25.call(this, "Deposited amount mismatch. Expected: " + expected + ", received: " + received, cause) || this;
  }
  return AmountMismatchError;
}(SdkError);
var UnsupportedNetworkError = /*#__PURE__*/function (_SdkError26) {
  _inheritsLoose(UnsupportedNetworkError, _SdkError26);
  function UnsupportedNetworkError(network, cause) {
    return _SdkError26.call(this, "Unsupported network: " + network, cause) || this;
  }
  return UnsupportedNetworkError;
}(SdkError);
var ClientNotInitializedError = /*#__PURE__*/function (_SdkError27) {
  _inheritsLoose(ClientNotInitializedError, _SdkError27);
  function ClientNotInitializedError(client, cause) {
    return _SdkError27.call(this, client + " client is not initialized", cause) || this;
  }
  return ClientNotInitializedError;
}(SdkError);
var NoNodesAvailableError = /*#__PURE__*/function (_SdkError28) {
  _inheritsLoose(NoNodesAvailableError, _SdkError28);
  function NoNodesAvailableError(name, cause) {
    return _SdkError28.call(this, "No " + name + " nodes available", cause) || this;
  }
  return NoNodesAvailableError;
}(SdkError);
var PluginInstallationPreparationError = /*#__PURE__*/function (_SdkError29) {
  _inheritsLoose(PluginInstallationPreparationError, _SdkError29);
  function PluginInstallationPreparationError(cause) {
    return _SdkError29.call(this, "Failed to install plugin", cause) || this;
  }
  return PluginInstallationPreparationError;
}(SdkError);
var DataDecodingError = /*#__PURE__*/function (_SdkError30) {
  _inheritsLoose(DataDecodingError, _SdkError30);
  function DataDecodingError(message, cause) {
    return _SdkError30.call(this, "Cannot decode data: " + message, cause) || this;
  }
  return DataDecodingError;
}(SdkError);
var InvalidContractAddressError = /*#__PURE__*/function (_SdkError31) {
  _inheritsLoose(InvalidContractAddressError, _SdkError31);
  function InvalidContractAddressError(cause) {
    return _SdkError31.call(this, "Invalid contract address", cause) || this;
  }
  return InvalidContractAddressError;
}(SdkError);
var InvalidContractAbiError = /*#__PURE__*/function (_SdkError32) {
  _inheritsLoose(InvalidContractAbiError, _SdkError32);
  function InvalidContractAbiError(cause) {
    return _SdkError32.call(this, "Invalid contract ABI", cause) || this;
  }
  return InvalidContractAbiError;
}(SdkError);
var CannotEstimateGasError = /*#__PURE__*/function (_SdkError33) {
  _inheritsLoose(CannotEstimateGasError, _SdkError33);
  function CannotEstimateGasError(cause) {
    return _SdkError33.call(this, "Cannot estimate gas error", cause) || this;
  }
  return CannotEstimateGasError;
}(SdkError);
var InstallationNotFoundError = /*#__PURE__*/function (_SdkError34) {
  _inheritsLoose(InstallationNotFoundError, _SdkError34);
  function InstallationNotFoundError(cause) {
    return _SdkError34.call(this, "Installation not found", cause) || this;
  }
  return InstallationNotFoundError;
}(SdkError);
var PluginUninstallationPreparationError = /*#__PURE__*/function (_SdkError35) {
  _inheritsLoose(PluginUninstallationPreparationError, _SdkError35);
  function PluginUninstallationPreparationError(cause) {
    return _SdkError35.call(this, "plugin uninstallation error", cause) || this;
  }
  return PluginUninstallationPreparationError;
}(SdkError);
var MissingMetadataError = /*#__PURE__*/function (_SdkError36) {
  _inheritsLoose(MissingMetadataError, _SdkError36);
  function MissingMetadataError(cause) {
    return _SdkError36.call(this, "Missing metadata", cause) || this;
  }
  return MissingMetadataError;
}(SdkError);
var InvalidPrepareUninstallationAbiError = /*#__PURE__*/function (_SdkError37) {
  _inheritsLoose(InvalidPrepareUninstallationAbiError, _SdkError37);
  function InvalidPrepareUninstallationAbiError(cause) {
    return _SdkError37.call(this, "Invalid prepare uninstallation ABI", cause) || this;
  }
  return InvalidPrepareUninstallationAbiError;
}(SdkError);
var InvalidEnsError = /*#__PURE__*/function (_SdkError38) {
  _inheritsLoose(InvalidEnsError, _SdkError38);
  function InvalidEnsError(cause) {
    return _SdkError38.call(this, "Invalid subdomain format: use a-z, 0-9 and -", cause) || this;
  }
  return InvalidEnsError;
}(SdkError);
var DepositNativeTokenError = /*#__PURE__*/function (_SdkError39) {
  _inheritsLoose(DepositNativeTokenError, _SdkError39);
  function DepositNativeTokenError(cause) {
    return _SdkError39.call(this, "Please, use the token's transfer function directly", cause) || this;
  }
  return DepositNativeTokenError;
}(SdkError);
var AlwaysFailingProposalError = /*#__PURE__*/function (_SdkError40) {
  _inheritsLoose(AlwaysFailingProposalError, _SdkError40);
  function AlwaysFailingProposalError(cause) {
    return _SdkError40.call(this, "invalid actions, the types or order of the actions may cause the execution to fail", cause) || this;
  }
  return AlwaysFailingProposalError;
}(SdkError);
var SizeMismatchError = /*#__PURE__*/function (_SdkError41) {
  _inheritsLoose(SizeMismatchError, _SdkError41);
  function SizeMismatchError(field1, field2, cause) {
    return _SdkError41.call(this, "Size mismatch: " + field1 + " and " + field2 + " should match", cause) || this;
  }
  return SizeMismatchError;
}(SdkError);
var InvalidProposalStatusError = /*#__PURE__*/function (_SdkError42) {
  _inheritsLoose(InvalidProposalStatusError, _SdkError42);
  function InvalidProposalStatusError(cause) {
    return _SdkError42.call(this, "Invalid proposal status", cause) || this;
  }
  return InvalidProposalStatusError;
}(SdkError);
var NotImplementedError = /*#__PURE__*/function (_SdkError43) {
  _inheritsLoose(NotImplementedError, _SdkError43);
  function NotImplementedError(message, cause) {
    return _SdkError43.call(this, "Not implemented: " + message, cause) || this;
  }
  return NotImplementedError;
}(SdkError);
var InvalidActionError = /*#__PURE__*/function (_SdkError44) {
  _inheritsLoose(InvalidActionError, _SdkError44);
  function InvalidActionError(cause) {
    return _SdkError44.call(this, "The received action is not recognized", cause) || this;
  }
  return InvalidActionError;
}(SdkError);
var InvalidSubdomainError = /*#__PURE__*/function (_SdkError45) {
  _inheritsLoose(InvalidSubdomainError, _SdkError45);
  function InvalidSubdomainError(cause) {
    return _SdkError45.call(this, "Invalid subdomain format: use a-z, 0-9 and -", cause) || this;
  }
  return InvalidSubdomainError;
}(SdkError);
var InvalidGasEstimationFactorError = /*#__PURE__*/function (_SdkError46) {
  _inheritsLoose(InvalidGasEstimationFactorError, _SdkError46);
  function InvalidGasEstimationFactorError(cause) {
    return _SdkError46.call(this, "Gas estimation factor value should be a number between 0 and 1", cause) || this;
  }
  return InvalidGasEstimationFactorError;
}(SdkError);
var InvalidParameter = /*#__PURE__*/function (_SdkError47) {
  _inheritsLoose(InvalidParameter, _SdkError47);
  function InvalidParameter(message, cause) {
    return _SdkError47.call(this, "Invalid parameter:" + message, cause) || this;
  }
  return InvalidParameter;
}(SdkError);
var NotAContractError = /*#__PURE__*/function (_SdkError48) {
  _inheritsLoose(NotAContractError, _SdkError48);
  function NotAContractError(cause) {
    return _SdkError48.call(this, "The provided address does not point to a contract", cause) || this;
  }
  return NotAContractError;
}(SdkError);
var InvalidVersionError = /*#__PURE__*/function (_SdkError49) {
  _inheritsLoose(InvalidVersionError, _SdkError49);
  function InvalidVersionError(cause) {
    return _SdkError49.call(this, "The new version and the current version should have the same release number and the new build number should be greater than the current build number", cause) || this;
  }
  return InvalidVersionError;
}(SdkError);
var PluginUpdatePreparationError = /*#__PURE__*/function (_SdkError50) {
  _inheritsLoose(PluginUpdatePreparationError, _SdkError50);
  function PluginUpdatePreparationError(cause) {
    return _SdkError50.call(this, "Failed to prepare plugin update", cause) || this;
  }
  return PluginUpdatePreparationError;
}(SdkError);
var ProposalNotFoundError = /*#__PURE__*/function (_SdkError51) {
  _inheritsLoose(ProposalNotFoundError, _SdkError51);
  function ProposalNotFoundError(cause) {
    return _SdkError51.call(this, "Proposal not found", cause) || this;
  }
  return ProposalNotFoundError;
}(SdkError);
var InvalidArraySizeError = /*#__PURE__*/function (_SdkError52) {
  _inheritsLoose(InvalidArraySizeError, _SdkError52);
  function InvalidArraySizeError(size, cause) {
    return _SdkError52.call(this, "Invalid array size: " + size, cause) || this;
  }
  return InvalidArraySizeError;
}(SdkError);
var InvalidRatioValueError = /*#__PURE__*/function (_SdkError53) {
  _inheritsLoose(InvalidRatioValueError, _SdkError53);
  function InvalidRatioValueError(ratio, cause) {
    return _SdkError53.call(this, "The ratio value should range between 0 and 1, received value: " + ratio, cause) || this;
  }
  return InvalidRatioValueError;
}(SdkError);
var InvalidDigitsValueError = /*#__PURE__*/function (_SdkError54) {
  _inheritsLoose(InvalidDigitsValueError, _SdkError54);
  function InvalidDigitsValueError(digits, cause) {
    return _SdkError54.call(this, "The number of digits should range between 1 and 15, received value: " + digits, cause) || this;
  }
  return InvalidDigitsValueError;
}(SdkError);
var ValueOutOfRangeError = /*#__PURE__*/function (_SdkError55) {
  _inheritsLoose(ValueOutOfRangeError, _SdkError55);
  function ValueOutOfRangeError(cause) {
    return _SdkError55.call(this, "The value is out of range", cause) || this;
  }
  return ValueOutOfRangeError;
}(SdkError);
var InvalidBitMapValueError = /*#__PURE__*/function (_SdkError56) {
  _inheritsLoose(InvalidBitMapValueError, _SdkError56);
  function InvalidBitMapValueError(cause) {
    return _SdkError56.call(this, "The bitmap value is too big", cause) || this;
  }
  return InvalidBitMapValueError;
}(SdkError);
var EmptyMultiUriError = /*#__PURE__*/function (_SdkError57) {
  _inheritsLoose(EmptyMultiUriError, _SdkError57);
  function EmptyMultiUriError(cause) {
    return _SdkError57.call(this, "The multi URI is empty", cause) || this;
  }
  return EmptyMultiUriError;
}(SdkError);
var InvalidPromiseError = /*#__PURE__*/function (_SdkError58) {
  _inheritsLoose(InvalidPromiseError, _SdkError58);
  function InvalidPromiseError(cause) {
    return _SdkError58.call(this, "Invalid promise", cause) || this;
  }
  return InvalidPromiseError;
}(SdkError);
var InvalidTimeoutError = /*#__PURE__*/function (_SdkError59) {
  _inheritsLoose(InvalidTimeoutError, _SdkError59);
  function InvalidTimeoutError(cause) {
    return _SdkError59.call(this, "Invalid timeout", cause) || this;
  }
  return InvalidTimeoutError;
}(SdkError);
var InvalidPermissionOperationType = /*#__PURE__*/function (_SdkError60) {
  _inheritsLoose(InvalidPermissionOperationType, _SdkError60);
  function InvalidPermissionOperationType(cause) {
    return _SdkError60.call(this, "Invalid permission operation", cause) || this;
  }
  return InvalidPermissionOperationType;
}(SdkError);
var ContractNotDeployedError = /*#__PURE__*/function (_SdkError61) {
  _inheritsLoose(ContractNotDeployedError, _SdkError61);
  function ContractNotDeployedError(contractName, version, network, cause) {
    return _SdkError61.call(this, "Contract \"" + contractName + "\" version \"" + version + "\" is not deployed on network \"" + network + "\"", cause) || this;
  }
  return ContractNotDeployedError;
}(SdkError);

/**
 * Parses a multi URI and returns the IPFS or HTTP URI.
 *
 * @export
 * @class MultiUri
 */
var MultiUri = /*#__PURE__*/function () {
  function MultiUri(multiUri) {
    this.items = [];
    if (!multiUri) throw new EmptyMultiUriError();
    this.items = multiUri.split(",");
  }
  _createClass(MultiUri, [{
    key: "ipfsCid",
    get: function get() {
      for (var _iterator = _createForOfIteratorHelperLoose(this.items), _step; !(_step = _iterator()).done;) {
        var item = _step.value;
        if (IPFS_CID_REGEX.test(item)) return item;else if (item.startsWith("ipfs://")) {
          item = item.substring(7);
        }
        var idx = item.indexOf("/");
        var cid = idx < 0 ? item : item.substring(0, idx);
        if (!IPFS_CID_REGEX.test(cid)) continue;
        return cid;
      }
      return null;
    }
  }, {
    key: "ipfs",
    get: function get() {
      for (var _iterator2 = _createForOfIteratorHelperLoose(this.items), _step2; !(_step2 = _iterator2()).done;) {
        var item = _step2.value;
        if (IPFS_CID_REGEX.test(item)) return {
          cid: item,
          path: ""
        };else if (item.startsWith("ipfs://")) {
          item = item.substring(7);
        }
        var pathIdx = item.indexOf("/");
        var cid = item;
        if (pathIdx < 0) {
          if (!IPFS_CID_REGEX.test(cid)) continue;
          return {
            cid: cid,
            path: ""
          };
        }
        cid = item.substring(0, pathIdx);
        if (!IPFS_CID_REGEX.test(cid)) continue;
        var searchIdx = item.indexOf("?");
        if (searchIdx < 0) searchIdx = item.indexOf("#");
        if (searchIdx < 0) {
          return {
            cid: cid,
            path: item.substring(pathIdx)
          };
        }
        return {
          cid: cid,
          path: item.substring(pathIdx, searchIdx)
        };
      }
      return null;
    }
  }, {
    key: "http",
    get: function get() {
      return this.items.filter(function (item) {
        return item.startsWith("http://") || item.startsWith("https://");
      });
    }
  }]);
  return MultiUri;
}();

/**
 * Attempts to parse the given string as a URL and returns the IPFS CiD contained in it.
 * Alternatively it tries to use the raw value after validating it.
 *
 * @export
 * @param {string} data
 * @return {string}
 */
function resolveIpfsCid(data) {
  var uri = new MultiUri(data);
  var cid = uri.ipfsCid;
  if (!cid) {
    throw new InvalidCidError();
  }
  return cid;
}
/**
 * Checks if the given string is a valid proposal ID
 *
 * @export
 * @param {string} proposalId
 * @return {boolean}
 */
function isProposalId(proposalId) {
  var regex = new RegExp(OSX_PROPOSAL_ID_REGEX);
  return regex.test(proposalId);
}
/**
 * Checks if the given string is a valid ENS name
 *
 * @export
 * @param {string} name
 * @return {boolean}
 */
function isEnsName(name) {
  var regex = new RegExp(ENS_REGEX);
  return regex.test(name);
}
/**
 * Checks if the given string is a valid IPFS URI
 *
 * @export
 * @param {string} cid
 * @return {boolean}
 */
function isIpfsUri(cid) {
  var regex = new RegExp(IPFS_URI_REGEX);
  return regex.test(cid);
}
/**
 * Checks if the given string is a valid subdomain
 *
 * @export
 * @param {string} name
 * @return {boolean}
 */
function isSubdomain(name) {
  var regex = new RegExp(SUBDOMAIN_REGEX);
  return regex.test(name);
}

/**
 * Ensures that a hex string has the "0x" prefix
 *
 * @export
 * @param {string} value
 * @return {string}
 */
function ensure0x(value) {
  return value.startsWith("0x") ? value : "0x" + value;
}
/**
 * Strips the "0x" prefix from a hex string
 *
 * @export
 * @param {string} value
 * @return {string}
 */
function strip0x(value) {
  return value.startsWith("0x") ? value.substring(2) : value;
}
/**
 * Encodes a buffer into a hex string with the "0x" prefix
 *
 * @export
 * @param {string} hexString
 * @return {Uint8Array}
 */
function hexToBytes(hexString) {
  if (!hexString) return new Uint8Array();else if (!HEX_STRING_REGEX.test(hexString)) {
    throw new Error("Invalid hex string");
  } else if (hexString.length % 2 !== 0) {
    throw new Error("The hex string has an odd length");
  }
  hexString = strip0x(hexString);
  var bytes = [];
  for (var i = 0; i < hexString.length; i += 2) {
    bytes.push(parseInt(hexString.substring(i, i + 2), 16));
  }
  return Uint8Array.from(bytes);
}
/**
 * Encodes a buffer into a hex string with the "0x" prefix
 *
 * @export
 * @param {Uint8Array} buff
 * @param {boolean} [skip0x]
 * @return {string}
 */
function bytesToHex(buff, skip0x) {
  var bytes = [];
  for (var i = 0; i < buff.length; i++) {
    if (buff[i] >= 16) bytes.push(buff[i].toString(16));else bytes.push("0" + buff[i].toString(16));
  }
  if (skip0x) return bytes.join("");
  return ensure0x(bytes.join(""));
}
/**
 * Encodes a 0-1 ratio within the given digit precision for storage on a smart contract
 *
 * @export
 * @param {number} ratio
 * @param {number} digits
 * @return {bigint}
 */
function encodeRatio(ratio, digits) {
  if (ratio < 0 || ratio > 1) {
    throw new InvalidRatioValueError(ratio);
  } else if (!Number.isInteger(digits) || digits < 1 || digits > 15) {
    throw new InvalidDigitsValueError(digits);
  }
  return Math.round(ratio * Math.pow(10, digits));
}
/**
 * Decodes a value received from a smart contract to a number with
 *
 * @export
 * @param {bigint} onChainValue
 * @param {number} digits
 * @return {number}
 */
function decodeRatio(onChainValue, digits) {
  if (!Number.isInteger(digits) || digits < 1 || digits > 15) {
    throw new InvalidDigitsValueError(digits);
  } else if (onChainValue > Math.pow(10, digits)) {
    throw new ValueOutOfRangeError();
  }
  return Number(onChainValue) / Math.pow(10, digits);
}
/**
 * Encodes the particles of a proposalId into a globally unique value for subgraph
 *
 * @export
 * @param {string} pluginAddress
 * @param {number} id
 * @return {string} proposalId
 */
function encodeProposalId(pluginAddress, id) {
  if (!/^0x[A-Fa-f0-9]{40}$/.test(pluginAddress)) {
    throw new Error("Invalid address");
  }
  return pluginAddress + "_0x" + id.toString(16);
}
/**
 * Decodes a proposalId from subgraph and returns the original pluginAddress and the nonce
 *
 * @export
 * @param {string} proposalId
 * @return {object} pluginAddress: string; id: number
 */
function decodeProposalId(proposalId) {
  if (!isProposalId(proposalId)) {
    throw new InvalidProposalIdError();
  }
  var matchedRegexResult = proposalId.match(OSX_PROPOSAL_ID_REGEX) || [];
  if (matchedRegexResult.length !== 3) {
    throw new InvalidProposalIdError();
  }
  return {
    pluginAddress: matchedRegexResult[1],
    id: parseInt(strip0x(matchedRegexResult[2]), 16)
  };
}
/**
 * Transforms an array of booleans into a bitmap big integer
 *
 * @export
 * @param {Array<boolean>} [bools]
 * @return {BigInt} bitmap
 */
function boolArrayToBitmap(bools) {
  if (!bools || !bools.length) return BigInt(0);else if (bools.length > 256) throw new InvalidArraySizeError(bools.length);
  var result = BigInt(0);
  for (var i = 0; i < 256; i++) {
    if (!bools[i]) continue;
    result |= BigInt(1) << BigInt(i);
  }
  return result;
}
/**
 * Transforms a bigint into an array of booleans
 *
 * @param {bigint} bitmap
 * @return {Array<boolean>}
 */
function bitmapToBoolArray(bitmap) {
  if (bitmap >= BigInt(1) << BigInt(256)) {
    throw new InvalidBitMapValueError();
  }
  var result = [];
  for (var i = 0; i < 256; i++) {
    var mask = BigInt(1) << BigInt(i);
    result.push((bitmap & mask) != BigInt(0));
  }
  return result;
}
/**
 * Gets the extended version of a proposal id from the compact one
 *
 * @export
 * @param {string} proposalId
 * @returns {string}
 */
var getExtendedProposalId = function getExtendedProposalId(proposalId) {
  if (!isProposalId(proposalId)) {
    throw new InvalidProposalIdError();
  }
  var splits = proposalId.split("_");
  return splits[0].toLowerCase() + "_" + bytes.hexZeroPad(splits[1], 32);
};
/**
 * Gets the compact version of a proposal id from the extended one
 *
 * @export
 * @param {string} proposalId
 * @returns {string}
 */
var getCompactProposalId = function getCompactProposalId(proposalId) {
  if (!proposalId.match(/^(0x[A-Fa-f0-9]{40})_(0x[A-Fa-f0-9]{1,64})$/)) {
    throw new Error("Invalid proposalId");
  }
  var splits = proposalId.split("_");
  return splits[0].toLowerCase() + "_0x" + parseInt(splits[1]).toString(16);
};

/**
 * Finds a log in a receipt given the event name
 *
 * @export
 * @param {ContractReceipt} receipt
 * @param {Interface} iface
 * @param {string} eventName
 * @return {(Log | undefined)}
 */
function findLog(receipt, iface, eventName) {
  return receipt.logs.find(function (log) {
    return log.topics[0] === hash.id(iface.getEvent(eventName).format("sighash"));
  });
}
/**
 * Gets a function fragment from encoded data
 *
 * @export
 * @param {Uint8Array} data
 * @param {string[]} availableFunctions
 * @return {FunctionFragment}
 */
function getFunctionFragment(data, availableFunctions) {
  var hexBytes = bytesToHex(data);
  var iface = new abi.Interface(availableFunctions);
  return iface.getFunction(hexBytes.substring(0, 10));
}
/**
 * Gets the named types from a metadata abi input
 *
 * @export
 * @param {MetadataAbiInput[]} [inputs=[]]
 * @return {string[]}
 */
function getNamedTypesFromMetadata(inputs) {
  if (inputs === void 0) {
    inputs = [];
  }
  return inputs.map(function (input) {
    if (input.type.startsWith("tuple")) {
      var tupleResult = getNamedTypesFromMetadata(input.components).join(", ");
      var tupleString = "tuple(" + tupleResult + ")";
      if (input.type.endsWith("[]")) {
        tupleString = tupleString.concat("[]");
      }
      return tupleString;
    } else if (input.type.endsWith("[]")) {
      var baseType = input.type.slice(0, -2);
      return baseType + "[] " + input.name;
    } else {
      return input.type + " " + input.name;
    }
  });
}
/**
 * Gets the named types from a metadata abi input
 *
 * @export
 * @param {IClientWeb3Core} web3
 * @param {PrepareInstallationParams} params
 * @return {Promise<GasFeeEstimation>}
 */
function prepareGenericInstallationEstimation(_x6, _x7) {
  return _prepareGenericInstallationEstimation.apply(this, arguments);
}
/**
 * Prepares an installation of a plugin
 *
 * @export
 * @param {IClientWeb3Core} web3
 * @param {(PrepareInstallationParams & { pluginSetupProcessorAddress: string })} params
 * @return {AsyncGenerator<PrepareInstallationStepValue>}
 */
function _prepareGenericInstallationEstimation() {
  _prepareGenericInstallationEstimation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(web3, params) {
    var _getNetworkByNameOrAl;
    var provider, ethers5NetworkName, networkName, version, pluginRepo, currentRelease, latestVersion, _params$installationP2, installationParams, _params$installationA2, installationAbi, data, deployment, pspContract, gasEstimation;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          provider = web3.getProvider();
          if (address.isAddress(params.pluginRepo)) {
            _context3.next = 3;
            break;
          }
          throw new InvalidAddressError();
        case 3:
          _context3.next = 5;
          return provider.getNetwork();
        case 5:
          ethers5NetworkName = _context3.sent.name;
          networkName = (_getNetworkByNameOrAl = osxCommonsConfigs.getNetworkByNameOrAlias(ethers5NetworkName)) == null ? void 0 : _getNetworkByNameOrAl.name;
          if (networkName) {
            _context3.next = 9;
            break;
          }
          throw new UnsupportedNetworkError(ethers5NetworkName);
        case 9:
          version = params.version; // if version is not specified install latest version
          if (version) {
            _context3.next = 19;
            break;
          }
          pluginRepo = osxEthers.PluginRepo__factory.connect(params.pluginRepo, provider);
          _context3.next = 14;
          return pluginRepo.latestRelease();
        case 14:
          currentRelease = _context3.sent;
          _context3.next = 17;
          return pluginRepo["getLatestVersion(uint8)"](currentRelease);
        case 17:
          latestVersion = _context3.sent;
          version = latestVersion.tag;
        case 19:
          // encode installation params
          _params$installationP2 = params.installationParams, installationParams = _params$installationP2 === void 0 ? [] : _params$installationP2, _params$installationA2 = params.installationAbi, installationAbi = _params$installationA2 === void 0 ? [] : _params$installationA2;
          data = abi.defaultAbiCoder.encode(getNamedTypesFromMetadata(installationAbi), installationParams); // connect to psp contract
          deployment = osxCommonsConfigs.getNetworkDeploymentForVersion(networkName, osxCommonsConfigs.SupportedVersions.V1_3_0);
          if (deployment) {
            _context3.next = 24;
            break;
          }
          throw new UnsupportedNetworkError(networkName);
        case 24:
          pspContract = osxEthers.PluginSetupProcessor__factory.connect(deployment[osxCommonsConfigs.FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR].address, provider);
          _context3.next = 27;
          return pspContract.estimateGas.prepareInstallation(params.daoAddressOrEns, {
            pluginSetupRef: {
              pluginSetupRepo: params.pluginRepo,
              versionTag: version
            },
            data: data
          });
        case 27:
          gasEstimation = _context3.sent;
          return _context3.abrupt("return", web3.getApproximateGasFee(gasEstimation.toBigInt()));
        case 29:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _prepareGenericInstallationEstimation.apply(this, arguments);
}
function prepareGenericInstallation(_x, _x2) {
  return _prepareGenericInstallation.apply(this, arguments);
}
/**
 * Gets the parameters to be given when preparing an update
 *
 * @param {IClientGraphQLCore} graphql
 * @param {PrepareUpdateParams} params
 * @return {Promise<PluginSetupProcessor.PrepareUpdateParamsStruct>}
 */
function _prepareGenericInstallation() {
  _prepareGenericInstallation = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(web3, params) {
    var signer, version, pluginRepo, currentRelease, latestVersion, _params$installationP, installationParams, _params$installationA, installationAbi, data, pspContract, tx, receipt, pspContractInterface, log, parsedLog, pluginAddress, preparedSetupData;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          signer = web3.getConnectedSigner();
          if (address.isAddress(params.pluginRepo)) {
            _context.next = 3;
            break;
          }
          throw new InvalidAddressError();
        case 3:
          version = params.version; // if version is not specified install latest version
          if (version) {
            _context.next = 13;
            break;
          }
          pluginRepo = osxEthers.PluginRepo__factory.connect(params.pluginRepo, signer);
          _context.next = 8;
          return _awaitAsyncGenerator(pluginRepo.latestRelease());
        case 8:
          currentRelease = _context.sent;
          _context.next = 11;
          return _awaitAsyncGenerator(pluginRepo["getLatestVersion(uint8)"](currentRelease));
        case 11:
          latestVersion = _context.sent;
          version = latestVersion.tag;
        case 13:
          // encode installation params
          _params$installationP = params.installationParams, installationParams = _params$installationP === void 0 ? [] : _params$installationP, _params$installationA = params.installationAbi, installationAbi = _params$installationA === void 0 ? [] : _params$installationA;
          data = abi.defaultAbiCoder.encode(getNamedTypesFromMetadata(installationAbi), installationParams); // connect to psp contract
          pspContract = osxEthers.PluginSetupProcessor__factory.connect(params.pluginSetupProcessorAddress, signer);
          _context.next = 18;
          return _awaitAsyncGenerator(pspContract.prepareInstallation(params.daoAddressOrEns, {
            pluginSetupRef: {
              pluginSetupRepo: params.pluginRepo,
              versionTag: version
            },
            data: data
          }));
        case 18:
          tx = _context.sent;
          _context.next = 21;
          return {
            key: exports.PrepareInstallationStep.PREPARING,
            txHash: tx.hash
          };
        case 21:
          _context.next = 23;
          return _awaitAsyncGenerator(tx.wait());
        case 23:
          receipt = _context.sent;
          pspContractInterface = osxEthers.PluginSetupProcessor__factory.createInterface();
          log = findLog(receipt, pspContractInterface, "InstallationPrepared");
          if (log) {
            _context.next = 28;
            break;
          }
          throw new PluginInstallationPreparationError();
        case 28:
          parsedLog = pspContractInterface.parseLog(log);
          pluginAddress = parsedLog.args["plugin"];
          preparedSetupData = parsedLog.args["preparedSetupData"];
          if (pluginAddress || preparedSetupData) {
            _context.next = 33;
            break;
          }
          throw new PluginInstallationPreparationError();
        case 33:
          _context.next = 35;
          return {
            key: exports.PrepareInstallationStep.DONE,
            pluginAddress: pluginAddress,
            pluginRepo: params.pluginRepo,
            versionTag: version,
            permissions: preparedSetupData.permissions,
            helpers: preparedSetupData.helpers
          };
        case 35:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _prepareGenericInstallation.apply(this, arguments);
}
function getPrepareUpdateParams(_x8, _x9) {
  return _getPrepareUpdateParams.apply(this, arguments);
}
/**
 * Gets an estimation of the gas fee of preparing an update
 *
 * @export
 * @param {IClientWeb3Core} web3
 * @param {IClientGraphQLCore} graphql
 * @param {(PrepareUpdateParams & { pluginSetupProcessorAddress: string })} params
 * @return {Promise<GasFeeEstimation>}
 */
function _getPrepareUpdateParams() {
  _getPrepareUpdateParams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(graphql, params) {
    var _yield$graphql$reques, iplugin, _params$pluginInstall, pluginInstallationIndex, selectedInstallation, _params$updateParams, updateParams, _params$updateAbi, updateAbi, data;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return graphql.request({
            query: QueryIPlugin,
            params: {
              address: params.pluginAddress.toLowerCase(),
              where: {
                dao: params.daoAddressOrEns.toLowerCase()
              }
            },
            name: "plugin"
          });
        case 2:
          _yield$graphql$reques = _context4.sent;
          iplugin = _yield$graphql$reques.iplugin;
          // filter specified installation
          _params$pluginInstall = params.pluginInstallationIndex, pluginInstallationIndex = _params$pluginInstall === void 0 ? 0 : _params$pluginInstall;
          selectedInstallation = iplugin.installations[pluginInstallationIndex];
          if (selectedInstallation) {
            _context4.next = 8;
            break;
          }
          throw new InstallationNotFoundError();
        case 8:
          if (!(params.newVersion.release !== selectedInstallation.appliedVersion.release.release || params.newVersion.build <= selectedInstallation.appliedVersion.build)) {
            _context4.next = 10;
            break;
          }
          throw new InvalidVersionError();
        case 10:
          // encode update params
          _params$updateParams = params.updateParams, updateParams = _params$updateParams === void 0 ? [] : _params$updateParams, _params$updateAbi = params.updateAbi, updateAbi = _params$updateAbi === void 0 ? [] : _params$updateAbi;
          data = abi.defaultAbiCoder.encode(getNamedTypesFromMetadata(updateAbi), updateParams);
          return _context4.abrupt("return", {
            currentVersionTag: {
              build: selectedInstallation.appliedVersion.build,
              release: selectedInstallation.appliedVersion.release.release
            },
            newVersionTag: params.newVersion,
            pluginSetupRepo: params.pluginRepo,
            setupPayload: {
              plugin: params.pluginAddress,
              currentHelpers: selectedInstallation.appliedPreparation.helpers,
              data: data
            }
          });
        case 13:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _getPrepareUpdateParams.apply(this, arguments);
}
function prepareGenericUpdateEstimation(_x10, _x11, _x12) {
  return _prepareGenericUpdateEstimation.apply(this, arguments);
}
function _prepareGenericUpdateEstimation() {
  _prepareGenericUpdateEstimation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(web3, graphql, params) {
    var signer, prepareUpdateParams, pspContract, gasEstimation;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          signer = web3.getConnectedSigner();
          _context5.next = 3;
          return getPrepareUpdateParams(graphql, params);
        case 3:
          prepareUpdateParams = _context5.sent;
          // connect to psp contract
          pspContract = osxEthers.PluginSetupProcessor__factory.connect(params.pluginSetupProcessorAddress, signer);
          _context5.next = 7;
          return pspContract.estimateGas.prepareUpdate(params.daoAddressOrEns, prepareUpdateParams);
        case 7:
          gasEstimation = _context5.sent;
          return _context5.abrupt("return", web3.getApproximateGasFee(gasEstimation.toBigInt()));
        case 9:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return _prepareGenericUpdateEstimation.apply(this, arguments);
}
function prepareGenericUpdate(_x3, _x4, _x5) {
  return _prepareGenericUpdate.apply(this, arguments);
}
/**
 * Replacing function for ethers getNetwork that includes additional networks
 *
 * @export
 * @param {Networkish} networkish
 * @return {Network}
 */
function _prepareGenericUpdate() {
  _prepareGenericUpdate = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(web3, graphql, params) {
    var signer, prepareUpdateParams, pspContract, tx, receipt, pspContractInterface, log, parsedLog, versionTag, preparedSetupData, initData;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          signer = web3.getConnectedSigner();
          _context2.next = 3;
          return _awaitAsyncGenerator(getPrepareUpdateParams(graphql, params));
        case 3:
          prepareUpdateParams = _context2.sent;
          // connect to psp contract
          pspContract = osxEthers.PluginSetupProcessor__factory.connect(params.pluginSetupProcessorAddress, signer);
          _context2.next = 7;
          return _awaitAsyncGenerator(pspContract.prepareUpdate(params.daoAddressOrEns, prepareUpdateParams));
        case 7:
          tx = _context2.sent;
          _context2.next = 10;
          return {
            key: exports.PrepareUpdateStep.PREPARING,
            txHash: tx.hash
          };
        case 10:
          _context2.next = 12;
          return _awaitAsyncGenerator(tx.wait());
        case 12:
          receipt = _context2.sent;
          pspContractInterface = osxEthers.PluginSetupProcessor__factory.createInterface();
          log = findLog(receipt, pspContractInterface, "UpdatePrepared");
          if (log) {
            _context2.next = 17;
            break;
          }
          throw new PluginUpdatePreparationError();
        case 17:
          parsedLog = pspContractInterface.parseLog(log);
          versionTag = parsedLog.args["versionTag"];
          preparedSetupData = parsedLog.args["preparedSetupData"];
          initData = parsedLog.args["initData"];
          if (!(!versionTag || versionTag.build !== params.newVersion.build || versionTag.release !== params.newVersion.release || !preparedSetupData || !initData)) {
            _context2.next = 23;
            break;
          }
          throw new PluginUpdatePreparationError();
        case 23:
          _context2.next = 25;
          return {
            key: exports.PrepareUpdateStep.DONE,
            versionTag: versionTag,
            pluginRepo: params.pluginRepo,
            pluginAddress: params.pluginAddress,
            initData: hexToBytes(initData),
            permissions: preparedSetupData.permissions,
            helpers: preparedSetupData.helpers
          };
        case 25:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _prepareGenericUpdate.apply(this, arguments);
}
function getNetwork(networkish) {
  var network = null;
  try {
    network = providers.getNetwork(networkish);
  } catch (_unused) {}
  try {
    network = aragonGetNetwork(networkish);
  } catch (_unused2) {}
  if (!network) {
    throw new UnsupportedNetworkError(networkish.toString());
  }
  return network;
}
/**
 * When ethers 5 does not support the network return a Network object
 * using our osx-commons-configs as a source of truth
 *
 * @private
 * @param {Networkish} networkish
 * @return {*}  {Network}
 */
function aragonGetNetwork(networkish) {
  var aragonNetwork = null;
  var network = null;
  switch (typeof networkish) {
    case "string":
    case "number":
      {
        var _networkDeployment$EN;
        if (typeof networkish === "number") {
          aragonNetwork = osxCommonsConfigs.getNetworkByChainId(networkish);
        } else {
          aragonNetwork = osxCommonsConfigs.getNetworkByNameOrAlias(networkish);
        }
        if (!aragonNetwork) {
          throw new UnsupportedNetworkError(networkish.toString());
        }
        var ethers5Alias = osxCommonsConfigs.getNetworkAlias(osxCommonsConfigs.SupportedAliases.ETHERS_5, aragonNetwork.name);
        var networkDeployment = osxCommonsConfigs.getNetworkDeploymentForVersion(aragonNetwork.name, osxCommonsConfigs.SupportedVersions.V1_3_0);
        if (!networkDeployment) {
          throw new UnsupportedNetworkError(aragonNetwork.name);
        }
        var ensRegistryAddress = (_networkDeployment$EN = networkDeployment.ENSRegistry) == null ? void 0 : _networkDeployment$EN.address;
        network = {
          name: ethers5Alias || aragonNetwork.name,
          chainId: aragonNetwork.chainId,
          ensAddress: ensRegistryAddress
        };
        break;
      }
    case "object":
      if (networkish.name && networkish.chainId) {
        network = networkish;
      }
      break;
    default:
      throw new UnsupportedNetworkError(networkish);
  }
  return network;
}
/**
 * Gets the interfaceId of a given interface
 *
 * @export
 * @param {Interface} iface
 * @return {string}
 */
function getInterfaceId(iface) {
  var interfaceId = constants.Zero;
  var functions = Object.keys(iface.functions);
  for (var _i = 0, _functions = functions; _i < _functions.length; _i++) {
    var func = _functions[_i];
    interfaceId = interfaceId.xor(iface.getSighash(func));
  }
  return interfaceId.toHexString();
}
function getDefaultIpfsNodes(network) {
  return osxCommonsConfigs.networks[network].isTestnet ? IPFS_ENDPOINTS.test : IPFS_ENDPOINTS.prod;
}
function getDefaultGraphqlNodes(network) {
  return [{
    url: "https://subgraph.satsuma-prod.com/qHR2wGfc5RLi6/aragon/osx-" + network + "/version/v1.4.0/api"
  }];
}

var _process;
var DEFAULT_GAS_FEE_ESTIMATION_FACTOR = 0.625;
var supportedProtocols = ["https:"];
var contractNames = /*#__PURE__*/[].concat( /*#__PURE__*/Object.values(osxCommonsConfigs.FrameworkContractsNames), /*#__PURE__*/Object.values(osxCommonsConfigs.NonFrameworkContractsNames));
if (typeof process !== "undefined" && (_process = process) != null && (_process = _process.env) != null && _process.TESTING) {
  supportedProtocols.push("http:");
}
var ContextCore = /*#__PURE__*/function () {
  // INTERNAL CONTEXT STATE
  /**
   * @param {Object} params
   *
   * @constructor
   */
  function ContextCore(params) {
    this.state = {};
    this.overriden = contractNames.reduce(function (acc, key) {
      var _extends2;
      return _extends({}, acc, (_extends2 = {}, _extends2[key] = false, _extends2));
    }, {
      ENSRegistry: false
    });
    // set network to mainnet, overrided by the value of params
    var mergedParams = Object.assign({
      network: "mainnet"
    }, params);
    this.set(mergedParams);
  }
  var _proto = ContextCore.prototype;
  _proto.set = function set(contextParams) {
    var _contextParams$graphq, _contextParams$ipfsNo;
    if (contextParams.network) {
      this.state.network = ContextCore.resolveNetwork(contextParams.network, contextParams.ENSRegistry);
      // once the network is resolved set default values
      this.setNetworkDefaults();
    }
    if (contextParams.signer) {
      this.state.signer = contextParams.signer;
    }
    if (contextParams.web3Providers || Array.isArray(contextParams.web3Providers) && contextParams.web3Providers.length) {
      this.state.web3Providers = ContextCore.resolveWeb3Providers(contextParams.web3Providers, this.state.network);
    }
    if ((_contextParams$graphq = contextParams.graphqlNodes) != null && _contextParams$graphq.length) {
      this.state.graphql = ContextCore.resolveGraphql(contextParams.graphqlNodes);
      this.overriden.graphqlNodes = true;
    }
    if ((_contextParams$ipfsNo = contextParams.ipfsNodes) != null && _contextParams$ipfsNo.length) {
      this.state.ipfs = ContextCore.resolveIpfs(contextParams.ipfsNodes);
      this.overriden.ipfsNodes = true;
    }
    // Set all the available addresses
    for (var _iterator = _createForOfIteratorHelperLoose(contractNames), _step; !(_step = _iterator()).done;) {
      var address = _step.value;
      if (contextParams[address]) {
        this.state[address] = contextParams[address];
        this.overriden[address] = true;
      }
    }
    if (contextParams.gasFeeEstimationFactor) {
      this.state.gasFeeEstimationFactor = ContextCore.resolveGasFeeEstimationFactor(contextParams.gasFeeEstimationFactor);
      this.overriden.gasFeeEstimationFactor = true;
    }
  };
  _proto.setNetworkDefaults = function setNetworkDefaults() {
    // check network
    var networkName = osxCommonsConfigs.getNetworkNameByAlias(this.network.name);
    if (!networkName) {
      throw new UnsupportedNetworkError(this.network.name);
    }
    // set graphql nodes
    if (!this.overriden.graphqlNodes) {
      this.state.graphql = ContextCore.resolveGraphql(getDefaultGraphqlNodes(networkName));
    }
    // set ipfs nodes
    if (!this.overriden.ipfsNodes) {
      this.state.ipfs = ContextCore.resolveIpfs(getDefaultIpfsNodes(networkName));
    }
    // set contract addresses
    for (var _iterator2 = _createForOfIteratorHelperLoose(contractNames), _step2; !(_step2 = _iterator2()).done;) {
      var contractName = _step2.value;
      if (!this.overriden[contractName]) {
        var contractAddress = void 0;
        // get deployment
        var deployment = osxCommonsConfigs.getNetworkDeploymentForVersion(networkName, osxCommonsConfigs.SupportedVersions.V1_3_0);
        // get address from deployment
        if (deployment) {
          var _deployment$contractN;
          contractAddress = (_deployment$contractN = deployment[contractName]) == null ? void 0 : _deployment$contractN.address;
        }
        // custom check for ensRegistryAddress
        // set the ensRegistryAddress to the network.ensAddress
        if (contractName === osxCommonsConfigs.NonFrameworkContractsNames.ENS_REGISTRY && !contractAddress) {
          contractAddress = this.network.ensAddress;
        }
        if (contractAddress) {
          this.state[contractName] = contractAddress;
        }
      }
    }
    if (!this.overriden.gasFeeEstimationFactor) {
      this.state.gasFeeEstimationFactor = DEFAULT_GAS_FEE_ESTIMATION_FACTOR;
    }
  }
  // GETTERS
  /**
   * Getter for the network
   *
   * @var network
   *
   * @returns {Networkish}
   *
   * @public
   */;
  _proto.getAddress = function getAddress(contractName) {
    return this.state[contractName];
  }
  // INTERNAL HELPERS
  ;
  ContextCore.resolveNetwork = function resolveNetwork(networkish, ensRegistryAddress) {
    var network = getNetwork(networkish);
    if (ensRegistryAddress) {
      if (!address.isAddress(ensRegistryAddress)) {
        throw new InvalidAddressError();
      } else {
        network.ensAddress = ensRegistryAddress;
      }
    }
    return network;
  };
  ContextCore.resolveWeb3Providers = function resolveWeb3Providers(endpoints, network) {
    if (Array.isArray(endpoints)) {
      return endpoints.map(function (item) {
        if (typeof item === "string") {
          var url = new URL(item);
          if (!supportedProtocols.includes(url.protocol)) {
            throw new UnsupportedProtocolError(url.protocol);
          }
          return new providers.JsonRpcProvider(url.href, network);
        }
        return item;
      });
    } else if (typeof endpoints === "string") {
      var url = new URL(endpoints);
      if (!supportedProtocols.includes(url.protocol)) {
        throw new UnsupportedProtocolError(url.protocol);
      }
      return [new providers.JsonRpcProvider(url.href, network)];
    } else {
      return [endpoints];
    }
  };
  ContextCore.resolveIpfs = function resolveIpfs(configs) {
    var clients = [];
    configs.forEach(function (config) {
      var url = new URL(config.url);
      if (!supportedProtocols.includes(url.protocol)) {
        throw new UnsupportedProtocolError(url.protocol);
      }
      clients.push(new sdkIpfs.Client(url, config.headers));
    });
    return clients;
  };
  ContextCore.resolveGraphql = function resolveGraphql(endpoints) {
    var clients = [];
    endpoints.forEach(function (endpoint) {
      var url = new URL(endpoint.url);
      if (!supportedProtocols.includes(url.protocol)) {
        throw new UnsupportedProtocolError(url.protocol);
      }
      clients.push(new graphqlRequest.GraphQLClient(url.href));
    });
    return clients;
  };
  ContextCore.resolveGasFeeEstimationFactor = function resolveGasFeeEstimationFactor(gasFeeEstimationFactor) {
    if (gasFeeEstimationFactor < 0 || gasFeeEstimationFactor > 1) {
      throw new InvalidGasEstimationFactorError();
    }
    return gasFeeEstimationFactor;
  };
  _createClass(ContextCore, [{
    key: "network",
    get: function get() {
      return this.state.network;
    }
    /**
     * Getter for the Signer
     *
     * @var signer
     *
     * @returns {Signer}
     *
     * @public
     */
  }, {
    key: "signer",
    get: function get() {
      return this.state.signer;
    }
    /**
     * Getter for the web3 providers
     *
     * @var web3Providers
     *
     * @returns {JsonRpcProvider[]}
     *
     * @public
     */
  }, {
    key: "web3Providers",
    get: function get() {
      return this.state.web3Providers || [];
    }
    /**
     * Getter for the gas fee reducer used in estimations
     *
     * @var gasFeeEstimationFactor
     *
     * @returns {number}
     *
     * @public
     */
  }, {
    key: "gasFeeEstimationFactor",
    get: function get() {
      return this.state.gasFeeEstimationFactor;
    }
    /**
     * Getter for the IPFS http client
     *
     * @var ipfs
     *
     * @returns {IpfsClient[]}
     *
     * @public
     */
  }, {
    key: "ipfs",
    get: function get() {
      return this.state.ipfs;
    }
    /**
     * Getter for the GraphQL client
     *
     * @var graphql
     *
     * @returns {GraphQLClient[]}
     *
     * @public
     */
  }, {
    key: "graphql",
    get: function get() {
      return this.state.graphql;
    }
  }]);
  return ContextCore;
}();

/**
 * Run a promise with a timeout
 *
 * @export
 * @template T
 * @param {Promise<T>} prom The promise to track
 * @param {number} timeout Timeout (in milliseconds) to wait before failing
 * @param {string} [timeoutMessage] (optional) Message to use when throwing a timeout error. By default: `"Time out"`
 * @return {Promise<T>}
 */
function promiseWithTimeout(prom, timeout, timeoutMessage) {
  if (!prom || typeof prom.then !== "function" || typeof prom["catch"] !== "function") {
    throw new InvalidPromiseError();
  } else if (isNaN(timeout) || timeout < 0) throw new InvalidTimeoutError();
  return new Promise(function (resolve, reject) {
    setTimeout(function () {
      return reject(new TimeoutError(timeoutMessage || "Time out"));
    }, timeout);
    return prom.then(function (result) {
      return resolve(result);
    })["catch"](function (err) {
      return reject(err);
    });
  });
}
/**
 * Run a promise and retry it until it succeeds or the `shouldRetry` function returns false
 *
 * @export
 * @template T
 * @param {{
 *   func: () => Promise<T>;
 *   onFail?: (e: Error) => void;
 *   shouldRetry: () => boolean;
 * }} { func, onFail, shouldRetry }
 * @return {void}
 */
function runAndRetry(_x) {
  return _runAndRetry.apply(this, arguments);
}
function _runAndRetry() {
  _runAndRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {
    var func, onFail, shouldRetry, lastErr, result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          func = _ref.func, onFail = _ref.onFail, shouldRetry = _ref.shouldRetry;
        case 1:
          _context.prev = 1;
          _context.next = 4;
          return func();
        case 4:
          result = _context.sent;
          return _context.abrupt("return", result);
        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](1);
          lastErr = _context.t0;
          if (typeof onFail === "function") {
            onFail(_context.t0);
          }
        case 12:
          if (shouldRetry()) {
            _context.next = 1;
            break;
          }
        case 13:
          throw lastErr;
        case 14:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 8]]);
  }));
  return _runAndRetry.apply(this, arguments);
}

var GraphqlModule = /*#__PURE__*/function () {
  function GraphqlModule(context) {
    var _context$graphql;
    this.clientIdx = -1;
    this.clients = [];
    if ((_context$graphql = context.graphql) != null && _context$graphql.length) {
      this.clients = context.graphql;
      this.clientIdx = Math.floor(Math.random() * context.graphql.length);
    }
  }
  /**
   * Get the current graphql client
   * @returns {GraphQLClient}
   */
  var _proto = GraphqlModule.prototype;
  _proto.getClient = function getClient() {
    if (!this.clients.length || !this.clients[this.clientIdx]) {
      throw new ClientNotInitializedError("graphql");
    }
    return this.clients[this.clientIdx];
  }
  /**
   * Starts using the next available Graphql endpoint
   * @returns {void}
   */;
  _proto.shiftClient = function shiftClient() {
    if (!this.clients.length) {
      throw new ClientNotInitializedError("graphql");
    } else if (this.clients.length < 2) {
      throw new NoNodesAvailableError("graphql");
    }
    this.clientIdx = (this.clientIdx + 1) % this.clients.length;
  }
  /**
   * Checks if the current node is online
   * @returns {Promise<boolean>}
   */;
  _proto.isUp = function isUp() {
    return this.getClient().request(QueryStatus).then(function (res) {
      var _res$_meta;
      return !!((_res$_meta = res._meta) != null && _res$_meta.deployment);
    })["catch"](function () {
      return false;
    });
  }
  /**
   * Ensures that the graphql is online.
   * If the current node is not online
   * it will shift to the next one and
   * repeat until it finds an online
   * node. In the case that there are no
   * nodes or none of them is available
   * it will throw an error
   * @returns {Promise<void>}
   */;
  _proto.ensureOnline =
  /*#__PURE__*/
  function () {
    var _ensureOnline = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var i;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (this.clients.length) {
              _context.next = 2;
              break;
            }
            throw new ClientNotInitializedError("graphql");
          case 2:
            i = 0;
          case 3:
            if (!(i < this.clients.length)) {
              _context.next = 12;
              break;
            }
            _context.next = 6;
            return this.isUp();
          case 6:
            if (!_context.sent) {
              _context.next = 8;
              break;
            }
            return _context.abrupt("return");
          case 8:
            this.shiftClient();
          case 9:
            i++;
            _context.next = 3;
            break;
          case 12:
            throw new NoNodesAvailableError("graphql");
          case 13:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function ensureOnline() {
      return _ensureOnline.apply(this, arguments);
    }
    return ensureOnline;
  }();
  _proto.request = function request(_ref) {
    var _this = this;
    var query = _ref.query,
      params = _ref.params,
      name = _ref.name;
    if (!this.clients.length) {
      throw new ClientNotInitializedError("graphql");
    }
    var retries = this.clients.length;
    return runAndRetry({
      func: function func() {
        return _this.getClient().request(query, params);
      },
      onFail: function onFail(e) {
        if (e instanceof graphqlRequest.ClientError) {
          // If the error code is not a 5XX means the
          // error is not generated by the server
          if (e.response.status < 500) {
            throw new GraphQLError(name || "", e);
          }
        }
        retries--;
        _this.shiftClient();
      },
      shouldRetry: function shouldRetry() {
        return retries > 0;
      }
    });
  };
  return GraphqlModule;
}();

var IPFSModule = /*#__PURE__*/function () {
  function IPFSModule(context) {
    var _context$ipfs;
    this.clientIdx = -1;
    this.clients = [];
    // Storing client data in the private module's scope to prevent external mutation
    if ((_context$ipfs = context.ipfs) != null && _context$ipfs.length) {
      this.clients = context.ipfs;
      this.clientIdx = Math.floor(Math.random() * context.ipfs.length);
    }
  }
  var _proto = IPFSModule.prototype;
  _proto.getClient = function getClient() {
    if (!this.clients.length || !this.clients[this.clientIdx]) {
      throw new ClientNotInitializedError("ipfs");
    }
    return this.clients[this.clientIdx];
  }
  /**
   * Starts using the next available IPFS endpoint
   */;
  _proto.shiftClient = function shiftClient() {
    var _this$clients;
    if (!this.clients.length) {
      throw new ClientNotInitializedError("ipfs");
    } else if (((_this$clients = this.clients) == null ? void 0 : _this$clients.length) < 2) {
      throw new NoNodesAvailableError("ipfs");
    }
    this.clientIdx = (this.clientIdx + 1) % this.clients.length;
  }
  /** Returns `true` if the current client is on line */;
  _proto.isUp = function isUp() {
    var _this$clients2;
    if (!((_this$clients2 = this.clients) != null && _this$clients2.length)) return Promise.resolve(false);
    return this.getClient().nodeInfo().then(function () {
      return true;
    })["catch"](function () {
      return false;
    });
  };
  _proto.ensureOnline = /*#__PURE__*/function () {
    var _ensureOnline = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var i, _this$clients3;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (this.clients.length) {
              _context.next = 2;
              break;
            }
            throw new ClientNotInitializedError("ipfs");
          case 2:
            i = 0;
          case 3:
            if (!(i < ((_this$clients3 = this.clients) == null ? void 0 : _this$clients3.length))) {
              _context.next = 12;
              break;
            }
            _context.next = 6;
            return this.isUp();
          case 6:
            if (!_context.sent) {
              _context.next = 8;
              break;
            }
            return _context.abrupt("return");
          case 8:
            this.shiftClient();
          case 9:
            i++;
            _context.next = 3;
            break;
          case 12:
            throw new NoNodesAvailableError("ipfs");
          case 13:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function ensureOnline() {
      return _ensureOnline.apply(this, arguments);
    }
    return ensureOnline;
  }();
  _proto.getOnlineClient = function getOnlineClient() {
    var _this = this;
    return this.ensureOnline().then(function () {
      return _this.getClient();
    });
  }
  // IPFS METHODS
  ;
  _proto.add =
  /*#__PURE__*/
  function () {
    var _add = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(input) {
      var _this2 = this;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", this.runAndRetryHelper(function () {
              return _this2.getClient().add(input);
            }).then(function (res) {
              return res.hash;
            }));
          case 1:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this);
    }));
    function add(_x) {
      return _add.apply(this, arguments);
    }
    return add;
  }();
  _proto.pin = function pin(input) {
    var _this3 = this;
    return this.runAndRetryHelper(function () {
      return _this3.getClient().pin(input);
    });
  };
  _proto.fetchBytes = function fetchBytes(cid) {
    var _this4 = this;
    return this.runAndRetryHelper(function () {
      return _this4.getClient().cat(cid);
    });
  };
  _proto.runAndRetryHelper = function runAndRetryHelper(f) {
    var _this5 = this;
    if (!this.clients.length) {
      throw new ClientNotInitializedError("ipfs");
    }
    var retries = this.clients.length;
    return runAndRetry({
      func: f,
      onFail: function onFail(e) {
        if (e instanceof sdkIpfs.ClientError) {
          if (e.response.status < 500) {
            // If the error code is not a 5XX means the
            // error is not generated by the server
            throw new IpfsError(e);
          }
        }
        retries--;
        _this5.shiftClient();
      },
      shouldRetry: function shouldRetry() {
        return retries > 0;
      }
    });
  };
  _proto.fetchString = function fetchString(cid) {
    return this.fetchBytes(cid).then(function (bytes) {
      return new TextDecoder().decode(bytes);
    })["catch"](function (e) {
      throw new DataDecodingError(e.message);
    });
  };
  return IPFSModule;
}();

var Web3Module = /*#__PURE__*/function () {
  function Web3Module(context) {
    this.providerIdx = -1;
    this.context = void 0;
    this.context = context;
    this.providerIdx = Math.floor(Math.random() * context.web3Providers.length);
  }
  /** Starts using the next available Web3 provider */
  var _proto = Web3Module.prototype;
  _proto.shiftProvider = function shiftProvider() {
    if (!this.context.web3Providers.length) {
      throw new NoProviderError();
    } else if (this.context.web3Providers.length <= 1) {
      throw new NoNodesAvailableError("web3");
    }
    this.providerIdx = (this.providerIdx + 1) % this.context.web3Providers.length;
  }
  /** Retrieves the current signer */;
  _proto.getSigner = function getSigner() {
    if (!this.context.signer) {
      throw new NoSignerError();
    }
    return this.context.signer;
  }
  /** Returns the currently active network provider */;
  _proto.getProvider = function getProvider() {
    if (!this.context.web3Providers[this.providerIdx]) {
      throw new NoProviderError();
    }
    return this.context.web3Providers[this.providerIdx];
  }
  /** Returns the currently active network */;
  _proto.getNetworkName = function getNetworkName() {
    var network = osxCommonsConfigs.getNetworkByAlias(this.context.network.name);
    if (!network) {
      throw new UnsupportedNetworkError(this.context.network.name);
    }
    return network.name;
  }
  /** Returns a signer connected to the current network provider */;
  _proto.getConnectedSigner = function getConnectedSigner() {
    var signer = this.getSigner();
    if (!signer.provider) {
      var provider = this.getProvider();
      signer = signer.connect(provider);
    }
    return signer;
  }
  /** Returns whether the current provider is functional or not */;
  _proto.isUp = function isUp() {
    var provider = this.getProvider();
    return provider.getNetwork().then(function () {
      return true;
    })["catch"](function () {
      return false;
    });
  };
  _proto.ensureOnline = /*#__PURE__*/function () {
    var _ensureOnline = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var i;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (this.context.web3Providers.length) {
              _context.next = 2;
              break;
            }
            throw new NoProviderError();
          case 2:
            i = 0;
          case 3:
            if (!(i < this.context.web3Providers.length)) {
              _context.next = 12;
              break;
            }
            _context.next = 6;
            return this.isUp();
          case 6:
            if (!_context.sent) {
              _context.next = 8;
              break;
            }
            return _context.abrupt("return");
          case 8:
            this.shiftProvider();
          case 9:
            i++;
            _context.next = 3;
            break;
          case 12:
            throw new NoNodesAvailableError("web3");
          case 13:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function ensureOnline() {
      return _ensureOnline.apply(this, arguments);
    }
    return ensureOnline;
  }()
  /**
   * Returns a contract instance at the given address
   *
   * @param address Contract instance address
   * @param abi The Application Binary Inteface of the contract
   * @return A contract instance attached to the given address
   */
  ;
  _proto.attachContract = function attachContract(address$1, abi) {
    if (!address$1 || !address.isAddress(address$1)) throw new InvalidAddressError();else if (!abi) throw new InvalidContractAbiError();
    var signer = this.getConnectedSigner();
    return new contracts.Contract(address$1, abi, signer);
  }
  /** Calculates the expected maximum gas fee */;
  _proto.getMaxFeePerGas = function getMaxFeePerGas() {
    return this.getConnectedSigner().getFeeData().then(function (feeData) {
      if (!feeData.maxFeePerGas) {
        throw new CannotEstimateGasError();
      }
      return feeData.maxFeePerGas.toBigInt();
    });
  };
  _proto.getApproximateGasFee = function getApproximateGasFee(estimatedFee) {
    var _this = this;
    return this.getMaxFeePerGas().then(function (maxFeePerGas) {
      var max = estimatedFee * maxFeePerGas;
      var factor = _this.context.gasFeeEstimationFactor * Web3Module.PRECISION_FACTOR_BASE;
      var average = max * BigInt(Math.trunc(factor)) / BigInt(Web3Module.PRECISION_FACTOR_BASE);
      return {
        average: average,
        max: max
      };
    });
  }
  /** FRAMEWORK ADDRESSES */;
  _proto.getAddress = function getAddress(addressName) {
    var address$1 = this.context.getAddress(addressName);
    if (!address$1 || !address.isAddress(address$1)) {
      throw new InvalidAddressError();
    }
    return address$1;
  };
  return Web3Module;
}();
Web3Module.PRECISION_FACTOR_BASE = 1000;

/**
 * Provides the low level foundation so that subclasses have ready-made access to Web3, IPFS and GraphQL primitives
 */
var ClientCore = function ClientCore(context) {
  this.web3 = void 0;
  this.ipfs = void 0;
  this.graphql = void 0;
  this.web3 = new Web3Module(context);
  this.ipfs = new IPFSModule(context);
  this.graphql = new GraphqlModule(context);
};

// Basic implementation of the contex extending ContextCore
var Context = /*#__PURE__*/function (_ContextCore) {
  _inheritsLoose(Context, _ContextCore);
  function Context(params) {
    return _ContextCore.call(this, params) || this;
  }
  return Context;
}(ContextCore);

var ANY_ADDRESS = "0xffffffffffffffffffffffffffffffffffffffff";

var BigintSchema = /*#__PURE__*/yup.mixed().test("isBigint", new InvalidParameter("bigint").message, function (value) {
  return typeof value === "bigint";
});
var AddressOrEnsSchema = /*#__PURE__*/yup.string().notRequired().test("isAddressOrEns", new InvalidAddressOrEnsError().message, function (value) {
  return value ? address.isAddress(value) || isEnsName(value) : true;
});
var AddressOrEnsWithoutAnySchema = /*#__PURE__*/yup.string().notRequired().test("isAddressOrEnsWithoutAny", new InvalidAddressOrEnsError().message, function (value) {
  return value ? (address.isAddress(value) || isEnsName(value)) && value !== ANY_ADDRESS : true;
});
var VersionTagSchema = /*#__PURE__*/yup.object({
  build: /*#__PURE__*/yup.number().moreThan(0).required(),
  release: /*#__PURE__*/yup.number().moreThan(0).required()
});
var AbiSchema = /*#__PURE__*/yup.array().notRequired().test("isValidAbi", new InvalidContractAbiError().message,
// TODO: validate abi
function () {
  return true;
});
var Uint8ArraySchema = /*#__PURE__*/yup.mixed().test("isUint8Array", new InvalidParameter("Uint8Array").message, function (value) {
  return value ? value instanceof Uint8Array : true;
});
var IpfsUriSchema = /*#__PURE__*/yup.string().test("isIpfsUri", new InvalidCidError().message, function (value) {
  return value ? isIpfsUri(value) : true;
});
var SubdomainSchema = /*#__PURE__*/yup.string().test("isSubdomain", new InvalidSubdomainError().message, function (value) {
  return value ? isSubdomain(value) : true;
});
var PaginationSchema = /*#__PURE__*/yup.object({
  skip: /*#__PURE__*/yup.number().min(0).notRequired(),
  limit: /*#__PURE__*/yup.number().min(1).notRequired(),
  direction: /*#__PURE__*/yup.string().oneOf(["asc", "desc"]).notRequired()
});
var PrepareUninstallationSchema = /*#__PURE__*/yup.object({
  daoAddressOrEns: /*#__PURE__*/AddressOrEnsSchema.required(),
  pluginAddress: /*#__PURE__*/AddressOrEnsSchema.required(),
  pluginInstallationIndex: /*#__PURE__*/yup.number().notRequired().min(0),
  uninstallationParams: /*#__PURE__*/yup.array().notRequired(),
  uninstallationAbi: /*#__PURE__*/AbiSchema.notRequired()
});
var MultiTargetPermissionSchema = /*#__PURE__*/yup.object({
  operation: /*#__PURE__*/yup.number().required().oneOf([0, 1, 2]),
  permissionId: /*#__PURE__*/yup.string().required(),
  where: /*#__PURE__*/AddressOrEnsWithoutAnySchema.required(),
  who: /*#__PURE__*/AddressOrEnsWithoutAnySchema.required(),
  condition: /*#__PURE__*/yup.string().notRequired()
});
var PrepareInstallationSchema = /*#__PURE__*/yup.object({
  daoAddressOrEns: /*#__PURE__*/AddressOrEnsSchema.required(),
  pluginRepo: /*#__PURE__*/AddressOrEnsSchema.required(),
  version: /*#__PURE__*/VersionTagSchema.notRequired(),
  installationParams: /*#__PURE__*/yup.array().notRequired(),
  installationAbi: /*#__PURE__*/AbiSchema.notRequired()
});
var PluginInstallItemSchema = /*#__PURE__*/yup.object({
  id: /*#__PURE__*/AddressOrEnsSchema.required(),
  data: /*#__PURE__*/Uint8ArraySchema.required()
});
var ApplyUninstallationSchema = /*#__PURE__*/yup.object({
  pluginAddress: /*#__PURE__*/AddressOrEnsSchema.required(),
  pluginRepo: /*#__PURE__*/AddressOrEnsSchema.required(),
  versionTag: /*#__PURE__*/VersionTagSchema.required(),
  permissions: /*#__PURE__*/yup.array(MultiTargetPermissionSchema).required()
});
var ApplyInstallationSchema = /*#__PURE__*/ApplyUninstallationSchema.concat( /*#__PURE__*/yup.object({
  helpers: /*#__PURE__*/yup.array(AddressOrEnsSchema).required()
}));
var IsMemberSchema = /*#__PURE__*/yup.object({
  address: /*#__PURE__*/AddressOrEnsSchema.required(),
  pluginAddress: /*#__PURE__*/AddressOrEnsSchema.required(),
  blockNumber: /*#__PURE__*/yup.number().notRequired()
});

exports.AbiSchema = AbiSchema;
exports.AddressOrEnsSchema = AddressOrEnsSchema;
exports.AddressOrEnsWithoutAnySchema = AddressOrEnsWithoutAnySchema;
exports.AlwaysFailingProposalError = AlwaysFailingProposalError;
exports.AmountMismatchError = AmountMismatchError;
exports.ApplyInstallationSchema = ApplyInstallationSchema;
exports.ApplyUninstallationSchema = ApplyUninstallationSchema;
exports.BigintSchema = BigintSchema;
exports.CannotEstimateGasError = CannotEstimateGasError;
exports.ClientCore = ClientCore;
exports.ClientNotInitializedError = ClientNotInitializedError;
exports.Context = Context;
exports.ContextCore = ContextCore;
exports.ContractNotDeployedError = ContractNotDeployedError;
exports.DaoCreationError = DaoCreationError;
exports.DataDecodingError = DataDecodingError;
exports.DepositNativeTokenError = DepositNativeTokenError;
exports.EMPTY_PROPOSAL_METADATA_LINK = EMPTY_PROPOSAL_METADATA_LINK;
exports.ENS_REGEX = ENS_REGEX;
exports.EmptyMultiUriError = EmptyMultiUriError;
exports.FailedDepositError = FailedDepositError;
exports.GraphQLError = GraphQLError;
exports.HEX_STRING_REGEX = HEX_STRING_REGEX;
exports.IPFS_CID_REGEX = IPFS_CID_REGEX;
exports.IPFS_ENDPOINTS = IPFS_ENDPOINTS;
exports.IPFS_URI_REGEX = IPFS_URI_REGEX;
exports.InstallationNotFoundError = InstallationNotFoundError;
exports.InvalidActionError = InvalidActionError;
exports.InvalidAddressError = InvalidAddressError;
exports.InvalidAddressOrEnsError = InvalidAddressOrEnsError;
exports.InvalidArraySizeError = InvalidArraySizeError;
exports.InvalidBitMapValueError = InvalidBitMapValueError;
exports.InvalidCidError = InvalidCidError;
exports.InvalidContractAbiError = InvalidContractAbiError;
exports.InvalidContractAddressError = InvalidContractAddressError;
exports.InvalidDigitsValueError = InvalidDigitsValueError;
exports.InvalidEnsError = InvalidEnsError;
exports.InvalidGasEstimationFactorError = InvalidGasEstimationFactorError;
exports.InvalidParameter = InvalidParameter;
exports.InvalidPermissionOperationType = InvalidPermissionOperationType;
exports.InvalidPrecisionError = InvalidPrecisionError;
exports.InvalidPrepareUninstallationAbiError = InvalidPrepareUninstallationAbiError;
exports.InvalidPromiseError = InvalidPromiseError;
exports.InvalidProposalIdError = InvalidProposalIdError;
exports.InvalidProposalStatusError = InvalidProposalStatusError;
exports.InvalidRatioValueError = InvalidRatioValueError;
exports.InvalidSubdomainError = InvalidSubdomainError;
exports.InvalidTimeoutError = InvalidTimeoutError;
exports.InvalidVersionError = InvalidVersionError;
exports.InvalidVotingModeError = InvalidVotingModeError;
exports.IpfsError = IpfsError;
exports.IpfsFetchError = IpfsFetchError;
exports.IpfsPinError = IpfsPinError;
exports.IpfsUriSchema = IpfsUriSchema;
exports.IsMemberSchema = IsMemberSchema;
exports.MULTI_FETCH_TIMEOUT = MULTI_FETCH_TIMEOUT;
exports.MissingExecPermissionError = MissingExecPermissionError;
exports.MissingMetadataError = MissingMetadataError;
exports.MultiTargetPermissionSchema = MultiTargetPermissionSchema;
exports.MultiUri = MultiUri;
exports.NoDaoFactory = NoDaoFactory;
exports.NoDaoRegistry = NoDaoRegistry;
exports.NoNodesAvailableError = NoNodesAvailableError;
exports.NoPluginRepoRegistry = NoPluginRepoRegistry;
exports.NoProviderError = NoProviderError;
exports.NoSignerError = NoSignerError;
exports.NoTokenAddress = NoTokenAddress;
exports.NotAContractError = NotAContractError;
exports.NotImplementedError = NotImplementedError;
exports.OSX_PROPOSAL_ID_REGEX = OSX_PROPOSAL_ID_REGEX;
exports.PaginationSchema = PaginationSchema;
exports.PermissionIds = PermissionIds;
exports.Permissions = Permissions;
exports.PluginInstallItemSchema = PluginInstallItemSchema;
exports.PluginInstallationPreparationError = PluginInstallationPreparationError;
exports.PluginUninstallationPreparationError = PluginUninstallationPreparationError;
exports.PluginUpdatePreparationError = PluginUpdatePreparationError;
exports.PrepareInstallationSchema = PrepareInstallationSchema;
exports.PrepareUninstallationSchema = PrepareUninstallationSchema;
exports.ProposalCreationError = ProposalCreationError;
exports.ProposalNotFoundError = ProposalNotFoundError;
exports.SUBDOMAIN_REGEX = SUBDOMAIN_REGEX;
exports.SizeMismatchError = SizeMismatchError;
exports.SubdomainSchema = SubdomainSchema;
exports.TimeoutError = TimeoutError;
exports.UNAVAILABLE_PROPOSAL_METADATA = UNAVAILABLE_PROPOSAL_METADATA;
exports.UNSUPPORTED_PROPOSAL_METADATA_LINK = UNSUPPORTED_PROPOSAL_METADATA_LINK;
exports.Uint8ArraySchema = Uint8ArraySchema;
exports.UnexpectedActionError = UnexpectedActionError;
exports.UnsupportedNetworkError = UnsupportedNetworkError;
exports.UnsupportedProtocolError = UnsupportedProtocolError;
exports.UpdateAllowanceError = UpdateAllowanceError;
exports.ValueOutOfRangeError = ValueOutOfRangeError;
exports.VersionTagSchema = VersionTagSchema;
exports.bitmapToBoolArray = bitmapToBoolArray;
exports.boolArrayToBitmap = boolArrayToBitmap;
exports.bytesToHex = bytesToHex;
exports.decodeProposalId = decodeProposalId;
exports.decodeRatio = decodeRatio;
exports.encodeProposalId = encodeProposalId;
exports.encodeRatio = encodeRatio;
exports.ensure0x = ensure0x;
exports.findLog = findLog;
exports.getCompactProposalId = getCompactProposalId;
exports.getDefaultGraphqlNodes = getDefaultGraphqlNodes;
exports.getDefaultIpfsNodes = getDefaultIpfsNodes;
exports.getExtendedProposalId = getExtendedProposalId;
exports.getFunctionFragment = getFunctionFragment;
exports.getInterfaceId = getInterfaceId;
exports.getNamedTypesFromMetadata = getNamedTypesFromMetadata;
exports.getNetwork = getNetwork;
exports.hexToBytes = hexToBytes;
exports.isEnsName = isEnsName;
exports.isIpfsUri = isIpfsUri;
exports.isProposalId = isProposalId;
exports.isSubdomain = isSubdomain;
exports.prepareGenericInstallation = prepareGenericInstallation;
exports.prepareGenericInstallationEstimation = prepareGenericInstallationEstimation;
exports.prepareGenericUpdate = prepareGenericUpdate;
exports.prepareGenericUpdateEstimation = prepareGenericUpdateEstimation;
exports.promiseWithTimeout = promiseWithTimeout;
exports.resolveIpfsCid = resolveIpfsCid;
exports.runAndRetry = runAndRetry;
exports.strip0x = strip0x;
//# sourceMappingURL=sdk-client-common.cjs.development.js.map
