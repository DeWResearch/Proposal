import { Listener, Provider, TransactionRequest } from '@ethersproject/providers';
import { Event, EventFilter, BaseContract, Signer, CallOverrides, BytesLike, Overrides, ContractTransaction, BigNumberish, BigNumber, PopulatedTransaction, utils, PayableOverrides, ContractFactory } from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';

interface TypedEvent<TArgsArray extends Array<any> = any, TArgsObject = any> extends Event {
    args: TArgsArray & TArgsObject;
}
interface TypedEventFilter<_TEvent extends TypedEvent> extends EventFilter {
}
interface TypedListener<TEvent extends TypedEvent> {
    (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}
type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;
interface OnEvent<TRes> {
    <TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>, listener: TypedListener<TEvent>): TRes;
    (eventName: string, listener: Listener): TRes;
}
type PromiseOrValue<T> = T | Promise<T>;

interface ENSInterface extends utils.Interface {
    functions: {
        "isApprovedForAll(address,address)": FunctionFragment;
        "owner(bytes32)": FunctionFragment;
        "recordExists(bytes32)": FunctionFragment;
        "resolver(bytes32)": FunctionFragment;
        "setApprovalForAll(address,bool)": FunctionFragment;
        "setOwner(bytes32,address)": FunctionFragment;
        "setRecord(bytes32,address,address,uint64)": FunctionFragment;
        "setResolver(bytes32,address)": FunctionFragment;
        "setSubnodeOwner(bytes32,bytes32,address)": FunctionFragment;
        "setSubnodeRecord(bytes32,bytes32,address,address,uint64)": FunctionFragment;
        "setTTL(bytes32,uint64)": FunctionFragment;
        "ttl(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "isApprovedForAll" | "owner" | "recordExists" | "resolver" | "setApprovalForAll" | "setOwner" | "setRecord" | "setResolver" | "setSubnodeOwner" | "setSubnodeRecord" | "setTTL" | "ttl"): FunctionFragment;
    encodeFunctionData(functionFragment: "isApprovedForAll", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "owner", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "recordExists", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "resolver", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setApprovalForAll", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setOwner", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setRecord", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setResolver", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setSubnodeOwner", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "setSubnodeRecord", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setTTL", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "ttl", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "recordExists", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRecord", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setResolver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSubnodeOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSubnodeRecord", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTTL", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ttl", data: BytesLike): Result;
    events: {
        "ApprovalForAll(address,address,bool)": EventFragment;
        "NewOwner(bytes32,bytes32,address)": EventFragment;
        "NewResolver(bytes32,address)": EventFragment;
        "NewTTL(bytes32,uint64)": EventFragment;
        "Transfer(bytes32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewResolver"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewTTL"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}
interface ApprovalForAllEventObject$4 {
    owner: string;
    operator: string;
    approved: boolean;
}
type ApprovalForAllEvent$4 = TypedEvent<[
    string,
    string,
    boolean
], ApprovalForAllEventObject$4>;
type ApprovalForAllEventFilter$4 = TypedEventFilter<ApprovalForAllEvent$4>;
interface NewOwnerEventObject$1 {
    node: string;
    label: string;
    owner: string;
}
type NewOwnerEvent$1 = TypedEvent<[
    string,
    string,
    string
], NewOwnerEventObject$1>;
type NewOwnerEventFilter$1 = TypedEventFilter<NewOwnerEvent$1>;
interface NewResolverEventObject$1 {
    node: string;
    resolver: string;
}
type NewResolverEvent$1 = TypedEvent<[
    string,
    string
], NewResolverEventObject$1>;
type NewResolverEventFilter$1 = TypedEventFilter<NewResolverEvent$1>;
interface NewTTLEventObject$1 {
    node: string;
    ttl: BigNumber;
}
type NewTTLEvent$1 = TypedEvent<[string, BigNumber], NewTTLEventObject$1>;
type NewTTLEventFilter$1 = TypedEventFilter<NewTTLEvent$1>;
interface TransferEventObject$3 {
    node: string;
    owner: string;
}
type TransferEvent$3 = TypedEvent<[string, string], TransferEventObject$3>;
type TransferEventFilter$3 = TypedEventFilter<TransferEvent$3>;
interface ENS extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ENSInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        owner(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        recordExists(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        resolver(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setOwner(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setRecord(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setResolver(node: PromiseOrValue<BytesLike>, resolver: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSubnodeOwner(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSubnodeRecord(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTTL(node: PromiseOrValue<BytesLike>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        ttl(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    owner(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    recordExists(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    resolver(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setOwner(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setRecord(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setResolver(node: PromiseOrValue<BytesLike>, resolver: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSubnodeOwner(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSubnodeRecord(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTTL(node: PromiseOrValue<BytesLike>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    ttl(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        owner(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        recordExists(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        resolver(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setOwner(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setRecord(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setResolver(node: PromiseOrValue<BytesLike>, resolver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setSubnodeOwner(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        setSubnodeRecord(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setTTL(node: PromiseOrValue<BytesLike>, ttl: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        ttl(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "ApprovalForAll(address,address,bool)"(owner?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter$4;
        ApprovalForAll(owner?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter$4;
        "NewOwner(bytes32,bytes32,address)"(node?: PromiseOrValue<BytesLike> | null, label?: PromiseOrValue<BytesLike> | null, owner?: null): NewOwnerEventFilter$1;
        NewOwner(node?: PromiseOrValue<BytesLike> | null, label?: PromiseOrValue<BytesLike> | null, owner?: null): NewOwnerEventFilter$1;
        "NewResolver(bytes32,address)"(node?: PromiseOrValue<BytesLike> | null, resolver?: null): NewResolverEventFilter$1;
        NewResolver(node?: PromiseOrValue<BytesLike> | null, resolver?: null): NewResolverEventFilter$1;
        "NewTTL(bytes32,uint64)"(node?: PromiseOrValue<BytesLike> | null, ttl?: null): NewTTLEventFilter$1;
        NewTTL(node?: PromiseOrValue<BytesLike> | null, ttl?: null): NewTTLEventFilter$1;
        "Transfer(bytes32,address)"(node?: PromiseOrValue<BytesLike> | null, owner?: null): TransferEventFilter$3;
        Transfer(node?: PromiseOrValue<BytesLike> | null, owner?: null): TransferEventFilter$3;
    };
    estimateGas: {
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        recordExists(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        resolver(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setOwner(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setRecord(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setResolver(node: PromiseOrValue<BytesLike>, resolver: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSubnodeOwner(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSubnodeRecord(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTTL(node: PromiseOrValue<BytesLike>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        ttl(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        recordExists(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        resolver(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setOwner(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setRecord(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setResolver(node: PromiseOrValue<BytesLike>, resolver: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSubnodeOwner(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSubnodeRecord(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTTL(node: PromiseOrValue<BytesLike>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        ttl(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ENSRegistryInterface extends utils.Interface {
    functions: {
        "isApprovedForAll(address,address)": FunctionFragment;
        "owner(bytes32)": FunctionFragment;
        "recordExists(bytes32)": FunctionFragment;
        "resolver(bytes32)": FunctionFragment;
        "setApprovalForAll(address,bool)": FunctionFragment;
        "setOwner(bytes32,address)": FunctionFragment;
        "setRecord(bytes32,address,address,uint64)": FunctionFragment;
        "setResolver(bytes32,address)": FunctionFragment;
        "setSubnodeOwner(bytes32,bytes32,address)": FunctionFragment;
        "setSubnodeRecord(bytes32,bytes32,address,address,uint64)": FunctionFragment;
        "setTTL(bytes32,uint64)": FunctionFragment;
        "ttl(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "isApprovedForAll" | "owner" | "recordExists" | "resolver" | "setApprovalForAll" | "setOwner" | "setRecord" | "setResolver" | "setSubnodeOwner" | "setSubnodeRecord" | "setTTL" | "ttl"): FunctionFragment;
    encodeFunctionData(functionFragment: "isApprovedForAll", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "owner", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "recordExists", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "resolver", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setApprovalForAll", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setOwner", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setRecord", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setResolver", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setSubnodeOwner", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "setSubnodeRecord", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setTTL", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "ttl", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "recordExists", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRecord", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setResolver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSubnodeOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSubnodeRecord", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTTL", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ttl", data: BytesLike): Result;
    events: {
        "ApprovalForAll(address,address,bool)": EventFragment;
        "NewOwner(bytes32,bytes32,address)": EventFragment;
        "NewResolver(bytes32,address)": EventFragment;
        "NewTTL(bytes32,uint64)": EventFragment;
        "Transfer(bytes32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewResolver"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewTTL"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}
interface ApprovalForAllEventObject$3 {
    owner: string;
    operator: string;
    approved: boolean;
}
type ApprovalForAllEvent$3 = TypedEvent<[
    string,
    string,
    boolean
], ApprovalForAllEventObject$3>;
type ApprovalForAllEventFilter$3 = TypedEventFilter<ApprovalForAllEvent$3>;
interface NewOwnerEventObject {
    node: string;
    label: string;
    owner: string;
}
type NewOwnerEvent = TypedEvent<[
    string,
    string,
    string
], NewOwnerEventObject>;
type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;
interface NewResolverEventObject {
    node: string;
    resolver: string;
}
type NewResolverEvent = TypedEvent<[
    string,
    string
], NewResolverEventObject>;
type NewResolverEventFilter = TypedEventFilter<NewResolverEvent>;
interface NewTTLEventObject {
    node: string;
    ttl: BigNumber;
}
type NewTTLEvent = TypedEvent<[string, BigNumber], NewTTLEventObject>;
type NewTTLEventFilter = TypedEventFilter<NewTTLEvent>;
interface TransferEventObject$2 {
    node: string;
    owner: string;
}
type TransferEvent$2 = TypedEvent<[string, string], TransferEventObject$2>;
type TransferEventFilter$2 = TypedEventFilter<TransferEvent$2>;
interface ENSRegistry extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ENSRegistryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        owner(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        recordExists(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        resolver(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setOwner(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setRecord(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setResolver(node: PromiseOrValue<BytesLike>, resolver: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSubnodeOwner(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSubnodeRecord(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTTL(node: PromiseOrValue<BytesLike>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        ttl(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    owner(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    recordExists(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    resolver(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setOwner(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setRecord(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setResolver(node: PromiseOrValue<BytesLike>, resolver: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSubnodeOwner(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSubnodeRecord(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTTL(node: PromiseOrValue<BytesLike>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    ttl(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        owner(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        recordExists(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        resolver(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setOwner(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setRecord(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setResolver(node: PromiseOrValue<BytesLike>, resolver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setSubnodeOwner(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        setSubnodeRecord(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setTTL(node: PromiseOrValue<BytesLike>, ttl: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        ttl(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "ApprovalForAll(address,address,bool)"(owner?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter$3;
        ApprovalForAll(owner?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter$3;
        "NewOwner(bytes32,bytes32,address)"(node?: PromiseOrValue<BytesLike> | null, label?: PromiseOrValue<BytesLike> | null, owner?: null): NewOwnerEventFilter;
        NewOwner(node?: PromiseOrValue<BytesLike> | null, label?: PromiseOrValue<BytesLike> | null, owner?: null): NewOwnerEventFilter;
        "NewResolver(bytes32,address)"(node?: PromiseOrValue<BytesLike> | null, resolver?: null): NewResolverEventFilter;
        NewResolver(node?: PromiseOrValue<BytesLike> | null, resolver?: null): NewResolverEventFilter;
        "NewTTL(bytes32,uint64)"(node?: PromiseOrValue<BytesLike> | null, ttl?: null): NewTTLEventFilter;
        NewTTL(node?: PromiseOrValue<BytesLike> | null, ttl?: null): NewTTLEventFilter;
        "Transfer(bytes32,address)"(node?: PromiseOrValue<BytesLike> | null, owner?: null): TransferEventFilter$2;
        Transfer(node?: PromiseOrValue<BytesLike> | null, owner?: null): TransferEventFilter$2;
    };
    estimateGas: {
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        recordExists(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        resolver(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setOwner(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setRecord(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setResolver(node: PromiseOrValue<BytesLike>, resolver: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSubnodeOwner(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSubnodeRecord(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTTL(node: PromiseOrValue<BytesLike>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        ttl(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        recordExists(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        resolver(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setOwner(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setRecord(node: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setResolver(node: PromiseOrValue<BytesLike>, resolver: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSubnodeOwner(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSubnodeRecord(node: PromiseOrValue<BytesLike>, label: PromiseOrValue<BytesLike>, owner: PromiseOrValue<string>, resolver: PromiseOrValue<string>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTTL(node: PromiseOrValue<BytesLike>, ttl: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        ttl(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$1a_ENS = ENS;
type index$1a_ENSRegistry = ENSRegistry;
declare namespace index$1a {
  export {
    index$1a_ENS as ENS,
    index$1a_ENSRegistry as ENSRegistry,
  };
}

interface INameWrapperInterface extends utils.Interface {
    functions: {
        "ownerOf(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ownerOf"): FunctionFragment;
    encodeFunctionData(functionFragment: "ownerOf", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    events: {};
}
interface INameWrapper extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: INameWrapperInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ownerOf(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
    };
    ownerOf(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        ownerOf(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        ownerOf(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        ownerOf(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface PublicResolverInterface extends utils.Interface {
    functions: {
        "ABI(bytes32,uint256)": FunctionFragment;
        "addr(bytes32)": FunctionFragment;
        "addr(bytes32,uint256)": FunctionFragment;
        "clearDNSZone(bytes32)": FunctionFragment;
        "contenthash(bytes32)": FunctionFragment;
        "dnsRecord(bytes32,bytes32,uint16)": FunctionFragment;
        "hasDNSRecords(bytes32,bytes32)": FunctionFragment;
        "interfaceImplementer(bytes32,bytes4)": FunctionFragment;
        "isApprovedForAll(address,address)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "name(bytes32)": FunctionFragment;
        "pubkey(bytes32)": FunctionFragment;
        "setABI(bytes32,uint256,bytes)": FunctionFragment;
        "setAddr(bytes32,uint256,bytes)": FunctionFragment;
        "setAddr(bytes32,address)": FunctionFragment;
        "setApprovalForAll(address,bool)": FunctionFragment;
        "setContenthash(bytes32,bytes)": FunctionFragment;
        "setDNSRecords(bytes32,bytes)": FunctionFragment;
        "setInterface(bytes32,bytes4,address)": FunctionFragment;
        "setName(bytes32,string)": FunctionFragment;
        "setPubkey(bytes32,bytes32,bytes32)": FunctionFragment;
        "setText(bytes32,string,string)": FunctionFragment;
        "setZonehash(bytes32,bytes)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "text(bytes32,string)": FunctionFragment;
        "zonehash(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ABI" | "addr(bytes32)" | "addr(bytes32,uint256)" | "clearDNSZone" | "contenthash" | "dnsRecord" | "hasDNSRecords" | "interfaceImplementer" | "isApprovedForAll" | "multicall" | "name" | "pubkey" | "setABI" | "setAddr(bytes32,uint256,bytes)" | "setAddr(bytes32,address)" | "setApprovalForAll" | "setContenthash" | "setDNSRecords" | "setInterface" | "setName" | "setPubkey" | "setText" | "setZonehash" | "supportsInterface" | "text" | "zonehash"): FunctionFragment;
    encodeFunctionData(functionFragment: "ABI", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "addr(bytes32)", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "addr(bytes32,uint256)", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "clearDNSZone", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "contenthash", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "dnsRecord", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "hasDNSRecords", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "interfaceImplementer", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "isApprovedForAll", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "name", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "pubkey", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setABI", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setAddr(bytes32,uint256,bytes)", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setAddr(bytes32,address)", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setApprovalForAll", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setContenthash", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setDNSRecords", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setInterface", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "setName", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPubkey", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setText", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "setZonehash", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "text", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "zonehash", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "ABI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addr(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addr(bytes32,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clearDNSZone", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "contenthash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dnsRecord", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasDNSRecords", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "interfaceImplementer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pubkey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setABI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddr(bytes32,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddr(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setContenthash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDNSRecords", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPubkey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setZonehash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "text", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "zonehash", data: BytesLike): Result;
    events: {
        "ABIChanged(bytes32,uint256)": EventFragment;
        "AddrChanged(bytes32,address)": EventFragment;
        "AddressChanged(bytes32,uint256,bytes)": EventFragment;
        "ApprovalForAll(address,address,bool)": EventFragment;
        "ContenthashChanged(bytes32,bytes)": EventFragment;
        "DNSRecordChanged(bytes32,bytes,uint16,bytes)": EventFragment;
        "DNSRecordDeleted(bytes32,bytes,uint16)": EventFragment;
        "DNSZoneCleared(bytes32)": EventFragment;
        "DNSZonehashChanged(bytes32,bytes,bytes)": EventFragment;
        "InterfaceChanged(bytes32,bytes4,address)": EventFragment;
        "NameChanged(bytes32,string)": EventFragment;
        "PubkeyChanged(bytes32,bytes32,bytes32)": EventFragment;
        "TextChanged(bytes32,string,string)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ABIChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AddrChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AddressChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ContenthashChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSRecordChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSRecordDeleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSZoneCleared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSZonehashChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InterfaceChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NameChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PubkeyChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TextChanged"): EventFragment;
}
interface ABIChangedEventObject$3 {
    node: string;
    contentType: BigNumber;
}
type ABIChangedEvent$3 = TypedEvent<[
    string,
    BigNumber
], ABIChangedEventObject$3>;
type ABIChangedEventFilter$3 = TypedEventFilter<ABIChangedEvent$3>;
interface AddrChangedEventObject$4 {
    node: string;
    a: string;
}
type AddrChangedEvent$4 = TypedEvent<[
    string,
    string
], AddrChangedEventObject$4>;
type AddrChangedEventFilter$4 = TypedEventFilter<AddrChangedEvent$4>;
interface AddressChangedEventObject$4 {
    node: string;
    coinType: BigNumber;
    newAddress: string;
}
type AddressChangedEvent$4 = TypedEvent<[
    string,
    BigNumber,
    string
], AddressChangedEventObject$4>;
type AddressChangedEventFilter$4 = TypedEventFilter<AddressChangedEvent$4>;
interface ApprovalForAllEventObject$2 {
    owner: string;
    operator: string;
    approved: boolean;
}
type ApprovalForAllEvent$2 = TypedEvent<[
    string,
    string,
    boolean
], ApprovalForAllEventObject$2>;
type ApprovalForAllEventFilter$2 = TypedEventFilter<ApprovalForAllEvent$2>;
interface ContenthashChangedEventObject$3 {
    node: string;
    hash: string;
}
type ContenthashChangedEvent$3 = TypedEvent<[
    string,
    string
], ContenthashChangedEventObject$3>;
type ContenthashChangedEventFilter$3 = TypedEventFilter<ContenthashChangedEvent$3>;
interface DNSRecordChangedEventObject$3 {
    node: string;
    name: string;
    resource: number;
    record: string;
}
type DNSRecordChangedEvent$3 = TypedEvent<[
    string,
    string,
    number,
    string
], DNSRecordChangedEventObject$3>;
type DNSRecordChangedEventFilter$3 = TypedEventFilter<DNSRecordChangedEvent$3>;
interface DNSRecordDeletedEventObject$3 {
    node: string;
    name: string;
    resource: number;
}
type DNSRecordDeletedEvent$3 = TypedEvent<[
    string,
    string,
    number
], DNSRecordDeletedEventObject$3>;
type DNSRecordDeletedEventFilter$3 = TypedEventFilter<DNSRecordDeletedEvent$3>;
interface DNSZoneClearedEventObject$3 {
    node: string;
}
type DNSZoneClearedEvent$3 = TypedEvent<[
    string
], DNSZoneClearedEventObject$3>;
type DNSZoneClearedEventFilter$3 = TypedEventFilter<DNSZoneClearedEvent$3>;
interface DNSZonehashChangedEventObject$3 {
    node: string;
    lastzonehash: string;
    zonehash: string;
}
type DNSZonehashChangedEvent$3 = TypedEvent<[
    string,
    string,
    string
], DNSZonehashChangedEventObject$3>;
type DNSZonehashChangedEventFilter$3 = TypedEventFilter<DNSZonehashChangedEvent$3>;
interface InterfaceChangedEventObject$3 {
    node: string;
    interfaceID: string;
    implementer: string;
}
type InterfaceChangedEvent$3 = TypedEvent<[
    string,
    string,
    string
], InterfaceChangedEventObject$3>;
type InterfaceChangedEventFilter$3 = TypedEventFilter<InterfaceChangedEvent$3>;
interface NameChangedEventObject$3 {
    node: string;
    name: string;
}
type NameChangedEvent$3 = TypedEvent<[
    string,
    string
], NameChangedEventObject$3>;
type NameChangedEventFilter$3 = TypedEventFilter<NameChangedEvent$3>;
interface PubkeyChangedEventObject$3 {
    node: string;
    x: string;
    y: string;
}
type PubkeyChangedEvent$3 = TypedEvent<[
    string,
    string,
    string
], PubkeyChangedEventObject$3>;
type PubkeyChangedEventFilter$3 = TypedEventFilter<PubkeyChangedEvent$3>;
interface TextChangedEventObject$3 {
    node: string;
    indexedKey: string;
    key: string;
}
type TextChangedEvent$3 = TypedEvent<[
    string,
    string,
    string
], TextChangedEventObject$3>;
type TextChangedEventFilter$3 = TypedEventFilter<TextChangedEvent$3>;
interface PublicResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PublicResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        clearDNSZone(node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        hasDNSRecords(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        isApprovedForAll(account: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            x: string;
            y: string;
        }>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDNSRecords(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setName(node: PromiseOrValue<BytesLike>, newName: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setZonehash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
    };
    ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
    "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    clearDNSZone(node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    hasDNSRecords(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    isApprovedForAll(account: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
        x: string;
        y: string;
    }>;
    setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDNSRecords(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setName(node: PromiseOrValue<BytesLike>, newName: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setZonehash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        clearDNSZone(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        hasDNSRecords(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        isApprovedForAll(account: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            x: string;
            y: string;
        }>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDNSRecords(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setName(node: PromiseOrValue<BytesLike>, newName: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setZonehash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ABIChanged(bytes32,uint256)"(node?: PromiseOrValue<BytesLike> | null, contentType?: PromiseOrValue<BigNumberish> | null): ABIChangedEventFilter$3;
        ABIChanged(node?: PromiseOrValue<BytesLike> | null, contentType?: PromiseOrValue<BigNumberish> | null): ABIChangedEventFilter$3;
        "AddrChanged(bytes32,address)"(node?: PromiseOrValue<BytesLike> | null, a?: null): AddrChangedEventFilter$4;
        AddrChanged(node?: PromiseOrValue<BytesLike> | null, a?: null): AddrChangedEventFilter$4;
        "AddressChanged(bytes32,uint256,bytes)"(node?: PromiseOrValue<BytesLike> | null, coinType?: null, newAddress?: null): AddressChangedEventFilter$4;
        AddressChanged(node?: PromiseOrValue<BytesLike> | null, coinType?: null, newAddress?: null): AddressChangedEventFilter$4;
        "ApprovalForAll(address,address,bool)"(owner?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter$2;
        ApprovalForAll(owner?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter$2;
        "ContenthashChanged(bytes32,bytes)"(node?: PromiseOrValue<BytesLike> | null, hash?: null): ContenthashChangedEventFilter$3;
        ContenthashChanged(node?: PromiseOrValue<BytesLike> | null, hash?: null): ContenthashChangedEventFilter$3;
        "DNSRecordChanged(bytes32,bytes,uint16,bytes)"(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null, record?: null): DNSRecordChangedEventFilter$3;
        DNSRecordChanged(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null, record?: null): DNSRecordChangedEventFilter$3;
        "DNSRecordDeleted(bytes32,bytes,uint16)"(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null): DNSRecordDeletedEventFilter$3;
        DNSRecordDeleted(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null): DNSRecordDeletedEventFilter$3;
        "DNSZoneCleared(bytes32)"(node?: PromiseOrValue<BytesLike> | null): DNSZoneClearedEventFilter$3;
        DNSZoneCleared(node?: PromiseOrValue<BytesLike> | null): DNSZoneClearedEventFilter$3;
        "DNSZonehashChanged(bytes32,bytes,bytes)"(node?: PromiseOrValue<BytesLike> | null, lastzonehash?: null, zonehash?: null): DNSZonehashChangedEventFilter$3;
        DNSZonehashChanged(node?: PromiseOrValue<BytesLike> | null, lastzonehash?: null, zonehash?: null): DNSZonehashChangedEventFilter$3;
        "InterfaceChanged(bytes32,bytes4,address)"(node?: PromiseOrValue<BytesLike> | null, interfaceID?: PromiseOrValue<BytesLike> | null, implementer?: null): InterfaceChangedEventFilter$3;
        InterfaceChanged(node?: PromiseOrValue<BytesLike> | null, interfaceID?: PromiseOrValue<BytesLike> | null, implementer?: null): InterfaceChangedEventFilter$3;
        "NameChanged(bytes32,string)"(node?: PromiseOrValue<BytesLike> | null, name?: null): NameChangedEventFilter$3;
        NameChanged(node?: PromiseOrValue<BytesLike> | null, name?: null): NameChangedEventFilter$3;
        "PubkeyChanged(bytes32,bytes32,bytes32)"(node?: PromiseOrValue<BytesLike> | null, x?: null, y?: null): PubkeyChangedEventFilter$3;
        PubkeyChanged(node?: PromiseOrValue<BytesLike> | null, x?: null, y?: null): PubkeyChangedEventFilter$3;
        "TextChanged(bytes32,string,string)"(node?: PromiseOrValue<BytesLike> | null, indexedKey?: PromiseOrValue<string> | null, key?: null): TextChangedEventFilter$3;
        TextChanged(node?: PromiseOrValue<BytesLike> | null, indexedKey?: PromiseOrValue<string> | null, key?: null): TextChangedEventFilter$3;
    };
    estimateGas: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        clearDNSZone(node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hasDNSRecords(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        isApprovedForAll(account: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDNSRecords(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setName(node: PromiseOrValue<BytesLike>, newName: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setZonehash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        clearDNSZone(node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasDNSRecords(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isApprovedForAll(account: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDNSRecords(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setName(node: PromiseOrValue<BytesLike>, newName: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setZonehash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$19_INameWrapper = INameWrapper;
type index$19_PublicResolver = PublicResolver;
declare namespace index$19 {
  export {
    index$19_INameWrapper as INameWrapper,
    index$19_PublicResolver as PublicResolver,
  };
}

interface ABIResolverInterface extends utils.Interface {
    functions: {
        "ABI(bytes32,uint256)": FunctionFragment;
        "setABI(bytes32,uint256,bytes)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ABI" | "setABI" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "ABI", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setABI", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "ABI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setABI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "ABIChanged(bytes32,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ABIChanged"): EventFragment;
}
interface ABIChangedEventObject$2 {
    node: string;
    contentType: BigNumber;
}
type ABIChangedEvent$2 = TypedEvent<[
    string,
    BigNumber
], ABIChangedEventObject$2>;
type ABIChangedEventFilter$2 = TypedEventFilter<ABIChangedEvent$2>;
interface ABIResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ABIResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
    setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "ABIChanged(bytes32,uint256)"(node?: PromiseOrValue<BytesLike> | null, contentType?: PromiseOrValue<BigNumberish> | null): ABIChangedEventFilter$2;
        ABIChanged(node?: PromiseOrValue<BytesLike> | null, contentType?: PromiseOrValue<BigNumberish> | null): ABIChangedEventFilter$2;
    };
    estimateGas: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface AddrResolverInterface extends utils.Interface {
    functions: {
        "addr(bytes32)": FunctionFragment;
        "addr(bytes32,uint256)": FunctionFragment;
        "setAddr(bytes32,uint256,bytes)": FunctionFragment;
        "setAddr(bytes32,address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addr(bytes32)" | "addr(bytes32,uint256)" | "setAddr(bytes32,uint256,bytes)" | "setAddr(bytes32,address)" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "addr(bytes32)", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "addr(bytes32,uint256)", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setAddr(bytes32,uint256,bytes)", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setAddr(bytes32,address)", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "addr(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addr(bytes32,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddr(bytes32,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddr(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "AddrChanged(bytes32,address)": EventFragment;
        "AddressChanged(bytes32,uint256,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddrChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AddressChanged"): EventFragment;
}
interface AddrChangedEventObject$3 {
    node: string;
    a: string;
}
type AddrChangedEvent$3 = TypedEvent<[
    string,
    string
], AddrChangedEventObject$3>;
type AddrChangedEventFilter$3 = TypedEventFilter<AddrChangedEvent$3>;
interface AddressChangedEventObject$3 {
    node: string;
    coinType: BigNumber;
    newAddress: string;
}
type AddressChangedEvent$3 = TypedEvent<[
    string,
    BigNumber,
    string
], AddressChangedEventObject$3>;
type AddressChangedEventFilter$3 = TypedEventFilter<AddressChangedEvent$3>;
interface AddrResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AddrResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "AddrChanged(bytes32,address)"(node?: PromiseOrValue<BytesLike> | null, a?: null): AddrChangedEventFilter$3;
        AddrChanged(node?: PromiseOrValue<BytesLike> | null, a?: null): AddrChangedEventFilter$3;
        "AddressChanged(bytes32,uint256,bytes)"(node?: PromiseOrValue<BytesLike> | null, coinType?: null, newAddress?: null): AddressChangedEventFilter$3;
        AddressChanged(node?: PromiseOrValue<BytesLike> | null, coinType?: null, newAddress?: null): AddressChangedEventFilter$3;
    };
    estimateGas: {
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ContentHashResolverInterface extends utils.Interface {
    functions: {
        "contenthash(bytes32)": FunctionFragment;
        "setContenthash(bytes32,bytes)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "contenthash" | "setContenthash" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "contenthash", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setContenthash", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "contenthash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setContenthash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "ContenthashChanged(bytes32,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ContenthashChanged"): EventFragment;
}
interface ContenthashChangedEventObject$2 {
    node: string;
    hash: string;
}
type ContenthashChangedEvent$2 = TypedEvent<[
    string,
    string
], ContenthashChangedEventObject$2>;
type ContenthashChangedEventFilter$2 = TypedEventFilter<ContenthashChangedEvent$2>;
interface ContentHashResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ContentHashResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "ContenthashChanged(bytes32,bytes)"(node?: PromiseOrValue<BytesLike> | null, hash?: null): ContenthashChangedEventFilter$2;
        ContenthashChanged(node?: PromiseOrValue<BytesLike> | null, hash?: null): ContenthashChangedEventFilter$2;
    };
    estimateGas: {
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface DNSResolverInterface extends utils.Interface {
    functions: {
        "clearDNSZone(bytes32)": FunctionFragment;
        "dnsRecord(bytes32,bytes32,uint16)": FunctionFragment;
        "hasDNSRecords(bytes32,bytes32)": FunctionFragment;
        "setDNSRecords(bytes32,bytes)": FunctionFragment;
        "setZonehash(bytes32,bytes)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "zonehash(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "clearDNSZone" | "dnsRecord" | "hasDNSRecords" | "setDNSRecords" | "setZonehash" | "supportsInterface" | "zonehash"): FunctionFragment;
    encodeFunctionData(functionFragment: "clearDNSZone", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "dnsRecord", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "hasDNSRecords", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setDNSRecords", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setZonehash", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "zonehash", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "clearDNSZone", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dnsRecord", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasDNSRecords", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDNSRecords", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setZonehash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "zonehash", data: BytesLike): Result;
    events: {
        "DNSRecordChanged(bytes32,bytes,uint16,bytes)": EventFragment;
        "DNSRecordDeleted(bytes32,bytes,uint16)": EventFragment;
        "DNSZoneCleared(bytes32)": EventFragment;
        "DNSZonehashChanged(bytes32,bytes,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DNSRecordChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSRecordDeleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSZoneCleared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSZonehashChanged"): EventFragment;
}
interface DNSRecordChangedEventObject$2 {
    node: string;
    name: string;
    resource: number;
    record: string;
}
type DNSRecordChangedEvent$2 = TypedEvent<[
    string,
    string,
    number,
    string
], DNSRecordChangedEventObject$2>;
type DNSRecordChangedEventFilter$2 = TypedEventFilter<DNSRecordChangedEvent$2>;
interface DNSRecordDeletedEventObject$2 {
    node: string;
    name: string;
    resource: number;
}
type DNSRecordDeletedEvent$2 = TypedEvent<[
    string,
    string,
    number
], DNSRecordDeletedEventObject$2>;
type DNSRecordDeletedEventFilter$2 = TypedEventFilter<DNSRecordDeletedEvent$2>;
interface DNSZoneClearedEventObject$2 {
    node: string;
}
type DNSZoneClearedEvent$2 = TypedEvent<[
    string
], DNSZoneClearedEventObject$2>;
type DNSZoneClearedEventFilter$2 = TypedEventFilter<DNSZoneClearedEvent$2>;
interface DNSZonehashChangedEventObject$2 {
    node: string;
    lastzonehash: string;
    zonehash: string;
}
type DNSZonehashChangedEvent$2 = TypedEvent<[
    string,
    string,
    string
], DNSZonehashChangedEventObject$2>;
type DNSZonehashChangedEventFilter$2 = TypedEventFilter<DNSZonehashChangedEvent$2>;
interface DNSResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DNSResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        clearDNSZone(node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        hasDNSRecords(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        setDNSRecords(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setZonehash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
    };
    clearDNSZone(node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    hasDNSRecords(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    setDNSRecords(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setZonehash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        clearDNSZone(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        hasDNSRecords(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        setDNSRecords(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setZonehash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "DNSRecordChanged(bytes32,bytes,uint16,bytes)"(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null, record?: null): DNSRecordChangedEventFilter$2;
        DNSRecordChanged(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null, record?: null): DNSRecordChangedEventFilter$2;
        "DNSRecordDeleted(bytes32,bytes,uint16)"(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null): DNSRecordDeletedEventFilter$2;
        DNSRecordDeleted(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null): DNSRecordDeletedEventFilter$2;
        "DNSZoneCleared(bytes32)"(node?: PromiseOrValue<BytesLike> | null): DNSZoneClearedEventFilter$2;
        DNSZoneCleared(node?: PromiseOrValue<BytesLike> | null): DNSZoneClearedEventFilter$2;
        "DNSZonehashChanged(bytes32,bytes,bytes)"(node?: PromiseOrValue<BytesLike> | null, lastzonehash?: null, zonehash?: null): DNSZonehashChangedEventFilter$2;
        DNSZonehashChanged(node?: PromiseOrValue<BytesLike> | null, lastzonehash?: null, zonehash?: null): DNSZonehashChangedEventFilter$2;
    };
    estimateGas: {
        clearDNSZone(node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hasDNSRecords(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        setDNSRecords(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setZonehash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        clearDNSZone(node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasDNSRecords(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDNSRecords(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setZonehash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface IABIResolverInterface extends utils.Interface {
    functions: {
        "ABI(bytes32,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ABI"): FunctionFragment;
    encodeFunctionData(functionFragment: "ABI", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "ABI", data: BytesLike): Result;
    events: {
        "ABIChanged(bytes32,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ABIChanged"): EventFragment;
}
interface ABIChangedEventObject$1 {
    node: string;
    contentType: BigNumber;
}
type ABIChangedEvent$1 = TypedEvent<[
    string,
    BigNumber
], ABIChangedEventObject$1>;
type ABIChangedEventFilter$1 = TypedEventFilter<ABIChangedEvent$1>;
interface IABIResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IABIResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
    };
    ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
    callStatic: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
    };
    filters: {
        "ABIChanged(bytes32,uint256)"(node?: PromiseOrValue<BytesLike> | null, contentType?: PromiseOrValue<BigNumberish> | null): ABIChangedEventFilter$1;
        ABIChanged(node?: PromiseOrValue<BytesLike> | null, contentType?: PromiseOrValue<BigNumberish> | null): ABIChangedEventFilter$1;
    };
    estimateGas: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface IAddrResolverInterface extends utils.Interface {
    functions: {
        "addr(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addr"): FunctionFragment;
    encodeFunctionData(functionFragment: "addr", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
    events: {
        "AddrChanged(bytes32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddrChanged"): EventFragment;
}
interface AddrChangedEventObject$2 {
    node: string;
    a: string;
}
type AddrChangedEvent$2 = TypedEvent<[
    string,
    string
], AddrChangedEventObject$2>;
type AddrChangedEventFilter$2 = TypedEventFilter<AddrChangedEvent$2>;
interface IAddrResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IAddrResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addr(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
    };
    addr(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        addr(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "AddrChanged(bytes32,address)"(node?: PromiseOrValue<BytesLike> | null, a?: null): AddrChangedEventFilter$2;
        AddrChanged(node?: PromiseOrValue<BytesLike> | null, a?: null): AddrChangedEventFilter$2;
    };
    estimateGas: {
        addr(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        addr(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface IAddressResolverInterface extends utils.Interface {
    functions: {
        "addr(bytes32,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addr"): FunctionFragment;
    encodeFunctionData(functionFragment: "addr", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
    events: {
        "AddressChanged(bytes32,uint256,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddressChanged"): EventFragment;
}
interface AddressChangedEventObject$2 {
    node: string;
    coinType: BigNumber;
    newAddress: string;
}
type AddressChangedEvent$2 = TypedEvent<[
    string,
    BigNumber,
    string
], AddressChangedEventObject$2>;
type AddressChangedEventFilter$2 = TypedEventFilter<AddressChangedEvent$2>;
interface IAddressResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IAddressResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addr(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
    };
    addr(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        addr(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "AddressChanged(bytes32,uint256,bytes)"(node?: PromiseOrValue<BytesLike> | null, coinType?: null, newAddress?: null): AddressChangedEventFilter$2;
        AddressChanged(node?: PromiseOrValue<BytesLike> | null, coinType?: null, newAddress?: null): AddressChangedEventFilter$2;
    };
    estimateGas: {
        addr(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        addr(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface IContentHashResolverInterface extends utils.Interface {
    functions: {
        "contenthash(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "contenthash"): FunctionFragment;
    encodeFunctionData(functionFragment: "contenthash", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "contenthash", data: BytesLike): Result;
    events: {
        "ContenthashChanged(bytes32,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ContenthashChanged"): EventFragment;
}
interface ContenthashChangedEventObject$1 {
    node: string;
    hash: string;
}
type ContenthashChangedEvent$1 = TypedEvent<[
    string,
    string
], ContenthashChangedEventObject$1>;
type ContenthashChangedEventFilter$1 = TypedEventFilter<ContenthashChangedEvent$1>;
interface IContentHashResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IContentHashResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
    };
    contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ContenthashChanged(bytes32,bytes)"(node?: PromiseOrValue<BytesLike> | null, hash?: null): ContenthashChangedEventFilter$1;
        ContenthashChanged(node?: PromiseOrValue<BytesLike> | null, hash?: null): ContenthashChangedEventFilter$1;
    };
    estimateGas: {
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface IDNSRecordResolverInterface extends utils.Interface {
    functions: {
        "dnsRecord(bytes32,bytes32,uint16)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "dnsRecord"): FunctionFragment;
    encodeFunctionData(functionFragment: "dnsRecord", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "dnsRecord", data: BytesLike): Result;
    events: {
        "DNSRecordChanged(bytes32,bytes,uint16,bytes)": EventFragment;
        "DNSRecordDeleted(bytes32,bytes,uint16)": EventFragment;
        "DNSZoneCleared(bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DNSRecordChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSRecordDeleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSZoneCleared"): EventFragment;
}
interface DNSRecordChangedEventObject$1 {
    node: string;
    name: string;
    resource: number;
    record: string;
}
type DNSRecordChangedEvent$1 = TypedEvent<[
    string,
    string,
    number,
    string
], DNSRecordChangedEventObject$1>;
type DNSRecordChangedEventFilter$1 = TypedEventFilter<DNSRecordChangedEvent$1>;
interface DNSRecordDeletedEventObject$1 {
    node: string;
    name: string;
    resource: number;
}
type DNSRecordDeletedEvent$1 = TypedEvent<[
    string,
    string,
    number
], DNSRecordDeletedEventObject$1>;
type DNSRecordDeletedEventFilter$1 = TypedEventFilter<DNSRecordDeletedEvent$1>;
interface DNSZoneClearedEventObject$1 {
    node: string;
}
type DNSZoneClearedEvent$1 = TypedEvent<[
    string
], DNSZoneClearedEventObject$1>;
type DNSZoneClearedEventFilter$1 = TypedEventFilter<DNSZoneClearedEvent$1>;
interface IDNSRecordResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IDNSRecordResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
    };
    dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "DNSRecordChanged(bytes32,bytes,uint16,bytes)"(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null, record?: null): DNSRecordChangedEventFilter$1;
        DNSRecordChanged(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null, record?: null): DNSRecordChangedEventFilter$1;
        "DNSRecordDeleted(bytes32,bytes,uint16)"(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null): DNSRecordDeletedEventFilter$1;
        DNSRecordDeleted(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null): DNSRecordDeletedEventFilter$1;
        "DNSZoneCleared(bytes32)"(node?: PromiseOrValue<BytesLike> | null): DNSZoneClearedEventFilter$1;
        DNSZoneCleared(node?: PromiseOrValue<BytesLike> | null): DNSZoneClearedEventFilter$1;
    };
    estimateGas: {
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface IDNSZoneResolverInterface extends utils.Interface {
    functions: {
        "zonehash(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "zonehash"): FunctionFragment;
    encodeFunctionData(functionFragment: "zonehash", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "zonehash", data: BytesLike): Result;
    events: {
        "DNSZonehashChanged(bytes32,bytes,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DNSZonehashChanged"): EventFragment;
}
interface DNSZonehashChangedEventObject$1 {
    node: string;
    lastzonehash: string;
    zonehash: string;
}
type DNSZonehashChangedEvent$1 = TypedEvent<[
    string,
    string,
    string
], DNSZonehashChangedEventObject$1>;
type DNSZonehashChangedEventFilter$1 = TypedEventFilter<DNSZonehashChangedEvent$1>;
interface IDNSZoneResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IDNSZoneResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
    };
    zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "DNSZonehashChanged(bytes32,bytes,bytes)"(node?: PromiseOrValue<BytesLike> | null, lastzonehash?: null, zonehash?: null): DNSZonehashChangedEventFilter$1;
        DNSZonehashChanged(node?: PromiseOrValue<BytesLike> | null, lastzonehash?: null, zonehash?: null): DNSZonehashChangedEventFilter$1;
    };
    estimateGas: {
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface IInterfaceResolverInterface extends utils.Interface {
    functions: {
        "interfaceImplementer(bytes32,bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "interfaceImplementer"): FunctionFragment;
    encodeFunctionData(functionFragment: "interfaceImplementer", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "interfaceImplementer", data: BytesLike): Result;
    events: {
        "InterfaceChanged(bytes32,bytes4,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InterfaceChanged"): EventFragment;
}
interface InterfaceChangedEventObject$2 {
    node: string;
    interfaceID: string;
    implementer: string;
}
type InterfaceChangedEvent$2 = TypedEvent<[
    string,
    string,
    string
], InterfaceChangedEventObject$2>;
type InterfaceChangedEventFilter$2 = TypedEventFilter<InterfaceChangedEvent$2>;
interface IInterfaceResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IInterfaceResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
    };
    interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "InterfaceChanged(bytes32,bytes4,address)"(node?: PromiseOrValue<BytesLike> | null, interfaceID?: PromiseOrValue<BytesLike> | null, implementer?: null): InterfaceChangedEventFilter$2;
        InterfaceChanged(node?: PromiseOrValue<BytesLike> | null, interfaceID?: PromiseOrValue<BytesLike> | null, implementer?: null): InterfaceChangedEventFilter$2;
    };
    estimateGas: {
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface INameResolverInterface extends utils.Interface {
    functions: {
        "name(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "name"): FunctionFragment;
    encodeFunctionData(functionFragment: "name", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    events: {
        "NameChanged(bytes32,string)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "NameChanged"): EventFragment;
}
interface NameChangedEventObject$2 {
    node: string;
    name: string;
}
type NameChangedEvent$2 = TypedEvent<[
    string,
    string
], NameChangedEventObject$2>;
type NameChangedEventFilter$2 = TypedEventFilter<NameChangedEvent$2>;
interface INameResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: INameResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
    };
    name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "NameChanged(bytes32,string)"(node?: PromiseOrValue<BytesLike> | null, name?: null): NameChangedEventFilter$2;
        NameChanged(node?: PromiseOrValue<BytesLike> | null, name?: null): NameChangedEventFilter$2;
    };
    estimateGas: {
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface IPubkeyResolverInterface extends utils.Interface {
    functions: {
        "pubkey(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "pubkey"): FunctionFragment;
    encodeFunctionData(functionFragment: "pubkey", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "pubkey", data: BytesLike): Result;
    events: {
        "PubkeyChanged(bytes32,bytes32,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "PubkeyChanged"): EventFragment;
}
interface PubkeyChangedEventObject$2 {
    node: string;
    x: string;
    y: string;
}
type PubkeyChangedEvent$2 = TypedEvent<[
    string,
    string,
    string
], PubkeyChangedEventObject$2>;
type PubkeyChangedEventFilter$2 = TypedEventFilter<PubkeyChangedEvent$2>;
interface IPubkeyResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IPubkeyResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            x: string;
            y: string;
        }>;
    };
    pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
        x: string;
        y: string;
    }>;
    callStatic: {
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            x: string;
            y: string;
        }>;
    };
    filters: {
        "PubkeyChanged(bytes32,bytes32,bytes32)"(node?: PromiseOrValue<BytesLike> | null, x?: null, y?: null): PubkeyChangedEventFilter$2;
        PubkeyChanged(node?: PromiseOrValue<BytesLike> | null, x?: null, y?: null): PubkeyChangedEventFilter$2;
    };
    estimateGas: {
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ITextResolverInterface extends utils.Interface {
    functions: {
        "text(bytes32,string)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "text"): FunctionFragment;
    encodeFunctionData(functionFragment: "text", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "text", data: BytesLike): Result;
    events: {
        "TextChanged(bytes32,string,string)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "TextChanged"): EventFragment;
}
interface TextChangedEventObject$2 {
    node: string;
    indexedKey: string;
    key: string;
}
type TextChangedEvent$2 = TypedEvent<[
    string,
    string,
    string
], TextChangedEventObject$2>;
type TextChangedEventFilter$2 = TypedEventFilter<TextChangedEvent$2>;
interface ITextResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ITextResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
    };
    text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "TextChanged(bytes32,string,string)"(node?: PromiseOrValue<BytesLike> | null, indexedKey?: PromiseOrValue<string> | null, key?: null): TextChangedEventFilter$2;
        TextChanged(node?: PromiseOrValue<BytesLike> | null, indexedKey?: PromiseOrValue<string> | null, key?: null): TextChangedEventFilter$2;
    };
    estimateGas: {
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface InterfaceResolverInterface extends utils.Interface {
    functions: {
        "addr(bytes32)": FunctionFragment;
        "addr(bytes32,uint256)": FunctionFragment;
        "interfaceImplementer(bytes32,bytes4)": FunctionFragment;
        "setAddr(bytes32,uint256,bytes)": FunctionFragment;
        "setAddr(bytes32,address)": FunctionFragment;
        "setInterface(bytes32,bytes4,address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addr(bytes32)" | "addr(bytes32,uint256)" | "interfaceImplementer" | "setAddr(bytes32,uint256,bytes)" | "setAddr(bytes32,address)" | "setInterface" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "addr(bytes32)", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "addr(bytes32,uint256)", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "interfaceImplementer", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setAddr(bytes32,uint256,bytes)", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setAddr(bytes32,address)", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setInterface", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "addr(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addr(bytes32,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "interfaceImplementer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddr(bytes32,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddr(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "AddrChanged(bytes32,address)": EventFragment;
        "AddressChanged(bytes32,uint256,bytes)": EventFragment;
        "InterfaceChanged(bytes32,bytes4,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddrChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AddressChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InterfaceChanged"): EventFragment;
}
interface AddrChangedEventObject$1 {
    node: string;
    a: string;
}
type AddrChangedEvent$1 = TypedEvent<[
    string,
    string
], AddrChangedEventObject$1>;
type AddrChangedEventFilter$1 = TypedEventFilter<AddrChangedEvent$1>;
interface AddressChangedEventObject$1 {
    node: string;
    coinType: BigNumber;
    newAddress: string;
}
type AddressChangedEvent$1 = TypedEvent<[
    string,
    BigNumber,
    string
], AddressChangedEventObject$1>;
type AddressChangedEventFilter$1 = TypedEventFilter<AddressChangedEvent$1>;
interface InterfaceChangedEventObject$1 {
    node: string;
    interfaceID: string;
    implementer: string;
}
type InterfaceChangedEvent$1 = TypedEvent<[
    string,
    string,
    string
], InterfaceChangedEventObject$1>;
type InterfaceChangedEventFilter$1 = TypedEventFilter<InterfaceChangedEvent$1>;
interface InterfaceResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: InterfaceResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "AddrChanged(bytes32,address)"(node?: PromiseOrValue<BytesLike> | null, a?: null): AddrChangedEventFilter$1;
        AddrChanged(node?: PromiseOrValue<BytesLike> | null, a?: null): AddrChangedEventFilter$1;
        "AddressChanged(bytes32,uint256,bytes)"(node?: PromiseOrValue<BytesLike> | null, coinType?: null, newAddress?: null): AddressChangedEventFilter$1;
        AddressChanged(node?: PromiseOrValue<BytesLike> | null, coinType?: null, newAddress?: null): AddressChangedEventFilter$1;
        "InterfaceChanged(bytes32,bytes4,address)"(node?: PromiseOrValue<BytesLike> | null, interfaceID?: PromiseOrValue<BytesLike> | null, implementer?: null): InterfaceChangedEventFilter$1;
        InterfaceChanged(node?: PromiseOrValue<BytesLike> | null, interfaceID?: PromiseOrValue<BytesLike> | null, implementer?: null): InterfaceChangedEventFilter$1;
    };
    estimateGas: {
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, a: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface NameResolverInterface extends utils.Interface {
    functions: {
        "name(bytes32)": FunctionFragment;
        "setName(bytes32,string)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "name" | "setName" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "name", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setName", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "NameChanged(bytes32,string)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "NameChanged"): EventFragment;
}
interface NameChangedEventObject$1 {
    node: string;
    name: string;
}
type NameChangedEvent$1 = TypedEvent<[
    string,
    string
], NameChangedEventObject$1>;
type NameChangedEventFilter$1 = TypedEventFilter<NameChangedEvent$1>;
interface NameResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: NameResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        setName(node: PromiseOrValue<BytesLike>, newName: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    setName(node: PromiseOrValue<BytesLike>, newName: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        setName(node: PromiseOrValue<BytesLike>, newName: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "NameChanged(bytes32,string)"(node?: PromiseOrValue<BytesLike> | null, name?: null): NameChangedEventFilter$1;
        NameChanged(node?: PromiseOrValue<BytesLike> | null, name?: null): NameChangedEventFilter$1;
    };
    estimateGas: {
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        setName(node: PromiseOrValue<BytesLike>, newName: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setName(node: PromiseOrValue<BytesLike>, newName: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface PubkeyResolverInterface extends utils.Interface {
    functions: {
        "pubkey(bytes32)": FunctionFragment;
        "setPubkey(bytes32,bytes32,bytes32)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "pubkey" | "setPubkey" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "pubkey", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setPubkey", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "pubkey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPubkey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "PubkeyChanged(bytes32,bytes32,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "PubkeyChanged"): EventFragment;
}
interface PubkeyChangedEventObject$1 {
    node: string;
    x: string;
    y: string;
}
type PubkeyChangedEvent$1 = TypedEvent<[
    string,
    string,
    string
], PubkeyChangedEventObject$1>;
type PubkeyChangedEventFilter$1 = TypedEventFilter<PubkeyChangedEvent$1>;
interface PubkeyResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PubkeyResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            x: string;
            y: string;
        }>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
        x: string;
        y: string;
    }>;
    setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            x: string;
            y: string;
        }>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "PubkeyChanged(bytes32,bytes32,bytes32)"(node?: PromiseOrValue<BytesLike> | null, x?: null, y?: null): PubkeyChangedEventFilter$1;
        PubkeyChanged(node?: PromiseOrValue<BytesLike> | null, x?: null, y?: null): PubkeyChangedEventFilter$1;
    };
    estimateGas: {
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface TextResolverInterface extends utils.Interface {
    functions: {
        "setText(bytes32,string,string)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "text(bytes32,string)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "setText" | "supportsInterface" | "text"): FunctionFragment;
    encodeFunctionData(functionFragment: "setText", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "text", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "text", data: BytesLike): Result;
    events: {
        "TextChanged(bytes32,string,string)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "TextChanged"): EventFragment;
}
interface TextChangedEventObject$1 {
    node: string;
    indexedKey: string;
    key: string;
}
type TextChangedEvent$1 = TypedEvent<[
    string,
    string,
    string
], TextChangedEventObject$1>;
type TextChangedEventFilter$1 = TypedEventFilter<TextChangedEvent$1>;
interface TextResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TextResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
    };
    setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "TextChanged(bytes32,string,string)"(node?: PromiseOrValue<BytesLike> | null, indexedKey?: PromiseOrValue<string> | null, key?: null): TextChangedEventFilter$1;
        TextChanged(node?: PromiseOrValue<BytesLike> | null, indexedKey?: PromiseOrValue<string> | null, key?: null): TextChangedEventFilter$1;
    };
    estimateGas: {
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$18_ABIResolver = ABIResolver;
type index$18_AddrResolver = AddrResolver;
type index$18_ContentHashResolver = ContentHashResolver;
type index$18_DNSResolver = DNSResolver;
type index$18_IABIResolver = IABIResolver;
type index$18_IAddrResolver = IAddrResolver;
type index$18_IAddressResolver = IAddressResolver;
type index$18_IContentHashResolver = IContentHashResolver;
type index$18_IDNSRecordResolver = IDNSRecordResolver;
type index$18_IDNSZoneResolver = IDNSZoneResolver;
type index$18_IInterfaceResolver = IInterfaceResolver;
type index$18_INameResolver = INameResolver;
type index$18_IPubkeyResolver = IPubkeyResolver;
type index$18_ITextResolver = ITextResolver;
type index$18_InterfaceResolver = InterfaceResolver;
type index$18_NameResolver = NameResolver;
type index$18_PubkeyResolver = PubkeyResolver;
type index$18_TextResolver = TextResolver;
declare namespace index$18 {
  export {
    index$18_ABIResolver as ABIResolver,
    index$18_AddrResolver as AddrResolver,
    index$18_ContentHashResolver as ContentHashResolver,
    index$18_DNSResolver as DNSResolver,
    index$18_IABIResolver as IABIResolver,
    index$18_IAddrResolver as IAddrResolver,
    index$18_IAddressResolver as IAddressResolver,
    index$18_IContentHashResolver as IContentHashResolver,
    index$18_IDNSRecordResolver as IDNSRecordResolver,
    index$18_IDNSZoneResolver as IDNSZoneResolver,
    index$18_IInterfaceResolver as IInterfaceResolver,
    index$18_INameResolver as INameResolver,
    index$18_IPubkeyResolver as IPubkeyResolver,
    index$18_ITextResolver as ITextResolver,
    index$18_InterfaceResolver as InterfaceResolver,
    index$18_NameResolver as NameResolver,
    index$18_PubkeyResolver as PubkeyResolver,
    index$18_TextResolver as TextResolver,
  };
}

interface IMulticallableInterface extends utils.Interface {
    functions: {
        "multicall(bytes[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "multicall"): FunctionFragment;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    events: {};
}
interface IMulticallable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMulticallableInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
    };
    filters: {};
    estimateGas: {
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface ISupportsInterfaceInterface extends utils.Interface {
    functions: {
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {};
}
interface ISupportsInterface extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ISupportsInterfaceInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface MulticallableInterface extends utils.Interface {
    functions: {
        "multicall(bytes[])": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "multicall" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {};
}
interface Multicallable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MulticallableInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ResolverInterface extends utils.Interface {
    functions: {
        "ABI(bytes32,uint256)": FunctionFragment;
        "addr(bytes32)": FunctionFragment;
        "addr(bytes32,uint256)": FunctionFragment;
        "content(bytes32)": FunctionFragment;
        "contenthash(bytes32)": FunctionFragment;
        "dnsRecord(bytes32,bytes32,uint16)": FunctionFragment;
        "interfaceImplementer(bytes32,bytes4)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "multihash(bytes32)": FunctionFragment;
        "name(bytes32)": FunctionFragment;
        "pubkey(bytes32)": FunctionFragment;
        "setABI(bytes32,uint256,bytes)": FunctionFragment;
        "setAddr(bytes32,uint256,bytes)": FunctionFragment;
        "setAddr(bytes32,address)": FunctionFragment;
        "setContent(bytes32,bytes32)": FunctionFragment;
        "setContenthash(bytes32,bytes)": FunctionFragment;
        "setDnsrr(bytes32,bytes)": FunctionFragment;
        "setInterface(bytes32,bytes4,address)": FunctionFragment;
        "setMultihash(bytes32,bytes)": FunctionFragment;
        "setName(bytes32,string)": FunctionFragment;
        "setPubkey(bytes32,bytes32,bytes32)": FunctionFragment;
        "setText(bytes32,string,string)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "text(bytes32,string)": FunctionFragment;
        "zonehash(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ABI" | "addr(bytes32)" | "addr(bytes32,uint256)" | "content" | "contenthash" | "dnsRecord" | "interfaceImplementer" | "multicall" | "multihash" | "name" | "pubkey" | "setABI" | "setAddr(bytes32,uint256,bytes)" | "setAddr(bytes32,address)" | "setContent" | "setContenthash" | "setDnsrr" | "setInterface" | "setMultihash" | "setName" | "setPubkey" | "setText" | "supportsInterface" | "text" | "zonehash"): FunctionFragment;
    encodeFunctionData(functionFragment: "ABI", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "addr(bytes32)", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "addr(bytes32,uint256)", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "content", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "contenthash", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "dnsRecord", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "interfaceImplementer", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "multihash", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "name", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "pubkey", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setABI", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setAddr(bytes32,uint256,bytes)", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setAddr(bytes32,address)", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setContent", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setContenthash", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setDnsrr", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setInterface", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "setMultihash", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setName", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPubkey", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setText", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "text", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "zonehash", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "ABI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addr(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addr(bytes32,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "content", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "contenthash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dnsRecord", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "interfaceImplementer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multihash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pubkey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setABI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddr(bytes32,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddr(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setContent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setContenthash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDnsrr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMultihash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPubkey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "text", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "zonehash", data: BytesLike): Result;
    events: {
        "ABIChanged(bytes32,uint256)": EventFragment;
        "AddrChanged(bytes32,address)": EventFragment;
        "AddressChanged(bytes32,uint256,bytes)": EventFragment;
        "ContentChanged(bytes32,bytes32)": EventFragment;
        "ContenthashChanged(bytes32,bytes)": EventFragment;
        "DNSRecordChanged(bytes32,bytes,uint16,bytes)": EventFragment;
        "DNSRecordDeleted(bytes32,bytes,uint16)": EventFragment;
        "DNSZoneCleared(bytes32)": EventFragment;
        "DNSZonehashChanged(bytes32,bytes,bytes)": EventFragment;
        "InterfaceChanged(bytes32,bytes4,address)": EventFragment;
        "NameChanged(bytes32,string)": EventFragment;
        "PubkeyChanged(bytes32,bytes32,bytes32)": EventFragment;
        "TextChanged(bytes32,string,string)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ABIChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AddrChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AddressChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ContentChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ContenthashChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSRecordChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSRecordDeleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSZoneCleared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DNSZonehashChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InterfaceChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NameChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PubkeyChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TextChanged"): EventFragment;
}
interface ABIChangedEventObject {
    node: string;
    contentType: BigNumber;
}
type ABIChangedEvent = TypedEvent<[
    string,
    BigNumber
], ABIChangedEventObject>;
type ABIChangedEventFilter = TypedEventFilter<ABIChangedEvent>;
interface AddrChangedEventObject {
    node: string;
    a: string;
}
type AddrChangedEvent = TypedEvent<[
    string,
    string
], AddrChangedEventObject>;
type AddrChangedEventFilter = TypedEventFilter<AddrChangedEvent>;
interface AddressChangedEventObject {
    node: string;
    coinType: BigNumber;
    newAddress: string;
}
type AddressChangedEvent = TypedEvent<[
    string,
    BigNumber,
    string
], AddressChangedEventObject>;
type AddressChangedEventFilter = TypedEventFilter<AddressChangedEvent>;
interface ContentChangedEventObject {
    node: string;
    hash: string;
}
type ContentChangedEvent = TypedEvent<[
    string,
    string
], ContentChangedEventObject>;
type ContentChangedEventFilter = TypedEventFilter<ContentChangedEvent>;
interface ContenthashChangedEventObject {
    node: string;
    hash: string;
}
type ContenthashChangedEvent = TypedEvent<[
    string,
    string
], ContenthashChangedEventObject>;
type ContenthashChangedEventFilter = TypedEventFilter<ContenthashChangedEvent>;
interface DNSRecordChangedEventObject {
    node: string;
    name: string;
    resource: number;
    record: string;
}
type DNSRecordChangedEvent = TypedEvent<[
    string,
    string,
    number,
    string
], DNSRecordChangedEventObject>;
type DNSRecordChangedEventFilter = TypedEventFilter<DNSRecordChangedEvent>;
interface DNSRecordDeletedEventObject {
    node: string;
    name: string;
    resource: number;
}
type DNSRecordDeletedEvent = TypedEvent<[
    string,
    string,
    number
], DNSRecordDeletedEventObject>;
type DNSRecordDeletedEventFilter = TypedEventFilter<DNSRecordDeletedEvent>;
interface DNSZoneClearedEventObject {
    node: string;
}
type DNSZoneClearedEvent = TypedEvent<[
    string
], DNSZoneClearedEventObject>;
type DNSZoneClearedEventFilter = TypedEventFilter<DNSZoneClearedEvent>;
interface DNSZonehashChangedEventObject {
    node: string;
    lastzonehash: string;
    zonehash: string;
}
type DNSZonehashChangedEvent = TypedEvent<[
    string,
    string,
    string
], DNSZonehashChangedEventObject>;
type DNSZonehashChangedEventFilter = TypedEventFilter<DNSZonehashChangedEvent>;
interface InterfaceChangedEventObject {
    node: string;
    interfaceID: string;
    implementer: string;
}
type InterfaceChangedEvent = TypedEvent<[
    string,
    string,
    string
], InterfaceChangedEventObject>;
type InterfaceChangedEventFilter = TypedEventFilter<InterfaceChangedEvent>;
interface NameChangedEventObject {
    node: string;
    name: string;
}
type NameChangedEvent = TypedEvent<[
    string,
    string
], NameChangedEventObject>;
type NameChangedEventFilter = TypedEventFilter<NameChangedEvent>;
interface PubkeyChangedEventObject {
    node: string;
    x: string;
    y: string;
}
type PubkeyChangedEvent = TypedEvent<[
    string,
    string,
    string
], PubkeyChangedEventObject>;
type PubkeyChangedEventFilter = TypedEventFilter<PubkeyChangedEvent>;
interface TextChangedEventObject {
    node: string;
    indexedKey: string;
    key: string;
}
type TextChangedEvent = TypedEvent<[
    string,
    string,
    string
], TextChangedEventObject>;
type TextChangedEventFilter = TypedEventFilter<TextChangedEvent>;
interface Resolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        content(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        multihash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            x: string;
            y: string;
        }>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, addr: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setContent(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDnsrr(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMultihash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setName(node: PromiseOrValue<BytesLike>, _name: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
    };
    ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
    "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    content(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    multihash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
        x: string;
        y: string;
    }>;
    setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, addr: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setContent(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDnsrr(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMultihash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setName(node: PromiseOrValue<BytesLike>, _name: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, string]>;
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        content(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        multihash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            x: string;
            y: string;
        }>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setContent(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDnsrr(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setMultihash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setName(node: PromiseOrValue<BytesLike>, _name: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ABIChanged(bytes32,uint256)"(node?: PromiseOrValue<BytesLike> | null, contentType?: PromiseOrValue<BigNumberish> | null): ABIChangedEventFilter;
        ABIChanged(node?: PromiseOrValue<BytesLike> | null, contentType?: PromiseOrValue<BigNumberish> | null): ABIChangedEventFilter;
        "AddrChanged(bytes32,address)"(node?: PromiseOrValue<BytesLike> | null, a?: null): AddrChangedEventFilter;
        AddrChanged(node?: PromiseOrValue<BytesLike> | null, a?: null): AddrChangedEventFilter;
        "AddressChanged(bytes32,uint256,bytes)"(node?: PromiseOrValue<BytesLike> | null, coinType?: null, newAddress?: null): AddressChangedEventFilter;
        AddressChanged(node?: PromiseOrValue<BytesLike> | null, coinType?: null, newAddress?: null): AddressChangedEventFilter;
        "ContentChanged(bytes32,bytes32)"(node?: PromiseOrValue<BytesLike> | null, hash?: null): ContentChangedEventFilter;
        ContentChanged(node?: PromiseOrValue<BytesLike> | null, hash?: null): ContentChangedEventFilter;
        "ContenthashChanged(bytes32,bytes)"(node?: PromiseOrValue<BytesLike> | null, hash?: null): ContenthashChangedEventFilter;
        ContenthashChanged(node?: PromiseOrValue<BytesLike> | null, hash?: null): ContenthashChangedEventFilter;
        "DNSRecordChanged(bytes32,bytes,uint16,bytes)"(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null, record?: null): DNSRecordChangedEventFilter;
        DNSRecordChanged(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null, record?: null): DNSRecordChangedEventFilter;
        "DNSRecordDeleted(bytes32,bytes,uint16)"(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null): DNSRecordDeletedEventFilter;
        DNSRecordDeleted(node?: PromiseOrValue<BytesLike> | null, name?: null, resource?: null): DNSRecordDeletedEventFilter;
        "DNSZoneCleared(bytes32)"(node?: PromiseOrValue<BytesLike> | null): DNSZoneClearedEventFilter;
        DNSZoneCleared(node?: PromiseOrValue<BytesLike> | null): DNSZoneClearedEventFilter;
        "DNSZonehashChanged(bytes32,bytes,bytes)"(node?: PromiseOrValue<BytesLike> | null, lastzonehash?: null, zonehash?: null): DNSZonehashChangedEventFilter;
        DNSZonehashChanged(node?: PromiseOrValue<BytesLike> | null, lastzonehash?: null, zonehash?: null): DNSZonehashChangedEventFilter;
        "InterfaceChanged(bytes32,bytes4,address)"(node?: PromiseOrValue<BytesLike> | null, interfaceID?: PromiseOrValue<BytesLike> | null, implementer?: null): InterfaceChangedEventFilter;
        InterfaceChanged(node?: PromiseOrValue<BytesLike> | null, interfaceID?: PromiseOrValue<BytesLike> | null, implementer?: null): InterfaceChangedEventFilter;
        "NameChanged(bytes32,string)"(node?: PromiseOrValue<BytesLike> | null, name?: null): NameChangedEventFilter;
        NameChanged(node?: PromiseOrValue<BytesLike> | null, name?: null): NameChangedEventFilter;
        "PubkeyChanged(bytes32,bytes32,bytes32)"(node?: PromiseOrValue<BytesLike> | null, x?: null, y?: null): PubkeyChangedEventFilter;
        PubkeyChanged(node?: PromiseOrValue<BytesLike> | null, x?: null, y?: null): PubkeyChangedEventFilter;
        "TextChanged(bytes32,string,string)"(node?: PromiseOrValue<BytesLike> | null, indexedKey?: PromiseOrValue<string> | null, key?: null): TextChangedEventFilter;
        TextChanged(node?: PromiseOrValue<BytesLike> | null, indexedKey?: PromiseOrValue<string> | null, key?: null): TextChangedEventFilter;
    };
    estimateGas: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        content(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        multihash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, addr: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setContent(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDnsrr(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMultihash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setName(node: PromiseOrValue<BytesLike>, _name: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        ABI(node: PromiseOrValue<BytesLike>, contentTypes: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "addr(bytes32)"(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "addr(bytes32,uint256)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        content(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        contenthash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dnsRecord(node: PromiseOrValue<BytesLike>, name: PromiseOrValue<BytesLike>, resource: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        interfaceImplementer(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        multihash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        name(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pubkey(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setABI(node: PromiseOrValue<BytesLike>, contentType: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "setAddr(bytes32,uint256,bytes)"(node: PromiseOrValue<BytesLike>, coinType: PromiseOrValue<BigNumberish>, a: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "setAddr(bytes32,address)"(node: PromiseOrValue<BytesLike>, addr: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setContent(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setContenthash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDnsrr(node: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setInterface(node: PromiseOrValue<BytesLike>, interfaceID: PromiseOrValue<BytesLike>, implementer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMultihash(node: PromiseOrValue<BytesLike>, hash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setName(node: PromiseOrValue<BytesLike>, _name: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPubkey(node: PromiseOrValue<BytesLike>, x: PromiseOrValue<BytesLike>, y: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setText(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, value: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        text(node: PromiseOrValue<BytesLike>, key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        zonehash(node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ResolverBaseInterface extends utils.Interface {
    functions: {
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {};
}
interface ResolverBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ResolverBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface SupportsInterfaceInterface extends utils.Interface {
    functions: {
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {};
}
interface SupportsInterface extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SupportsInterfaceInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$17_IMulticallable = IMulticallable;
type index$17_ISupportsInterface = ISupportsInterface;
type index$17_Multicallable = Multicallable;
type index$17_Resolver = Resolver;
type index$17_ResolverBase = ResolverBase;
type index$17_SupportsInterface = SupportsInterface;
declare namespace index$17 {
  export {
    index$19 as publicResolverSol,
    index$18 as profiles,
    index$17_IMulticallable as IMulticallable,
    index$17_ISupportsInterface as ISupportsInterface,
    index$17_Multicallable as Multicallable,
    index$17_Resolver as Resolver,
    index$17_ResolverBase as ResolverBase,
    index$17_SupportsInterface as SupportsInterface,
  };
}

declare namespace index$16 {
  export {
    index$1a as registry,
    index$17 as resolvers,
  };
}

declare namespace index$15 {
  export {
    index$16 as contracts,
  };
}

declare namespace index$14 {
  export {
    index$15 as ensContracts,
  };
}

type ActionStruct = {
    to: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
};
type ActionStructOutput = [string, BigNumber, string] & {
    to: string;
    value: BigNumber;
    data: string;
};
declare namespace PermissionLib$f {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
    type SingleTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        who: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type SingleTargetPermissionStructOutput = [number, string, string] & {
        operation: number;
        who: string;
        permissionId: string;
    };
}
interface DAOInterface extends utils.Interface {
    functions: {
        "EXECUTE_PERMISSION_ID()": FunctionFragment;
        "REGISTER_STANDARD_CALLBACK_PERMISSION_ID()": FunctionFragment;
        "ROOT_PERMISSION_ID()": FunctionFragment;
        "SET_METADATA_PERMISSION_ID()": FunctionFragment;
        "SET_TRUSTED_FORWARDER_PERMISSION_ID()": FunctionFragment;
        "UPGRADE_DAO_PERMISSION_ID()": FunctionFragment;
        "VALIDATE_SIGNATURE_PERMISSION_ID()": FunctionFragment;
        "applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])": FunctionFragment;
        "applySingleTargetPermissions(address,(uint8,address,bytes32)[])": FunctionFragment;
        "daoURI()": FunctionFragment;
        "deposit(address,uint256,string)": FunctionFragment;
        "execute(bytes32,(address,uint256,bytes)[],uint256)": FunctionFragment;
        "getTrustedForwarder()": FunctionFragment;
        "grant(address,address,bytes32)": FunctionFragment;
        "grantWithCondition(address,address,bytes32,address)": FunctionFragment;
        "hasPermission(address,address,bytes32,bytes)": FunctionFragment;
        "initialize(bytes,address,address,string)": FunctionFragment;
        "initializeFrom(uint8[3],bytes)": FunctionFragment;
        "isGranted(address,address,bytes32,bytes)": FunctionFragment;
        "isValidSignature(bytes32,bytes)": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "registerStandardCallback(bytes4,bytes4,bytes4)": FunctionFragment;
        "revoke(address,address,bytes32)": FunctionFragment;
        "setDaoURI(string)": FunctionFragment;
        "setMetadata(bytes)": FunctionFragment;
        "setSignatureValidator(address)": FunctionFragment;
        "setTrustedForwarder(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "EXECUTE_PERMISSION_ID" | "REGISTER_STANDARD_CALLBACK_PERMISSION_ID" | "ROOT_PERMISSION_ID" | "SET_METADATA_PERMISSION_ID" | "SET_TRUSTED_FORWARDER_PERMISSION_ID" | "UPGRADE_DAO_PERMISSION_ID" | "VALIDATE_SIGNATURE_PERMISSION_ID" | "applyMultiTargetPermissions" | "applySingleTargetPermissions" | "daoURI" | "deposit" | "execute" | "getTrustedForwarder" | "grant" | "grantWithCondition" | "hasPermission" | "initialize" | "initializeFrom" | "isGranted" | "isValidSignature" | "protocolVersion" | "proxiableUUID" | "registerStandardCallback" | "revoke" | "setDaoURI" | "setMetadata" | "setSignatureValidator" | "setTrustedForwarder" | "supportsInterface" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "EXECUTE_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "ROOT_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "SET_METADATA_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "SET_TRUSTED_FORWARDER_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_DAO_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "VALIDATE_SIGNATURE_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "applyMultiTargetPermissions", values: [PermissionLib$f.MultiTargetPermissionStruct[]]): string;
    encodeFunctionData(functionFragment: "applySingleTargetPermissions", values: [
        PromiseOrValue<string>,
        PermissionLib$f.SingleTargetPermissionStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "daoURI", values?: undefined): string;
    encodeFunctionData(functionFragment: "deposit", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "execute", values: [
        PromiseOrValue<BytesLike>,
        ActionStruct[],
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getTrustedForwarder", values?: undefined): string;
    encodeFunctionData(functionFragment: "grant", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "grantWithCondition", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "hasPermission", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "initializeFrom", values: [
        [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ],
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "isGranted", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "isValidSignature", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "registerStandardCallback", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "revoke", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setDaoURI", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setMetadata", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setSignatureValidator", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTrustedForwarder", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "EXECUTE_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ROOT_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SET_METADATA_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SET_TRUSTED_FORWARDER_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_DAO_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VALIDATE_SIGNATURE_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applyMultiTargetPermissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applySingleTargetPermissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "daoURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantWithCondition", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasPermission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerStandardCallback", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDaoURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMetadata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSignatureValidator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "CallbackReceived(address,bytes4,bytes)": EventFragment;
        "Deposited(address,address,uint256,string)": EventFragment;
        "Executed(address,bytes32,tuple[],uint256,uint256,bytes[])": EventFragment;
        "Granted(bytes32,address,address,address,address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "MetadataSet(bytes)": EventFragment;
        "NativeTokenDeposited(address,uint256)": EventFragment;
        "NewURI(string)": EventFragment;
        "Revoked(bytes32,address,address,address)": EventFragment;
        "StandardCallbackRegistered(bytes4,bytes4,bytes4)": EventFragment;
        "TrustedForwarderSet(address)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CallbackReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Granted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetadataSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeTokenDeposited"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewURI"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StandardCallbackRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TrustedForwarderSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject$9 {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent$9 = TypedEvent<[
    string,
    string
], AdminChangedEventObject$9>;
type AdminChangedEventFilter$9 = TypedEventFilter<AdminChangedEvent$9>;
interface BeaconUpgradedEventObject$9 {
    beacon: string;
}
type BeaconUpgradedEvent$9 = TypedEvent<[
    string
], BeaconUpgradedEventObject$9>;
type BeaconUpgradedEventFilter$9 = TypedEventFilter<BeaconUpgradedEvent$9>;
interface CallbackReceivedEventObject$2 {
    sender: string;
    sig: string;
    data: string;
}
type CallbackReceivedEvent$2 = TypedEvent<[
    string,
    string,
    string
], CallbackReceivedEventObject$2>;
type CallbackReceivedEventFilter$2 = TypedEventFilter<CallbackReceivedEvent$2>;
interface DepositedEventObject {
    sender: string;
    token: string;
    amount: BigNumber;
    _reference: string;
}
type DepositedEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], DepositedEventObject>;
type DepositedEventFilter = TypedEventFilter<DepositedEvent>;
interface ExecutedEventObject {
    actor: string;
    callId: string;
    actions: ActionStructOutput[];
    allowFailureMap: BigNumber;
    failureMap: BigNumber;
    execResults: string[];
}
type ExecutedEvent = TypedEvent<[
    string,
    string,
    ActionStructOutput[],
    BigNumber,
    BigNumber,
    string[]
], ExecutedEventObject>;
type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;
interface GrantedEventObject$3 {
    permissionId: string;
    here: string;
    where: string;
    who: string;
    condition: string;
}
type GrantedEvent$3 = TypedEvent<[
    string,
    string,
    string,
    string,
    string
], GrantedEventObject$3>;
type GrantedEventFilter$3 = TypedEventFilter<GrantedEvent$3>;
interface InitializedEventObject$d {
    version: number;
}
type InitializedEvent$d = TypedEvent<[number], InitializedEventObject$d>;
type InitializedEventFilter$d = TypedEventFilter<InitializedEvent$d>;
interface MetadataSetEventObject {
    metadata: string;
}
type MetadataSetEvent = TypedEvent<[string], MetadataSetEventObject>;
type MetadataSetEventFilter = TypedEventFilter<MetadataSetEvent>;
interface NativeTokenDepositedEventObject {
    sender: string;
    amount: BigNumber;
}
type NativeTokenDepositedEvent = TypedEvent<[
    string,
    BigNumber
], NativeTokenDepositedEventObject>;
type NativeTokenDepositedEventFilter = TypedEventFilter<NativeTokenDepositedEvent>;
interface NewURIEventObject {
    daoURI: string;
}
type NewURIEvent = TypedEvent<[string], NewURIEventObject>;
type NewURIEventFilter = TypedEventFilter<NewURIEvent>;
interface RevokedEventObject$3 {
    permissionId: string;
    here: string;
    where: string;
    who: string;
}
type RevokedEvent$3 = TypedEvent<[
    string,
    string,
    string,
    string
], RevokedEventObject$3>;
type RevokedEventFilter$3 = TypedEventFilter<RevokedEvent$3>;
interface StandardCallbackRegisteredEventObject {
    interfaceId: string;
    callbackSelector: string;
    magicNumber: string;
}
type StandardCallbackRegisteredEvent = TypedEvent<[
    string,
    string,
    string
], StandardCallbackRegisteredEventObject>;
type StandardCallbackRegisteredEventFilter = TypedEventFilter<StandardCallbackRegisteredEvent>;
interface TrustedForwarderSetEventObject {
    forwarder: string;
}
type TrustedForwarderSetEvent = TypedEvent<[
    string
], TrustedForwarderSetEventObject>;
type TrustedForwarderSetEventFilter = TypedEventFilter<TrustedForwarderSetEvent>;
interface UpgradedEventObject$9 {
    implementation: string;
}
type UpgradedEvent$9 = TypedEvent<[string], UpgradedEventObject$9>;
type UpgradedEventFilter$9 = TypedEventFilter<UpgradedEvent$9>;
interface DAO$2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DAOInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        EXECUTE_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        REGISTER_STANDARD_CALLBACK_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        SET_METADATA_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        SET_TRUSTED_FORWARDER_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        UPGRADE_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        VALIDATE_SIGNATURE_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        applyMultiTargetPermissions(_items: PermissionLib$f.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$f.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        daoURI(overrides?: CallOverrides): Promise<[string]>;
        deposit(_token: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, _reference: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        execute(_callId: PromiseOrValue<BytesLike>, _actions: ActionStruct[], _allowFailureMap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getTrustedForwarder(overrides?: CallOverrides): Promise<[string]>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        initialize(_metadata: PromiseOrValue<BytesLike>, _initialOwner: PromiseOrValue<string>, _trustedForwarder: PromiseOrValue<string>, daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        initializeFrom(_previousProtocolVersion: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], _initData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        isValidSignature(_hash: PromiseOrValue<BytesLike>, _signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;
        registerStandardCallback(_interfaceId: PromiseOrValue<BytesLike>, _callbackSelector: PromiseOrValue<BytesLike>, _magicNumber: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDaoURI(newDaoURI: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMetadata(_metadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSignatureValidator(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        setTrustedForwarder(_newTrustedForwarder: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    EXECUTE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    REGISTER_STANDARD_CALLBACK_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    SET_METADATA_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    SET_TRUSTED_FORWARDER_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    UPGRADE_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    VALIDATE_SIGNATURE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    applyMultiTargetPermissions(_items: PermissionLib$f.MultiTargetPermissionStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$f.SingleTargetPermissionStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    daoURI(overrides?: CallOverrides): Promise<string>;
    deposit(_token: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, _reference: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    execute(_callId: PromiseOrValue<BytesLike>, _actions: ActionStruct[], _allowFailureMap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;
    grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    initialize(_metadata: PromiseOrValue<BytesLike>, _initialOwner: PromiseOrValue<string>, _trustedForwarder: PromiseOrValue<string>, daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    initializeFrom(_previousProtocolVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ], _initData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    isValidSignature(_hash: PromiseOrValue<BytesLike>, _signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    proxiableUUID(overrides?: CallOverrides): Promise<string>;
    registerStandardCallback(_interfaceId: PromiseOrValue<BytesLike>, _callbackSelector: PromiseOrValue<BytesLike>, _magicNumber: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDaoURI(newDaoURI: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMetadata(_metadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSignatureValidator(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    setTrustedForwarder(_newTrustedForwarder: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        EXECUTE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        REGISTER_STANDARD_CALLBACK_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        SET_METADATA_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        SET_TRUSTED_FORWARDER_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        UPGRADE_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        VALIDATE_SIGNATURE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        applyMultiTargetPermissions(_items: PermissionLib$f.MultiTargetPermissionStruct[], overrides?: CallOverrides): Promise<void>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$f.SingleTargetPermissionStruct[], overrides?: CallOverrides): Promise<void>;
        daoURI(overrides?: CallOverrides): Promise<string>;
        deposit(_token: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, _reference: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        execute(_callId: PromiseOrValue<BytesLike>, _actions: ActionStruct[], _allowFailureMap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string[],
            BigNumber
        ] & {
            execResults: string[];
            failureMap: BigNumber;
        }>;
        getTrustedForwarder(overrides?: CallOverrides): Promise<string>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        initialize(_metadata: PromiseOrValue<BytesLike>, _initialOwner: PromiseOrValue<string>, _trustedForwarder: PromiseOrValue<string>, daoURI_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        initializeFrom(_previousProtocolVersion: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], _initData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        isValidSignature(_hash: PromiseOrValue<BytesLike>, _signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        proxiableUUID(overrides?: CallOverrides): Promise<string>;
        registerStandardCallback(_interfaceId: PromiseOrValue<BytesLike>, _callbackSelector: PromiseOrValue<BytesLike>, _magicNumber: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDaoURI(newDaoURI: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setMetadata(_metadata: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setSignatureValidator(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTrustedForwarder(_newTrustedForwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$9;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$9;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$9;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$9;
        "CallbackReceived(address,bytes4,bytes)"(sender?: null, sig?: PromiseOrValue<BytesLike> | null, data?: null): CallbackReceivedEventFilter$2;
        CallbackReceived(sender?: null, sig?: PromiseOrValue<BytesLike> | null, data?: null): CallbackReceivedEventFilter$2;
        "Deposited(address,address,uint256,string)"(sender?: PromiseOrValue<string> | null, token?: PromiseOrValue<string> | null, amount?: null, _reference?: null): DepositedEventFilter;
        Deposited(sender?: PromiseOrValue<string> | null, token?: PromiseOrValue<string> | null, amount?: null, _reference?: null): DepositedEventFilter;
        "Executed(address,bytes32,tuple[],uint256,uint256,bytes[])"(actor?: PromiseOrValue<string> | null, callId?: null, actions?: null, allowFailureMap?: null, failureMap?: null, execResults?: null): ExecutedEventFilter;
        Executed(actor?: PromiseOrValue<string> | null, callId?: null, actions?: null, allowFailureMap?: null, failureMap?: null, execResults?: null): ExecutedEventFilter;
        "Granted(bytes32,address,address,address,address)"(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null, condition?: null): GrantedEventFilter$3;
        Granted(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null, condition?: null): GrantedEventFilter$3;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$d;
        Initialized(version?: null): InitializedEventFilter$d;
        "MetadataSet(bytes)"(metadata?: null): MetadataSetEventFilter;
        MetadataSet(metadata?: null): MetadataSetEventFilter;
        "NativeTokenDeposited(address,uint256)"(sender?: null, amount?: null): NativeTokenDepositedEventFilter;
        NativeTokenDeposited(sender?: null, amount?: null): NativeTokenDepositedEventFilter;
        "NewURI(string)"(daoURI?: null): NewURIEventFilter;
        NewURI(daoURI?: null): NewURIEventFilter;
        "Revoked(bytes32,address,address,address)"(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null): RevokedEventFilter$3;
        Revoked(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null): RevokedEventFilter$3;
        "StandardCallbackRegistered(bytes4,bytes4,bytes4)"(interfaceId?: null, callbackSelector?: null, magicNumber?: null): StandardCallbackRegisteredEventFilter;
        StandardCallbackRegistered(interfaceId?: null, callbackSelector?: null, magicNumber?: null): StandardCallbackRegisteredEventFilter;
        "TrustedForwarderSet(address)"(forwarder?: null): TrustedForwarderSetEventFilter;
        TrustedForwarderSet(forwarder?: null): TrustedForwarderSetEventFilter;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$9;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$9;
    };
    estimateGas: {
        EXECUTE_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        REGISTER_STANDARD_CALLBACK_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        SET_METADATA_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        SET_TRUSTED_FORWARDER_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        UPGRADE_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        VALIDATE_SIGNATURE_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        applyMultiTargetPermissions(_items: PermissionLib$f.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$f.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        daoURI(overrides?: CallOverrides): Promise<BigNumber>;
        deposit(_token: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, _reference: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        execute(_callId: PromiseOrValue<BytesLike>, _actions: ActionStruct[], _allowFailureMap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_metadata: PromiseOrValue<BytesLike>, _initialOwner: PromiseOrValue<string>, _trustedForwarder: PromiseOrValue<string>, daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        initializeFrom(_previousProtocolVersion: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], _initData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        isValidSignature(_hash: PromiseOrValue<BytesLike>, _signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;
        registerStandardCallback(_interfaceId: PromiseOrValue<BytesLike>, _callbackSelector: PromiseOrValue<BytesLike>, _magicNumber: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDaoURI(newDaoURI: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMetadata(_metadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSignatureValidator(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        setTrustedForwarder(_newTrustedForwarder: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        EXECUTE_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        REGISTER_STANDARD_CALLBACK_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        SET_METADATA_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        SET_TRUSTED_FORWARDER_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        UPGRADE_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        VALIDATE_SIGNATURE_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        applyMultiTargetPermissions(_items: PermissionLib$f.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$f.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        daoURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deposit(_token: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, _reference: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        execute(_callId: PromiseOrValue<BytesLike>, _actions: ActionStruct[], _allowFailureMap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getTrustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_metadata: PromiseOrValue<BytesLike>, _initialOwner: PromiseOrValue<string>, _trustedForwarder: PromiseOrValue<string>, daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        initializeFrom(_previousProtocolVersion: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], _initData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isValidSignature(_hash: PromiseOrValue<BytesLike>, _signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerStandardCallback(_interfaceId: PromiseOrValue<BytesLike>, _callbackSelector: PromiseOrValue<BytesLike>, _magicNumber: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDaoURI(newDaoURI: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMetadata(_metadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSignatureValidator(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setTrustedForwarder(_newTrustedForwarder: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IEIP4824Interface extends utils.Interface {
    functions: {
        "daoURI()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "daoURI"): FunctionFragment;
    encodeFunctionData(functionFragment: "daoURI", values?: undefined): string;
    decodeFunctionResult(functionFragment: "daoURI", data: BytesLike): Result;
    events: {};
}
interface IEIP4824 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IEIP4824Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        daoURI(overrides?: CallOverrides): Promise<[string] & {
            _daoURI: string;
        }>;
    };
    daoURI(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        daoURI(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        daoURI(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        daoURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$13_IEIP4824 = IEIP4824;
declare namespace index$13 {
  export {
    DAO$2 as DAO,
    index$13_IEIP4824 as IEIP4824,
  };
}

declare namespace PermissionLib$e {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
    type SingleTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        who: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type SingleTargetPermissionStructOutput = [number, string, string] & {
        operation: number;
        who: string;
        permissionId: string;
    };
}
interface PermissionManagerInterface extends utils.Interface {
    functions: {
        "ROOT_PERMISSION_ID()": FunctionFragment;
        "applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])": FunctionFragment;
        "applySingleTargetPermissions(address,(uint8,address,bytes32)[])": FunctionFragment;
        "grant(address,address,bytes32)": FunctionFragment;
        "grantWithCondition(address,address,bytes32,address)": FunctionFragment;
        "isGranted(address,address,bytes32,bytes)": FunctionFragment;
        "revoke(address,address,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ROOT_PERMISSION_ID" | "applyMultiTargetPermissions" | "applySingleTargetPermissions" | "grant" | "grantWithCondition" | "isGranted" | "revoke"): FunctionFragment;
    encodeFunctionData(functionFragment: "ROOT_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "applyMultiTargetPermissions", values: [PermissionLib$e.MultiTargetPermissionStruct[]]): string;
    encodeFunctionData(functionFragment: "applySingleTargetPermissions", values: [
        PromiseOrValue<string>,
        PermissionLib$e.SingleTargetPermissionStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "grant", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "grantWithCondition", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "isGranted", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "revoke", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "ROOT_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applyMultiTargetPermissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applySingleTargetPermissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantWithCondition", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
    events: {
        "Granted(bytes32,address,address,address,address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "Revoked(bytes32,address,address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Granted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
}
interface GrantedEventObject$2 {
    permissionId: string;
    here: string;
    where: string;
    who: string;
    condition: string;
}
type GrantedEvent$2 = TypedEvent<[
    string,
    string,
    string,
    string,
    string
], GrantedEventObject$2>;
type GrantedEventFilter$2 = TypedEventFilter<GrantedEvent$2>;
interface InitializedEventObject$c {
    version: number;
}
type InitializedEvent$c = TypedEvent<[number], InitializedEventObject$c>;
type InitializedEventFilter$c = TypedEventFilter<InitializedEvent$c>;
interface RevokedEventObject$2 {
    permissionId: string;
    here: string;
    where: string;
    who: string;
}
type RevokedEvent$2 = TypedEvent<[
    string,
    string,
    string,
    string
], RevokedEventObject$2>;
type RevokedEventFilter$2 = TypedEventFilter<RevokedEvent$2>;
interface PermissionManager extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PermissionManagerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        applyMultiTargetPermissions(_items: PermissionLib$e.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$e.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    applyMultiTargetPermissions(_items: PermissionLib$e.MultiTargetPermissionStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$e.SingleTargetPermissionStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        applyMultiTargetPermissions(_items: PermissionLib$e.MultiTargetPermissionStruct[], overrides?: CallOverrides): Promise<void>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$e.SingleTargetPermissionStruct[], overrides?: CallOverrides): Promise<void>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Granted(bytes32,address,address,address,address)"(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null, condition?: null): GrantedEventFilter$2;
        Granted(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null, condition?: null): GrantedEventFilter$2;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$c;
        Initialized(version?: null): InitializedEventFilter$c;
        "Revoked(bytes32,address,address,address)"(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null): RevokedEventFilter$2;
        Revoked(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null): RevokedEventFilter$2;
    };
    estimateGas: {
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        applyMultiTargetPermissions(_items: PermissionLib$e.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$e.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        applyMultiTargetPermissions(_items: PermissionLib$e.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$e.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$12_PermissionManager = PermissionManager;
declare namespace index$12 {
  export {
    index$12_PermissionManager as PermissionManager,
  };
}

interface CallbackHandlerInterface extends utils.Interface {
    functions: {};
    events: {
        "CallbackReceived(address,bytes4,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "CallbackReceived"): EventFragment;
}
interface CallbackReceivedEventObject$1 {
    sender: string;
    sig: string;
    data: string;
}
type CallbackReceivedEvent$1 = TypedEvent<[
    string,
    string,
    string
], CallbackReceivedEventObject$1>;
type CallbackReceivedEventFilter$1 = TypedEventFilter<CallbackReceivedEvent$1>;
interface CallbackHandler extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: CallbackHandlerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {
        "CallbackReceived(address,bytes4,bytes)"(sender?: null, sig?: PromiseOrValue<BytesLike> | null, data?: null): CallbackReceivedEventFilter$1;
        CallbackReceived(sender?: null, sig?: PromiseOrValue<BytesLike> | null, data?: null): CallbackReceivedEventFilter$1;
    };
    estimateGas: {};
    populateTransaction: {};
}

type index$11_CallbackHandler = CallbackHandler;
declare namespace index$11 {
  export {
    index$11_CallbackHandler as CallbackHandler,
  };
}

declare namespace index$10 {
  export {
    index$13 as dao,
    index$12 as permission,
    index$11 as utils,
  };
}

type PluginSetupRefStruct$2 = {
    versionTag: PluginRepo$4.TagStruct;
    pluginSetupRepo: PromiseOrValue<string>;
};
type PluginSetupRefStructOutput$2 = [
    PluginRepo$4.TagStructOutput,
    string
] & {
    versionTag: PluginRepo$4.TagStructOutput;
    pluginSetupRepo: string;
};
declare namespace PluginRepo$4 {
    type TagStruct = {
        release: PromiseOrValue<BigNumberish>;
        build: PromiseOrValue<BigNumberish>;
    };
    type TagStructOutput = [number, number] & {
        release: number;
        build: number;
    };
}
declare namespace PermissionLib$d {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
declare namespace IPluginSetup$b {
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib$d.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib$d.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib$d.MultiTargetPermissionStructOutput[];
    };
}
interface DAOFactoryInterface extends utils.Interface {
    functions: {
        "createDao((address,string,string,bytes),(((uint8,uint16),address),bytes)[])": FunctionFragment;
        "daoBase()": FunctionFragment;
        "daoRegistry()": FunctionFragment;
        "pluginSetupProcessor()": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "createDao" | "daoBase" | "daoRegistry" | "pluginSetupProcessor" | "protocolVersion" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "createDao", values: [DAOFactory$1.DAOSettingsStruct, DAOFactory$1.PluginSettingsStruct[]]): string;
    encodeFunctionData(functionFragment: "daoBase", values?: undefined): string;
    encodeFunctionData(functionFragment: "daoRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "pluginSetupProcessor", values?: undefined): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "createDao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "daoBase", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "daoRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pluginSetupProcessor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {};
}
declare namespace DAOFactory$1 {
    type DAOSettingsStruct = {
        trustedForwarder: PromiseOrValue<string>;
        daoURI: PromiseOrValue<string>;
        subdomain: PromiseOrValue<string>;
        metadata: PromiseOrValue<BytesLike>;
    };
    type DAOSettingsStructOutput = [string, string, string, string] & {
        trustedForwarder: string;
        daoURI: string;
        subdomain: string;
        metadata: string;
    };
    type PluginSettingsStruct = {
        pluginSetupRef: PluginSetupRefStruct$2;
        data: PromiseOrValue<BytesLike>;
    };
    type PluginSettingsStructOutput = [
        PluginSetupRefStructOutput$2,
        string
    ] & {
        pluginSetupRef: PluginSetupRefStructOutput$2;
        data: string;
    };
    type InstalledPluginStruct = {
        plugin: PromiseOrValue<string>;
        preparedSetupData: IPluginSetup$b.PreparedSetupDataStruct;
    };
    type InstalledPluginStructOutput = [
        string,
        IPluginSetup$b.PreparedSetupDataStructOutput
    ] & {
        plugin: string;
        preparedSetupData: IPluginSetup$b.PreparedSetupDataStructOutput;
    };
}
interface DAOFactory$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DAOFactoryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        createDao(_daoSettings: DAOFactory$1.DAOSettingsStruct, _pluginSettings: DAOFactory$1.PluginSettingsStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        daoBase(overrides?: CallOverrides): Promise<[string]>;
        daoRegistry(overrides?: CallOverrides): Promise<[string]>;
        pluginSetupProcessor(overrides?: CallOverrides): Promise<[string]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    createDao(_daoSettings: DAOFactory$1.DAOSettingsStruct, _pluginSettings: DAOFactory$1.PluginSettingsStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    daoBase(overrides?: CallOverrides): Promise<string>;
    daoRegistry(overrides?: CallOverrides): Promise<string>;
    pluginSetupProcessor(overrides?: CallOverrides): Promise<string>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        createDao(_daoSettings: DAOFactory$1.DAOSettingsStruct, _pluginSettings: DAOFactory$1.PluginSettingsStruct[], overrides?: CallOverrides): Promise<[
            string,
            DAOFactory$1.InstalledPluginStructOutput[]
        ] & {
            createdDao: string;
            installedPlugins: DAOFactory$1.InstalledPluginStructOutput[];
        }>;
        daoBase(overrides?: CallOverrides): Promise<string>;
        daoRegistry(overrides?: CallOverrides): Promise<string>;
        pluginSetupProcessor(overrides?: CallOverrides): Promise<string>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        createDao(_daoSettings: DAOFactory$1.DAOSettingsStruct, _pluginSettings: DAOFactory$1.PluginSettingsStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        daoBase(overrides?: CallOverrides): Promise<BigNumber>;
        daoRegistry(overrides?: CallOverrides): Promise<BigNumber>;
        pluginSetupProcessor(overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        createDao(_daoSettings: DAOFactory$1.DAOSettingsStruct, _pluginSettings: DAOFactory$1.PluginSettingsStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        daoBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        daoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pluginSetupProcessor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface DAORegistryInterface extends utils.Interface {
    functions: {
        "REGISTER_DAO_PERMISSION_ID()": FunctionFragment;
        "UPGRADE_REGISTRY_PERMISSION_ID()": FunctionFragment;
        "dao()": FunctionFragment;
        "entries(address)": FunctionFragment;
        "initialize(address,address)": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "register(address,address,string)": FunctionFragment;
        "subdomainRegistrar()": FunctionFragment;
        "targetInterfaceId()": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "REGISTER_DAO_PERMISSION_ID" | "UPGRADE_REGISTRY_PERMISSION_ID" | "dao" | "entries" | "initialize" | "protocolVersion" | "proxiableUUID" | "register" | "subdomainRegistrar" | "targetInterfaceId" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "REGISTER_DAO_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_REGISTRY_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "dao", values?: undefined): string;
    encodeFunctionData(functionFragment: "entries", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "register", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "subdomainRegistrar", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetInterfaceId", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "REGISTER_DAO_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_REGISTRY_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "entries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "subdomainRegistrar", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetInterfaceId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "DAORegistered(address,address,string)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DAORegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject$8 {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent$8 = TypedEvent<[
    string,
    string
], AdminChangedEventObject$8>;
type AdminChangedEventFilter$8 = TypedEventFilter<AdminChangedEvent$8>;
interface BeaconUpgradedEventObject$8 {
    beacon: string;
}
type BeaconUpgradedEvent$8 = TypedEvent<[
    string
], BeaconUpgradedEventObject$8>;
type BeaconUpgradedEventFilter$8 = TypedEventFilter<BeaconUpgradedEvent$8>;
interface DAORegisteredEventObject {
    dao: string;
    creator: string;
    subdomain: string;
}
type DAORegisteredEvent = TypedEvent<[
    string,
    string,
    string
], DAORegisteredEventObject>;
type DAORegisteredEventFilter = TypedEventFilter<DAORegisteredEvent>;
interface InitializedEventObject$b {
    version: number;
}
type InitializedEvent$b = TypedEvent<[number], InitializedEventObject$b>;
type InitializedEventFilter$b = TypedEventFilter<InitializedEvent$b>;
interface UpgradedEventObject$8 {
    implementation: string;
}
type UpgradedEvent$8 = TypedEvent<[string], UpgradedEventObject$8>;
type UpgradedEventFilter$8 = TypedEventFilter<UpgradedEvent$8>;
interface DAORegistry$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DAORegistryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        REGISTER_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        dao(overrides?: CallOverrides): Promise<[string]>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        initialize(_managingDao: PromiseOrValue<string>, _subdomainRegistrar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;
        register(dao: PromiseOrValue<string>, creator: PromiseOrValue<string>, subdomain: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        subdomainRegistrar(overrides?: CallOverrides): Promise<[string]>;
        targetInterfaceId(overrides?: CallOverrides): Promise<[string]>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    REGISTER_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    dao(overrides?: CallOverrides): Promise<string>;
    entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    initialize(_managingDao: PromiseOrValue<string>, _subdomainRegistrar: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    proxiableUUID(overrides?: CallOverrides): Promise<string>;
    register(dao: PromiseOrValue<string>, creator: PromiseOrValue<string>, subdomain: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    subdomainRegistrar(overrides?: CallOverrides): Promise<string>;
    targetInterfaceId(overrides?: CallOverrides): Promise<string>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        REGISTER_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        dao(overrides?: CallOverrides): Promise<string>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        initialize(_managingDao: PromiseOrValue<string>, _subdomainRegistrar: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        proxiableUUID(overrides?: CallOverrides): Promise<string>;
        register(dao: PromiseOrValue<string>, creator: PromiseOrValue<string>, subdomain: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        subdomainRegistrar(overrides?: CallOverrides): Promise<string>;
        targetInterfaceId(overrides?: CallOverrides): Promise<string>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$8;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$8;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$8;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$8;
        "DAORegistered(address,address,string)"(dao?: PromiseOrValue<string> | null, creator?: PromiseOrValue<string> | null, subdomain?: null): DAORegisteredEventFilter;
        DAORegistered(dao?: PromiseOrValue<string> | null, creator?: PromiseOrValue<string> | null, subdomain?: null): DAORegisteredEventFilter;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$b;
        Initialized(version?: null): InitializedEventFilter$b;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$8;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$8;
    };
    estimateGas: {
        REGISTER_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        dao(overrides?: CallOverrides): Promise<BigNumber>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_managingDao: PromiseOrValue<string>, _subdomainRegistrar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;
        register(dao: PromiseOrValue<string>, creator: PromiseOrValue<string>, subdomain: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        subdomainRegistrar(overrides?: CallOverrides): Promise<BigNumber>;
        targetInterfaceId(overrides?: CallOverrides): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        REGISTER_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_managingDao: PromiseOrValue<string>, _subdomainRegistrar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        register(dao: PromiseOrValue<string>, creator: PromiseOrValue<string>, subdomain: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        subdomainRegistrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetInterfaceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace index$$ {
  export {
    DAOFactory$1 as DAOFactory,
    DAORegistry$1 as DAORegistry,
  };
}

declare namespace PermissionLib$c {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
declare namespace IPluginSetup$a {
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib$c.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib$c.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib$c.MultiTargetPermissionStructOutput[];
    };
    type SetupPayloadStruct = {
        plugin: PromiseOrValue<string>;
        currentHelpers: PromiseOrValue<string>[];
        data: PromiseOrValue<BytesLike>;
    };
    type SetupPayloadStructOutput = [string, string[], string] & {
        plugin: string;
        currentHelpers: string[];
        data: string;
    };
}
interface PlaceholderSetupInterface extends utils.Interface {
    functions: {
        "implementation()": FunctionFragment;
        "prepareInstallation(address,bytes)": FunctionFragment;
        "prepareUninstallation(address,(address,address[],bytes))": FunctionFragment;
        "prepareUpdate(address,uint16,(address,address[],bytes))": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "implementation" | "prepareInstallation" | "prepareUninstallation" | "prepareUpdate" | "protocolVersion" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "prepareInstallation", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "prepareUninstallation", values: [PromiseOrValue<string>, IPluginSetup$a.SetupPayloadStruct]): string;
    encodeFunctionData(functionFragment: "prepareUpdate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IPluginSetup$a.SetupPayloadStruct
    ]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {};
}
interface PlaceholderSetup extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PlaceholderSetupInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        implementation(overrides?: CallOverrides): Promise<[string]>;
        prepareInstallation(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, IPluginSetup$a.PreparedSetupDataStructOutput]>;
        prepareUninstallation(arg0: PromiseOrValue<string>, arg1: IPluginSetup$a.SetupPayloadStruct, overrides?: CallOverrides): Promise<[PermissionLib$c.MultiTargetPermissionStructOutput[]]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$a.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    implementation(overrides?: CallOverrides): Promise<string>;
    prepareInstallation(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, IPluginSetup$a.PreparedSetupDataStructOutput]>;
    prepareUninstallation(arg0: PromiseOrValue<string>, arg1: IPluginSetup$a.SetupPayloadStruct, overrides?: CallOverrides): Promise<PermissionLib$c.MultiTargetPermissionStructOutput[]>;
    prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$a.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        implementation(overrides?: CallOverrides): Promise<string>;
        prepareInstallation(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, IPluginSetup$a.PreparedSetupDataStructOutput]>;
        prepareUninstallation(arg0: PromiseOrValue<string>, arg1: IPluginSetup$a.SetupPayloadStruct, overrides?: CallOverrides): Promise<PermissionLib$c.MultiTargetPermissionStructOutput[]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$a.SetupPayloadStruct, overrides?: CallOverrides): Promise<[string, IPluginSetup$a.PreparedSetupDataStructOutput]>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        prepareInstallation(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        prepareUninstallation(arg0: PromiseOrValue<string>, arg1: IPluginSetup$a.SetupPayloadStruct, overrides?: CallOverrides): Promise<BigNumber>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$a.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        prepareInstallation(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        prepareUninstallation(arg0: PromiseOrValue<string>, arg1: IPluginSetup$a.SetupPayloadStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$a.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$__PlaceholderSetup = PlaceholderSetup;
declare namespace index$_ {
  export {
    index$__PlaceholderSetup as PlaceholderSetup,
  };
}

interface IPluginRepoInterface extends utils.Interface {
    functions: {
        "createVersion(uint8,address,bytes,bytes)": FunctionFragment;
        "updateReleaseMetadata(uint8,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "createVersion" | "updateReleaseMetadata"): FunctionFragment;
    encodeFunctionData(functionFragment: "createVersion", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "updateReleaseMetadata", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "createVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateReleaseMetadata", data: BytesLike): Result;
    events: {
        "ReleaseMetadataUpdated(uint8,bytes)": EventFragment;
        "VersionCreated(uint8,uint16,address,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ReleaseMetadataUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "VersionCreated"): EventFragment;
}
interface ReleaseMetadataUpdatedEventObject$1 {
    release: number;
    releaseMetadata: string;
}
type ReleaseMetadataUpdatedEvent$1 = TypedEvent<[
    number,
    string
], ReleaseMetadataUpdatedEventObject$1>;
type ReleaseMetadataUpdatedEventFilter$1 = TypedEventFilter<ReleaseMetadataUpdatedEvent$1>;
interface VersionCreatedEventObject$1 {
    release: number;
    build: number;
    pluginSetup: string;
    buildMetadata: string;
}
type VersionCreatedEvent$1 = TypedEvent<[
    number,
    number,
    string,
    string
], VersionCreatedEventObject$1>;
type VersionCreatedEventFilter$1 = TypedEventFilter<VersionCreatedEvent$1>;
interface IPluginRepo extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IPluginRepoInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        createVersion(_release: PromiseOrValue<BigNumberish>, _pluginSetupAddress: PromiseOrValue<string>, _buildMetadata: PromiseOrValue<BytesLike>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateReleaseMetadata(_release: PromiseOrValue<BigNumberish>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    createVersion(_release: PromiseOrValue<BigNumberish>, _pluginSetupAddress: PromiseOrValue<string>, _buildMetadata: PromiseOrValue<BytesLike>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateReleaseMetadata(_release: PromiseOrValue<BigNumberish>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        createVersion(_release: PromiseOrValue<BigNumberish>, _pluginSetupAddress: PromiseOrValue<string>, _buildMetadata: PromiseOrValue<BytesLike>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        updateReleaseMetadata(_release: PromiseOrValue<BigNumberish>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ReleaseMetadataUpdated(uint8,bytes)"(release?: null, releaseMetadata?: null): ReleaseMetadataUpdatedEventFilter$1;
        ReleaseMetadataUpdated(release?: null, releaseMetadata?: null): ReleaseMetadataUpdatedEventFilter$1;
        "VersionCreated(uint8,uint16,address,bytes)"(release?: null, build?: null, pluginSetup?: PromiseOrValue<string> | null, buildMetadata?: null): VersionCreatedEventFilter$1;
        VersionCreated(release?: null, build?: null, pluginSetup?: PromiseOrValue<string> | null, buildMetadata?: null): VersionCreatedEventFilter$1;
    };
    estimateGas: {
        createVersion(_release: PromiseOrValue<BigNumberish>, _pluginSetupAddress: PromiseOrValue<string>, _buildMetadata: PromiseOrValue<BytesLike>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateReleaseMetadata(_release: PromiseOrValue<BigNumberish>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        createVersion(_release: PromiseOrValue<BigNumberish>, _pluginSetupAddress: PromiseOrValue<string>, _buildMetadata: PromiseOrValue<BytesLike>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateReleaseMetadata(_release: PromiseOrValue<BigNumberish>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace PermissionLib$b {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
    type SingleTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        who: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type SingleTargetPermissionStructOutput = [number, string, string] & {
        operation: number;
        who: string;
        permissionId: string;
    };
}
interface PluginRepoInterface extends utils.Interface {
    functions: {
        "MAINTAINER_PERMISSION_ID()": FunctionFragment;
        "ROOT_PERMISSION_ID()": FunctionFragment;
        "UPGRADE_REPO_PERMISSION_ID()": FunctionFragment;
        "applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])": FunctionFragment;
        "applySingleTargetPermissions(address,(uint8,address,bytes32)[])": FunctionFragment;
        "buildCount(uint8)": FunctionFragment;
        "createVersion(uint8,address,bytes,bytes)": FunctionFragment;
        "getLatestVersion(address)": FunctionFragment;
        "getLatestVersion(uint8)": FunctionFragment;
        "getVersion(bytes32)": FunctionFragment;
        "getVersion((uint8,uint16))": FunctionFragment;
        "grant(address,address,bytes32)": FunctionFragment;
        "grantWithCondition(address,address,bytes32,address)": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "initializeFrom(uint8[3],bytes)": FunctionFragment;
        "isGranted(address,address,bytes32,bytes)": FunctionFragment;
        "latestRelease()": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "revoke(address,address,bytes32)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "updateReleaseMetadata(uint8,bytes)": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "MAINTAINER_PERMISSION_ID" | "ROOT_PERMISSION_ID" | "UPGRADE_REPO_PERMISSION_ID" | "applyMultiTargetPermissions" | "applySingleTargetPermissions" | "buildCount" | "createVersion" | "getLatestVersion(address)" | "getLatestVersion(uint8)" | "getVersion(bytes32)" | "getVersion((uint8,uint16))" | "grant" | "grantWithCondition" | "initialize" | "initializeFrom" | "isGranted" | "latestRelease" | "protocolVersion" | "proxiableUUID" | "revoke" | "supportsInterface" | "updateReleaseMetadata" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "MAINTAINER_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "ROOT_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_REPO_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "applyMultiTargetPermissions", values: [PermissionLib$b.MultiTargetPermissionStruct[]]): string;
    encodeFunctionData(functionFragment: "applySingleTargetPermissions", values: [
        PromiseOrValue<string>,
        PermissionLib$b.SingleTargetPermissionStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "buildCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "createVersion", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getLatestVersion(address)", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getLatestVersion(uint8)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getVersion(bytes32)", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getVersion((uint8,uint16))", values: [PluginRepo$3.TagStruct]): string;
    encodeFunctionData(functionFragment: "grant", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "grantWithCondition", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initializeFrom", values: [
        [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ],
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "isGranted", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "latestRelease", values?: undefined): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "revoke", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "updateReleaseMetadata", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "MAINTAINER_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ROOT_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_REPO_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applyMultiTargetPermissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applySingleTargetPermissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "buildCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLatestVersion(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLatestVersion(uint8)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVersion(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVersion((uint8,uint16))", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantWithCondition", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestRelease", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateReleaseMetadata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Granted(bytes32,address,address,address,address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "ReleaseMetadataUpdated(uint8,bytes)": EventFragment;
        "Revoked(bytes32,address,address,address)": EventFragment;
        "Upgraded(address)": EventFragment;
        "VersionCreated(uint8,uint16,address,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Granted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReleaseMetadataUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "VersionCreated"): EventFragment;
}
interface AdminChangedEventObject$7 {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent$7 = TypedEvent<[
    string,
    string
], AdminChangedEventObject$7>;
type AdminChangedEventFilter$7 = TypedEventFilter<AdminChangedEvent$7>;
interface BeaconUpgradedEventObject$7 {
    beacon: string;
}
type BeaconUpgradedEvent$7 = TypedEvent<[
    string
], BeaconUpgradedEventObject$7>;
type BeaconUpgradedEventFilter$7 = TypedEventFilter<BeaconUpgradedEvent$7>;
interface GrantedEventObject$1 {
    permissionId: string;
    here: string;
    where: string;
    who: string;
    condition: string;
}
type GrantedEvent$1 = TypedEvent<[
    string,
    string,
    string,
    string,
    string
], GrantedEventObject$1>;
type GrantedEventFilter$1 = TypedEventFilter<GrantedEvent$1>;
interface InitializedEventObject$a {
    version: number;
}
type InitializedEvent$a = TypedEvent<[number], InitializedEventObject$a>;
type InitializedEventFilter$a = TypedEventFilter<InitializedEvent$a>;
interface ReleaseMetadataUpdatedEventObject {
    release: number;
    releaseMetadata: string;
}
type ReleaseMetadataUpdatedEvent = TypedEvent<[
    number,
    string
], ReleaseMetadataUpdatedEventObject>;
type ReleaseMetadataUpdatedEventFilter = TypedEventFilter<ReleaseMetadataUpdatedEvent>;
interface RevokedEventObject$1 {
    permissionId: string;
    here: string;
    where: string;
    who: string;
}
type RevokedEvent$1 = TypedEvent<[
    string,
    string,
    string,
    string
], RevokedEventObject$1>;
type RevokedEventFilter$1 = TypedEventFilter<RevokedEvent$1>;
interface UpgradedEventObject$7 {
    implementation: string;
}
type UpgradedEvent$7 = TypedEvent<[string], UpgradedEventObject$7>;
type UpgradedEventFilter$7 = TypedEventFilter<UpgradedEvent$7>;
interface VersionCreatedEventObject {
    release: number;
    build: number;
    pluginSetup: string;
    buildMetadata: string;
}
type VersionCreatedEvent = TypedEvent<[
    number,
    number,
    string,
    string
], VersionCreatedEventObject>;
type VersionCreatedEventFilter = TypedEventFilter<VersionCreatedEvent>;
declare namespace PluginRepo$3 {
    type TagStruct = {
        release: PromiseOrValue<BigNumberish>;
        build: PromiseOrValue<BigNumberish>;
    };
    type TagStructOutput = [number, number] & {
        release: number;
        build: number;
    };
    type VersionStruct = {
        tag: PluginRepo$3.TagStruct;
        pluginSetup: PromiseOrValue<string>;
        buildMetadata: PromiseOrValue<BytesLike>;
    };
    type VersionStructOutput = [
        PluginRepo$3.TagStructOutput,
        string,
        string
    ] & {
        tag: PluginRepo$3.TagStructOutput;
        pluginSetup: string;
        buildMetadata: string;
    };
}
interface PluginRepo$3 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginRepoInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        MAINTAINER_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        UPGRADE_REPO_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        applyMultiTargetPermissions(_items: PermissionLib$b.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$b.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        buildCount(_release: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        createVersion(_release: PromiseOrValue<BigNumberish>, _pluginSetup: PromiseOrValue<string>, _buildMetadata: PromiseOrValue<BytesLike>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "getLatestVersion(address)"(_pluginSetup: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[PluginRepo$3.VersionStructOutput]>;
        "getLatestVersion(uint8)"(_release: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[PluginRepo$3.VersionStructOutput]>;
        "getVersion(bytes32)"(_tagHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[PluginRepo$3.VersionStructOutput]>;
        "getVersion((uint8,uint16))"(_tag: PluginRepo$3.TagStruct, overrides?: CallOverrides): Promise<[PluginRepo$3.VersionStructOutput]>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        initialize(initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        initializeFrom(_previousProtocolVersion: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], _initData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        latestRelease(overrides?: CallOverrides): Promise<[number]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        updateReleaseMetadata(_release: PromiseOrValue<BigNumberish>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    MAINTAINER_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    UPGRADE_REPO_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    applyMultiTargetPermissions(_items: PermissionLib$b.MultiTargetPermissionStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$b.SingleTargetPermissionStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    buildCount(_release: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    createVersion(_release: PromiseOrValue<BigNumberish>, _pluginSetup: PromiseOrValue<string>, _buildMetadata: PromiseOrValue<BytesLike>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "getLatestVersion(address)"(_pluginSetup: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PluginRepo$3.VersionStructOutput>;
    "getLatestVersion(uint8)"(_release: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PluginRepo$3.VersionStructOutput>;
    "getVersion(bytes32)"(_tagHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PluginRepo$3.VersionStructOutput>;
    "getVersion((uint8,uint16))"(_tag: PluginRepo$3.TagStruct, overrides?: CallOverrides): Promise<PluginRepo$3.VersionStructOutput>;
    grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    initialize(initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    initializeFrom(_previousProtocolVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ], _initData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    latestRelease(overrides?: CallOverrides): Promise<number>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    proxiableUUID(overrides?: CallOverrides): Promise<string>;
    revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    updateReleaseMetadata(_release: PromiseOrValue<BigNumberish>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        MAINTAINER_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        UPGRADE_REPO_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        applyMultiTargetPermissions(_items: PermissionLib$b.MultiTargetPermissionStruct[], overrides?: CallOverrides): Promise<void>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$b.SingleTargetPermissionStruct[], overrides?: CallOverrides): Promise<void>;
        buildCount(_release: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        createVersion(_release: PromiseOrValue<BigNumberish>, _pluginSetup: PromiseOrValue<string>, _buildMetadata: PromiseOrValue<BytesLike>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        "getLatestVersion(address)"(_pluginSetup: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PluginRepo$3.VersionStructOutput>;
        "getLatestVersion(uint8)"(_release: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PluginRepo$3.VersionStructOutput>;
        "getVersion(bytes32)"(_tagHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PluginRepo$3.VersionStructOutput>;
        "getVersion((uint8,uint16))"(_tag: PluginRepo$3.TagStruct, overrides?: CallOverrides): Promise<PluginRepo$3.VersionStructOutput>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        initialize(initialOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        initializeFrom(_previousProtocolVersion: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], _initData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        latestRelease(overrides?: CallOverrides): Promise<number>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        proxiableUUID(overrides?: CallOverrides): Promise<string>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        updateReleaseMetadata(_release: PromiseOrValue<BigNumberish>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$7;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$7;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$7;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$7;
        "Granted(bytes32,address,address,address,address)"(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null, condition?: null): GrantedEventFilter$1;
        Granted(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null, condition?: null): GrantedEventFilter$1;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$a;
        Initialized(version?: null): InitializedEventFilter$a;
        "ReleaseMetadataUpdated(uint8,bytes)"(release?: null, releaseMetadata?: null): ReleaseMetadataUpdatedEventFilter;
        ReleaseMetadataUpdated(release?: null, releaseMetadata?: null): ReleaseMetadataUpdatedEventFilter;
        "Revoked(bytes32,address,address,address)"(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null): RevokedEventFilter$1;
        Revoked(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null): RevokedEventFilter$1;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$7;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$7;
        "VersionCreated(uint8,uint16,address,bytes)"(release?: null, build?: null, pluginSetup?: PromiseOrValue<string> | null, buildMetadata?: null): VersionCreatedEventFilter;
        VersionCreated(release?: null, build?: null, pluginSetup?: PromiseOrValue<string> | null, buildMetadata?: null): VersionCreatedEventFilter;
    };
    estimateGas: {
        MAINTAINER_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        UPGRADE_REPO_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        applyMultiTargetPermissions(_items: PermissionLib$b.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$b.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        buildCount(_release: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        createVersion(_release: PromiseOrValue<BigNumberish>, _pluginSetup: PromiseOrValue<string>, _buildMetadata: PromiseOrValue<BytesLike>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "getLatestVersion(address)"(_pluginSetup: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        "getLatestVersion(uint8)"(_release: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "getVersion(bytes32)"(_tagHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "getVersion((uint8,uint16))"(_tag: PluginRepo$3.TagStruct, overrides?: CallOverrides): Promise<BigNumber>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        initialize(initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        initializeFrom(_previousProtocolVersion: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], _initData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        latestRelease(overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        updateReleaseMetadata(_release: PromiseOrValue<BigNumberish>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        MAINTAINER_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        UPGRADE_REPO_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        applyMultiTargetPermissions(_items: PermissionLib$b.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$b.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        buildCount(_release: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        createVersion(_release: PromiseOrValue<BigNumberish>, _pluginSetup: PromiseOrValue<string>, _buildMetadata: PromiseOrValue<BytesLike>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "getLatestVersion(address)"(_pluginSetup: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getLatestVersion(uint8)"(_release: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getVersion(bytes32)"(_tagHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getVersion((uint8,uint16))"(_tag: PluginRepo$3.TagStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        initialize(initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        initializeFrom(_previousProtocolVersion: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ], _initData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        latestRelease(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        updateReleaseMetadata(_release: PromiseOrValue<BigNumberish>, _releaseMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface PluginRepoFactoryInterface extends utils.Interface {
    functions: {
        "createPluginRepo(string,address)": FunctionFragment;
        "createPluginRepoWithFirstVersion(string,address,address,bytes,bytes)": FunctionFragment;
        "pluginRepoBase()": FunctionFragment;
        "pluginRepoRegistry()": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "createPluginRepo" | "createPluginRepoWithFirstVersion" | "pluginRepoBase" | "pluginRepoRegistry" | "protocolVersion" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "createPluginRepo", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "createPluginRepoWithFirstVersion", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "pluginRepoBase", values?: undefined): string;
    encodeFunctionData(functionFragment: "pluginRepoRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "createPluginRepo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createPluginRepoWithFirstVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pluginRepoBase", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pluginRepoRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {};
}
interface PluginRepoFactory extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginRepoFactoryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        createPluginRepo(_subdomain: PromiseOrValue<string>, _initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        createPluginRepoWithFirstVersion(_subdomain: PromiseOrValue<string>, _pluginSetup: PromiseOrValue<string>, _maintainer: PromiseOrValue<string>, _releaseMetadata: PromiseOrValue<BytesLike>, _buildMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        pluginRepoBase(overrides?: CallOverrides): Promise<[string]>;
        pluginRepoRegistry(overrides?: CallOverrides): Promise<[string]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    createPluginRepo(_subdomain: PromiseOrValue<string>, _initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    createPluginRepoWithFirstVersion(_subdomain: PromiseOrValue<string>, _pluginSetup: PromiseOrValue<string>, _maintainer: PromiseOrValue<string>, _releaseMetadata: PromiseOrValue<BytesLike>, _buildMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    pluginRepoBase(overrides?: CallOverrides): Promise<string>;
    pluginRepoRegistry(overrides?: CallOverrides): Promise<string>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        createPluginRepo(_subdomain: PromiseOrValue<string>, _initialOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        createPluginRepoWithFirstVersion(_subdomain: PromiseOrValue<string>, _pluginSetup: PromiseOrValue<string>, _maintainer: PromiseOrValue<string>, _releaseMetadata: PromiseOrValue<BytesLike>, _buildMetadata: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        pluginRepoBase(overrides?: CallOverrides): Promise<string>;
        pluginRepoRegistry(overrides?: CallOverrides): Promise<string>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        createPluginRepo(_subdomain: PromiseOrValue<string>, _initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        createPluginRepoWithFirstVersion(_subdomain: PromiseOrValue<string>, _pluginSetup: PromiseOrValue<string>, _maintainer: PromiseOrValue<string>, _releaseMetadata: PromiseOrValue<BytesLike>, _buildMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        pluginRepoBase(overrides?: CallOverrides): Promise<BigNumber>;
        pluginRepoRegistry(overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        createPluginRepo(_subdomain: PromiseOrValue<string>, _initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        createPluginRepoWithFirstVersion(_subdomain: PromiseOrValue<string>, _pluginSetup: PromiseOrValue<string>, _maintainer: PromiseOrValue<string>, _releaseMetadata: PromiseOrValue<BytesLike>, _buildMetadata: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        pluginRepoBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pluginRepoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface PluginRepoRegistryInterface extends utils.Interface {
    functions: {
        "REGISTER_PLUGIN_REPO_PERMISSION_ID()": FunctionFragment;
        "UPGRADE_REGISTRY_PERMISSION_ID()": FunctionFragment;
        "dao()": FunctionFragment;
        "entries(address)": FunctionFragment;
        "initialize(address,address)": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "registerPluginRepo(string,address)": FunctionFragment;
        "subdomainRegistrar()": FunctionFragment;
        "targetInterfaceId()": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "REGISTER_PLUGIN_REPO_PERMISSION_ID" | "UPGRADE_REGISTRY_PERMISSION_ID" | "dao" | "entries" | "initialize" | "protocolVersion" | "proxiableUUID" | "registerPluginRepo" | "subdomainRegistrar" | "targetInterfaceId" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "REGISTER_PLUGIN_REPO_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_REGISTRY_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "dao", values?: undefined): string;
    encodeFunctionData(functionFragment: "entries", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "registerPluginRepo", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "subdomainRegistrar", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetInterfaceId", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "REGISTER_PLUGIN_REPO_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_REGISTRY_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "entries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerPluginRepo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "subdomainRegistrar", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetInterfaceId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "PluginRepoRegistered(string,address)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PluginRepoRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject$6 {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent$6 = TypedEvent<[
    string,
    string
], AdminChangedEventObject$6>;
type AdminChangedEventFilter$6 = TypedEventFilter<AdminChangedEvent$6>;
interface BeaconUpgradedEventObject$6 {
    beacon: string;
}
type BeaconUpgradedEvent$6 = TypedEvent<[
    string
], BeaconUpgradedEventObject$6>;
type BeaconUpgradedEventFilter$6 = TypedEventFilter<BeaconUpgradedEvent$6>;
interface InitializedEventObject$9 {
    version: number;
}
type InitializedEvent$9 = TypedEvent<[number], InitializedEventObject$9>;
type InitializedEventFilter$9 = TypedEventFilter<InitializedEvent$9>;
interface PluginRepoRegisteredEventObject {
    subdomain: string;
    pluginRepo: string;
}
type PluginRepoRegisteredEvent = TypedEvent<[
    string,
    string
], PluginRepoRegisteredEventObject>;
type PluginRepoRegisteredEventFilter = TypedEventFilter<PluginRepoRegisteredEvent>;
interface UpgradedEventObject$6 {
    implementation: string;
}
type UpgradedEvent$6 = TypedEvent<[string], UpgradedEventObject$6>;
type UpgradedEventFilter$6 = TypedEventFilter<UpgradedEvent$6>;
interface PluginRepoRegistry$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginRepoRegistryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        REGISTER_PLUGIN_REPO_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        dao(overrides?: CallOverrides): Promise<[string]>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        initialize(_dao: PromiseOrValue<string>, _subdomainRegistrar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;
        registerPluginRepo(subdomain: PromiseOrValue<string>, pluginRepo: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        subdomainRegistrar(overrides?: CallOverrides): Promise<[string]>;
        targetInterfaceId(overrides?: CallOverrides): Promise<[string]>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    REGISTER_PLUGIN_REPO_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    dao(overrides?: CallOverrides): Promise<string>;
    entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    initialize(_dao: PromiseOrValue<string>, _subdomainRegistrar: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    proxiableUUID(overrides?: CallOverrides): Promise<string>;
    registerPluginRepo(subdomain: PromiseOrValue<string>, pluginRepo: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    subdomainRegistrar(overrides?: CallOverrides): Promise<string>;
    targetInterfaceId(overrides?: CallOverrides): Promise<string>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        REGISTER_PLUGIN_REPO_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        dao(overrides?: CallOverrides): Promise<string>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        initialize(_dao: PromiseOrValue<string>, _subdomainRegistrar: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        proxiableUUID(overrides?: CallOverrides): Promise<string>;
        registerPluginRepo(subdomain: PromiseOrValue<string>, pluginRepo: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        subdomainRegistrar(overrides?: CallOverrides): Promise<string>;
        targetInterfaceId(overrides?: CallOverrides): Promise<string>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$6;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$6;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$6;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$6;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$9;
        Initialized(version?: null): InitializedEventFilter$9;
        "PluginRepoRegistered(string,address)"(subdomain?: null, pluginRepo?: null): PluginRepoRegisteredEventFilter;
        PluginRepoRegistered(subdomain?: null, pluginRepo?: null): PluginRepoRegisteredEventFilter;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$6;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$6;
    };
    estimateGas: {
        REGISTER_PLUGIN_REPO_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        dao(overrides?: CallOverrides): Promise<BigNumber>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_dao: PromiseOrValue<string>, _subdomainRegistrar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;
        registerPluginRepo(subdomain: PromiseOrValue<string>, pluginRepo: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        subdomainRegistrar(overrides?: CallOverrides): Promise<BigNumber>;
        targetInterfaceId(overrides?: CallOverrides): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        REGISTER_PLUGIN_REPO_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_dao: PromiseOrValue<string>, _subdomainRegistrar: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerPluginRepo(subdomain: PromiseOrValue<string>, pluginRepo: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        subdomainRegistrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetInterfaceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$Z_IPluginRepo = IPluginRepo;
type index$Z_PluginRepoFactory = PluginRepoFactory;
declare namespace index$Z {
  export {
    index$_ as placeholder,
    index$Z_IPluginRepo as IPluginRepo,
    PluginRepo$3 as PluginRepo,
    index$Z_PluginRepoFactory as PluginRepoFactory,
    PluginRepoRegistry$1 as PluginRepoRegistry,
  };
}

type PluginSetupRefStruct$1 = {
    versionTag: PluginRepo$2.TagStruct;
    pluginSetupRepo: PromiseOrValue<string>;
};
type PluginSetupRefStructOutput$1 = [
    PluginRepo$2.TagStructOutput,
    string
] & {
    versionTag: PluginRepo$2.TagStructOutput;
    pluginSetupRepo: string;
};
declare namespace PluginRepo$2 {
    type TagStruct = {
        release: PromiseOrValue<BigNumberish>;
        build: PromiseOrValue<BigNumberish>;
    };
    type TagStructOutput = [number, number] & {
        release: number;
        build: number;
    };
}
declare namespace PermissionLib$a {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
declare namespace IPluginSetup$9 {
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib$a.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib$a.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib$a.MultiTargetPermissionStructOutput[];
    };
    type SetupPayloadStruct = {
        plugin: PromiseOrValue<string>;
        currentHelpers: PromiseOrValue<string>[];
        data: PromiseOrValue<BytesLike>;
    };
    type SetupPayloadStructOutput = [string, string[], string] & {
        plugin: string;
        currentHelpers: string[];
        data: string;
    };
}
interface PluginSetupProcessorInterface extends utils.Interface {
    functions: {
        "APPLY_INSTALLATION_PERMISSION_ID()": FunctionFragment;
        "APPLY_UNINSTALLATION_PERMISSION_ID()": FunctionFragment;
        "APPLY_UPDATE_PERMISSION_ID()": FunctionFragment;
        "applyInstallation(address,(((uint8,uint16),address),address,(uint8,address,address,address,bytes32)[],bytes32))": FunctionFragment;
        "applyUninstallation(address,(address,((uint8,uint16),address),(uint8,address,address,address,bytes32)[]))": FunctionFragment;
        "applyUpdate(address,(address,((uint8,uint16),address),bytes,(uint8,address,address,address,bytes32)[],bytes32))": FunctionFragment;
        "prepareInstallation(address,(((uint8,uint16),address),bytes))": FunctionFragment;
        "prepareUninstallation(address,(((uint8,uint16),address),(address,address[],bytes)))": FunctionFragment;
        "prepareUpdate(address,((uint8,uint16),(uint8,uint16),address,(address,address[],bytes)))": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "repoRegistry()": FunctionFragment;
        "states(bytes32)": FunctionFragment;
        "validatePreparedSetupId(bytes32,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "APPLY_INSTALLATION_PERMISSION_ID" | "APPLY_UNINSTALLATION_PERMISSION_ID" | "APPLY_UPDATE_PERMISSION_ID" | "applyInstallation" | "applyUninstallation" | "applyUpdate" | "prepareInstallation" | "prepareUninstallation" | "prepareUpdate" | "protocolVersion" | "repoRegistry" | "states" | "validatePreparedSetupId"): FunctionFragment;
    encodeFunctionData(functionFragment: "APPLY_INSTALLATION_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "APPLY_UNINSTALLATION_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "APPLY_UPDATE_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "applyInstallation", values: [
        PromiseOrValue<string>,
        PluginSetupProcessor$2.ApplyInstallationParamsStruct
    ]): string;
    encodeFunctionData(functionFragment: "applyUninstallation", values: [
        PromiseOrValue<string>,
        PluginSetupProcessor$2.ApplyUninstallationParamsStruct
    ]): string;
    encodeFunctionData(functionFragment: "applyUpdate", values: [
        PromiseOrValue<string>,
        PluginSetupProcessor$2.ApplyUpdateParamsStruct
    ]): string;
    encodeFunctionData(functionFragment: "prepareInstallation", values: [
        PromiseOrValue<string>,
        PluginSetupProcessor$2.PrepareInstallationParamsStruct
    ]): string;
    encodeFunctionData(functionFragment: "prepareUninstallation", values: [
        PromiseOrValue<string>,
        PluginSetupProcessor$2.PrepareUninstallationParamsStruct
    ]): string;
    encodeFunctionData(functionFragment: "prepareUpdate", values: [
        PromiseOrValue<string>,
        PluginSetupProcessor$2.PrepareUpdateParamsStruct
    ]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "repoRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "states", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "validatePreparedSetupId", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "APPLY_INSTALLATION_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "APPLY_UNINSTALLATION_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "APPLY_UPDATE_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applyInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applyUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applyUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "repoRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "states", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validatePreparedSetupId", data: BytesLike): Result;
    events: {
        "InstallationApplied(address,address,bytes32,bytes32)": EventFragment;
        "InstallationPrepared(address,address,bytes32,address,tuple,bytes,address,tuple)": EventFragment;
        "UninstallationApplied(address,address,bytes32)": EventFragment;
        "UninstallationPrepared(address,address,bytes32,address,tuple,tuple,tuple[])": EventFragment;
        "UpdateApplied(address,address,bytes32,bytes32)": EventFragment;
        "UpdatePrepared(address,address,bytes32,address,tuple,tuple,tuple,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InstallationApplied"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UninstallationApplied"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UninstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateApplied"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePrepared"): EventFragment;
}
interface InstallationAppliedEventObject {
    dao: string;
    plugin: string;
    preparedSetupId: string;
    appliedSetupId: string;
}
type InstallationAppliedEvent = TypedEvent<[
    string,
    string,
    string,
    string
], InstallationAppliedEventObject>;
type InstallationAppliedEventFilter = TypedEventFilter<InstallationAppliedEvent>;
interface InstallationPreparedEventObject$6 {
    sender: string;
    dao: string;
    preparedSetupId: string;
    pluginSetupRepo: string;
    versionTag: PluginRepo$2.TagStructOutput;
    data: string;
    plugin: string;
    preparedSetupData: IPluginSetup$9.PreparedSetupDataStructOutput;
}
type InstallationPreparedEvent$6 = TypedEvent<[
    string,
    string,
    string,
    string,
    PluginRepo$2.TagStructOutput,
    string,
    string,
    IPluginSetup$9.PreparedSetupDataStructOutput
], InstallationPreparedEventObject$6>;
type InstallationPreparedEventFilter$6 = TypedEventFilter<InstallationPreparedEvent$6>;
interface UninstallationAppliedEventObject {
    dao: string;
    plugin: string;
    preparedSetupId: string;
}
type UninstallationAppliedEvent = TypedEvent<[
    string,
    string,
    string
], UninstallationAppliedEventObject>;
type UninstallationAppliedEventFilter = TypedEventFilter<UninstallationAppliedEvent>;
interface UninstallationPreparedEventObject$6 {
    sender: string;
    dao: string;
    preparedSetupId: string;
    pluginSetupRepo: string;
    versionTag: PluginRepo$2.TagStructOutput;
    setupPayload: IPluginSetup$9.SetupPayloadStructOutput;
    permissions: PermissionLib$a.MultiTargetPermissionStructOutput[];
}
type UninstallationPreparedEvent$6 = TypedEvent<[
    string,
    string,
    string,
    string,
    PluginRepo$2.TagStructOutput,
    IPluginSetup$9.SetupPayloadStructOutput,
    PermissionLib$a.MultiTargetPermissionStructOutput[]
], UninstallationPreparedEventObject$6>;
type UninstallationPreparedEventFilter$6 = TypedEventFilter<UninstallationPreparedEvent$6>;
interface UpdateAppliedEventObject {
    dao: string;
    plugin: string;
    preparedSetupId: string;
    appliedSetupId: string;
}
type UpdateAppliedEvent = TypedEvent<[
    string,
    string,
    string,
    string
], UpdateAppliedEventObject>;
type UpdateAppliedEventFilter = TypedEventFilter<UpdateAppliedEvent>;
interface UpdatePreparedEventObject$6 {
    sender: string;
    dao: string;
    preparedSetupId: string;
    pluginSetupRepo: string;
    versionTag: PluginRepo$2.TagStructOutput;
    setupPayload: IPluginSetup$9.SetupPayloadStructOutput;
    preparedSetupData: IPluginSetup$9.PreparedSetupDataStructOutput;
    initData: string;
}
type UpdatePreparedEvent$6 = TypedEvent<[
    string,
    string,
    string,
    string,
    PluginRepo$2.TagStructOutput,
    IPluginSetup$9.SetupPayloadStructOutput,
    IPluginSetup$9.PreparedSetupDataStructOutput,
    string
], UpdatePreparedEventObject$6>;
type UpdatePreparedEventFilter$6 = TypedEventFilter<UpdatePreparedEvent$6>;
declare namespace PluginSetupProcessor$2 {
    type ApplyInstallationParamsStruct = {
        pluginSetupRef: PluginSetupRefStruct$1;
        plugin: PromiseOrValue<string>;
        permissions: PermissionLib$a.MultiTargetPermissionStruct[];
        helpersHash: PromiseOrValue<BytesLike>;
    };
    type ApplyInstallationParamsStructOutput = [
        PluginSetupRefStructOutput$1,
        string,
        PermissionLib$a.MultiTargetPermissionStructOutput[],
        string
    ] & {
        pluginSetupRef: PluginSetupRefStructOutput$1;
        plugin: string;
        permissions: PermissionLib$a.MultiTargetPermissionStructOutput[];
        helpersHash: string;
    };
    type ApplyUninstallationParamsStruct = {
        plugin: PromiseOrValue<string>;
        pluginSetupRef: PluginSetupRefStruct$1;
        permissions: PermissionLib$a.MultiTargetPermissionStruct[];
    };
    type ApplyUninstallationParamsStructOutput = [
        string,
        PluginSetupRefStructOutput$1,
        PermissionLib$a.MultiTargetPermissionStructOutput[]
    ] & {
        plugin: string;
        pluginSetupRef: PluginSetupRefStructOutput$1;
        permissions: PermissionLib$a.MultiTargetPermissionStructOutput[];
    };
    type ApplyUpdateParamsStruct = {
        plugin: PromiseOrValue<string>;
        pluginSetupRef: PluginSetupRefStruct$1;
        initData: PromiseOrValue<BytesLike>;
        permissions: PermissionLib$a.MultiTargetPermissionStruct[];
        helpersHash: PromiseOrValue<BytesLike>;
    };
    type ApplyUpdateParamsStructOutput = [
        string,
        PluginSetupRefStructOutput$1,
        string,
        PermissionLib$a.MultiTargetPermissionStructOutput[],
        string
    ] & {
        plugin: string;
        pluginSetupRef: PluginSetupRefStructOutput$1;
        initData: string;
        permissions: PermissionLib$a.MultiTargetPermissionStructOutput[];
        helpersHash: string;
    };
    type PrepareInstallationParamsStruct = {
        pluginSetupRef: PluginSetupRefStruct$1;
        data: PromiseOrValue<BytesLike>;
    };
    type PrepareInstallationParamsStructOutput = [
        PluginSetupRefStructOutput$1,
        string
    ] & {
        pluginSetupRef: PluginSetupRefStructOutput$1;
        data: string;
    };
    type PrepareUninstallationParamsStruct = {
        pluginSetupRef: PluginSetupRefStruct$1;
        setupPayload: IPluginSetup$9.SetupPayloadStruct;
    };
    type PrepareUninstallationParamsStructOutput = [
        PluginSetupRefStructOutput$1,
        IPluginSetup$9.SetupPayloadStructOutput
    ] & {
        pluginSetupRef: PluginSetupRefStructOutput$1;
        setupPayload: IPluginSetup$9.SetupPayloadStructOutput;
    };
    type PrepareUpdateParamsStruct = {
        currentVersionTag: PluginRepo$2.TagStruct;
        newVersionTag: PluginRepo$2.TagStruct;
        pluginSetupRepo: PromiseOrValue<string>;
        setupPayload: IPluginSetup$9.SetupPayloadStruct;
    };
    type PrepareUpdateParamsStructOutput = [
        PluginRepo$2.TagStructOutput,
        PluginRepo$2.TagStructOutput,
        string,
        IPluginSetup$9.SetupPayloadStructOutput
    ] & {
        currentVersionTag: PluginRepo$2.TagStructOutput;
        newVersionTag: PluginRepo$2.TagStructOutput;
        pluginSetupRepo: string;
        setupPayload: IPluginSetup$9.SetupPayloadStructOutput;
    };
}
interface PluginSetupProcessor$2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginSetupProcessorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        APPLY_INSTALLATION_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        APPLY_UNINSTALLATION_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        APPLY_UPDATE_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        applyInstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyInstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        applyUninstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyUninstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        applyUpdate(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyUpdateParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareInstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareUninstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareUpdateParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        repoRegistry(overrides?: CallOverrides): Promise<[string]>;
        states(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string
        ] & {
            blockNumber: BigNumber;
            currentAppliedSetupId: string;
        }>;
        validatePreparedSetupId(pluginInstallationId: PromiseOrValue<BytesLike>, preparedSetupId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[void]>;
    };
    APPLY_INSTALLATION_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    APPLY_UNINSTALLATION_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    APPLY_UPDATE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    applyInstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyInstallationParamsStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    applyUninstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyUninstallationParamsStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    applyUpdate(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyUpdateParamsStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareInstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareInstallationParamsStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUninstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareUninstallationParamsStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUpdate(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareUpdateParamsStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    repoRegistry(overrides?: CallOverrides): Promise<string>;
    states(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        string
    ] & {
        blockNumber: BigNumber;
        currentAppliedSetupId: string;
    }>;
    validatePreparedSetupId(pluginInstallationId: PromiseOrValue<BytesLike>, preparedSetupId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    callStatic: {
        APPLY_INSTALLATION_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        APPLY_UNINSTALLATION_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        APPLY_UPDATE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        applyInstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyInstallationParamsStruct, overrides?: CallOverrides): Promise<void>;
        applyUninstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyUninstallationParamsStruct, overrides?: CallOverrides): Promise<void>;
        applyUpdate(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyUpdateParamsStruct, overrides?: CallOverrides): Promise<void>;
        prepareInstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareInstallationParamsStruct, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$9.PreparedSetupDataStructOutput
        ] & {
            plugin: string;
            preparedSetupData: IPluginSetup$9.PreparedSetupDataStructOutput;
        }>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareUninstallationParamsStruct, overrides?: CallOverrides): Promise<PermissionLib$a.MultiTargetPermissionStructOutput[]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareUpdateParamsStruct, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$9.PreparedSetupDataStructOutput
        ] & {
            initData: string;
            preparedSetupData: IPluginSetup$9.PreparedSetupDataStructOutput;
        }>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        repoRegistry(overrides?: CallOverrides): Promise<string>;
        states(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string
        ] & {
            blockNumber: BigNumber;
            currentAppliedSetupId: string;
        }>;
        validatePreparedSetupId(pluginInstallationId: PromiseOrValue<BytesLike>, preparedSetupId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "InstallationApplied(address,address,bytes32,bytes32)"(dao?: PromiseOrValue<string> | null, plugin?: PromiseOrValue<string> | null, preparedSetupId?: null, appliedSetupId?: null): InstallationAppliedEventFilter;
        InstallationApplied(dao?: PromiseOrValue<string> | null, plugin?: PromiseOrValue<string> | null, preparedSetupId?: null, appliedSetupId?: null): InstallationAppliedEventFilter;
        "InstallationPrepared(address,address,bytes32,address,tuple,bytes,address,tuple)"(sender?: PromiseOrValue<string> | null, dao?: PromiseOrValue<string> | null, preparedSetupId?: null, pluginSetupRepo?: PromiseOrValue<string> | null, versionTag?: null, data?: null, plugin?: null, preparedSetupData?: null): InstallationPreparedEventFilter$6;
        InstallationPrepared(sender?: PromiseOrValue<string> | null, dao?: PromiseOrValue<string> | null, preparedSetupId?: null, pluginSetupRepo?: PromiseOrValue<string> | null, versionTag?: null, data?: null, plugin?: null, preparedSetupData?: null): InstallationPreparedEventFilter$6;
        "UninstallationApplied(address,address,bytes32)"(dao?: PromiseOrValue<string> | null, plugin?: PromiseOrValue<string> | null, preparedSetupId?: null): UninstallationAppliedEventFilter;
        UninstallationApplied(dao?: PromiseOrValue<string> | null, plugin?: PromiseOrValue<string> | null, preparedSetupId?: null): UninstallationAppliedEventFilter;
        "UninstallationPrepared(address,address,bytes32,address,tuple,tuple,tuple[])"(sender?: PromiseOrValue<string> | null, dao?: PromiseOrValue<string> | null, preparedSetupId?: null, pluginSetupRepo?: PromiseOrValue<string> | null, versionTag?: null, setupPayload?: null, permissions?: null): UninstallationPreparedEventFilter$6;
        UninstallationPrepared(sender?: PromiseOrValue<string> | null, dao?: PromiseOrValue<string> | null, preparedSetupId?: null, pluginSetupRepo?: PromiseOrValue<string> | null, versionTag?: null, setupPayload?: null, permissions?: null): UninstallationPreparedEventFilter$6;
        "UpdateApplied(address,address,bytes32,bytes32)"(dao?: PromiseOrValue<string> | null, plugin?: PromiseOrValue<string> | null, preparedSetupId?: null, appliedSetupId?: null): UpdateAppliedEventFilter;
        UpdateApplied(dao?: PromiseOrValue<string> | null, plugin?: PromiseOrValue<string> | null, preparedSetupId?: null, appliedSetupId?: null): UpdateAppliedEventFilter;
        "UpdatePrepared(address,address,bytes32,address,tuple,tuple,tuple,bytes)"(sender?: PromiseOrValue<string> | null, dao?: PromiseOrValue<string> | null, preparedSetupId?: null, pluginSetupRepo?: PromiseOrValue<string> | null, versionTag?: null, setupPayload?: null, preparedSetupData?: null, initData?: null): UpdatePreparedEventFilter$6;
        UpdatePrepared(sender?: PromiseOrValue<string> | null, dao?: PromiseOrValue<string> | null, preparedSetupId?: null, pluginSetupRepo?: PromiseOrValue<string> | null, versionTag?: null, setupPayload?: null, preparedSetupData?: null, initData?: null): UpdatePreparedEventFilter$6;
    };
    estimateGas: {
        APPLY_INSTALLATION_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        APPLY_UNINSTALLATION_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        APPLY_UPDATE_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        applyInstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyInstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        applyUninstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyUninstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        applyUpdate(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyUpdateParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareInstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareInstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareUninstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUpdate(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareUpdateParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        repoRegistry(overrides?: CallOverrides): Promise<BigNumber>;
        states(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        validatePreparedSetupId(pluginInstallationId: PromiseOrValue<BytesLike>, preparedSetupId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        APPLY_INSTALLATION_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        APPLY_UNINSTALLATION_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        APPLY_UPDATE_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        applyInstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyInstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        applyUninstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyUninstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        applyUpdate(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.ApplyUpdateParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareInstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareUninstallationParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _params: PluginSetupProcessor$2.PrepareUpdateParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        repoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        states(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        validatePreparedSetupId(pluginInstallationId: PromiseOrValue<BytesLike>, preparedSetupId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace index$Y {
  export {
    PluginSetupProcessor$2 as PluginSetupProcessor,
  };
}

declare namespace index$X {
  export {
    index$Z as repo,
    index$Y as setup,
  };
}

interface ENSSubdomainRegistrarInterface extends utils.Interface {
    functions: {
        "REGISTER_ENS_SUBDOMAIN_PERMISSION_ID()": FunctionFragment;
        "UPGRADE_REGISTRAR_PERMISSION_ID()": FunctionFragment;
        "dao()": FunctionFragment;
        "ens()": FunctionFragment;
        "initialize(address,address,bytes32)": FunctionFragment;
        "node()": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "registerSubnode(bytes32,address)": FunctionFragment;
        "resolver()": FunctionFragment;
        "setDefaultResolver(address)": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "REGISTER_ENS_SUBDOMAIN_PERMISSION_ID" | "UPGRADE_REGISTRAR_PERMISSION_ID" | "dao" | "ens" | "initialize" | "node" | "protocolVersion" | "proxiableUUID" | "registerSubnode" | "resolver" | "setDefaultResolver" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "REGISTER_ENS_SUBDOMAIN_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_REGISTRAR_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "dao", values?: undefined): string;
    encodeFunctionData(functionFragment: "ens", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "node", values?: undefined): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "registerSubnode", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "resolver", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultResolver", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "REGISTER_ENS_SUBDOMAIN_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_REGISTRAR_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "node", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerSubnode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultResolver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject$5 {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent$5 = TypedEvent<[
    string,
    string
], AdminChangedEventObject$5>;
type AdminChangedEventFilter$5 = TypedEventFilter<AdminChangedEvent$5>;
interface BeaconUpgradedEventObject$5 {
    beacon: string;
}
type BeaconUpgradedEvent$5 = TypedEvent<[
    string
], BeaconUpgradedEventObject$5>;
type BeaconUpgradedEventFilter$5 = TypedEventFilter<BeaconUpgradedEvent$5>;
interface InitializedEventObject$8 {
    version: number;
}
type InitializedEvent$8 = TypedEvent<[number], InitializedEventObject$8>;
type InitializedEventFilter$8 = TypedEventFilter<InitializedEvent$8>;
interface UpgradedEventObject$5 {
    implementation: string;
}
type UpgradedEvent$5 = TypedEvent<[string], UpgradedEventObject$5>;
type UpgradedEventFilter$5 = TypedEventFilter<UpgradedEvent$5>;
interface ENSSubdomainRegistrar extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ENSSubdomainRegistrarInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        REGISTER_ENS_SUBDOMAIN_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        UPGRADE_REGISTRAR_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        dao(overrides?: CallOverrides): Promise<[string]>;
        ens(overrides?: CallOverrides): Promise<[string]>;
        initialize(_managingDao: PromiseOrValue<string>, _ens: PromiseOrValue<string>, _node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        node(overrides?: CallOverrides): Promise<[string]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;
        registerSubnode(_label: PromiseOrValue<BytesLike>, _targetAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        resolver(overrides?: CallOverrides): Promise<[string]>;
        setDefaultResolver(_resolver: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    REGISTER_ENS_SUBDOMAIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    UPGRADE_REGISTRAR_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    dao(overrides?: CallOverrides): Promise<string>;
    ens(overrides?: CallOverrides): Promise<string>;
    initialize(_managingDao: PromiseOrValue<string>, _ens: PromiseOrValue<string>, _node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    node(overrides?: CallOverrides): Promise<string>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    proxiableUUID(overrides?: CallOverrides): Promise<string>;
    registerSubnode(_label: PromiseOrValue<BytesLike>, _targetAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    resolver(overrides?: CallOverrides): Promise<string>;
    setDefaultResolver(_resolver: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        REGISTER_ENS_SUBDOMAIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        UPGRADE_REGISTRAR_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        dao(overrides?: CallOverrides): Promise<string>;
        ens(overrides?: CallOverrides): Promise<string>;
        initialize(_managingDao: PromiseOrValue<string>, _ens: PromiseOrValue<string>, _node: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        node(overrides?: CallOverrides): Promise<string>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        proxiableUUID(overrides?: CallOverrides): Promise<string>;
        registerSubnode(_label: PromiseOrValue<BytesLike>, _targetAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        resolver(overrides?: CallOverrides): Promise<string>;
        setDefaultResolver(_resolver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$5;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$5;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$5;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$5;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$8;
        Initialized(version?: null): InitializedEventFilter$8;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$5;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$5;
    };
    estimateGas: {
        REGISTER_ENS_SUBDOMAIN_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        UPGRADE_REGISTRAR_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        dao(overrides?: CallOverrides): Promise<BigNumber>;
        ens(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_managingDao: PromiseOrValue<string>, _ens: PromiseOrValue<string>, _node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        node(overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;
        registerSubnode(_label: PromiseOrValue<BytesLike>, _targetAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        resolver(overrides?: CallOverrides): Promise<BigNumber>;
        setDefaultResolver(_resolver: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        REGISTER_ENS_SUBDOMAIN_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        UPGRADE_REGISTRAR_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ens(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_managingDao: PromiseOrValue<string>, _ens: PromiseOrValue<string>, _node: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        node(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerSubnode(_label: PromiseOrValue<BytesLike>, _targetAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDefaultResolver(_resolver: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$W_ENSSubdomainRegistrar = ENSSubdomainRegistrar;
declare namespace index$W {
  export {
    index$W_ENSSubdomainRegistrar as ENSSubdomainRegistrar,
  };
}

interface InterfaceBasedRegistryInterface extends utils.Interface {
    functions: {
        "UPGRADE_REGISTRY_PERMISSION_ID()": FunctionFragment;
        "dao()": FunctionFragment;
        "entries(address)": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "targetInterfaceId()": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "UPGRADE_REGISTRY_PERMISSION_ID" | "dao" | "entries" | "proxiableUUID" | "targetInterfaceId" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "UPGRADE_REGISTRY_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "dao", values?: undefined): string;
    encodeFunctionData(functionFragment: "entries", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetInterfaceId", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "UPGRADE_REGISTRY_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "entries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetInterfaceId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject$4 {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent$4 = TypedEvent<[
    string,
    string
], AdminChangedEventObject$4>;
type AdminChangedEventFilter$4 = TypedEventFilter<AdminChangedEvent$4>;
interface BeaconUpgradedEventObject$4 {
    beacon: string;
}
type BeaconUpgradedEvent$4 = TypedEvent<[
    string
], BeaconUpgradedEventObject$4>;
type BeaconUpgradedEventFilter$4 = TypedEventFilter<BeaconUpgradedEvent$4>;
interface InitializedEventObject$7 {
    version: number;
}
type InitializedEvent$7 = TypedEvent<[number], InitializedEventObject$7>;
type InitializedEventFilter$7 = TypedEventFilter<InitializedEvent$7>;
interface UpgradedEventObject$4 {
    implementation: string;
}
type UpgradedEvent$4 = TypedEvent<[string], UpgradedEventObject$4>;
type UpgradedEventFilter$4 = TypedEventFilter<UpgradedEvent$4>;
interface InterfaceBasedRegistry extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: InterfaceBasedRegistryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        dao(overrides?: CallOverrides): Promise<[string]>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;
        targetInterfaceId(overrides?: CallOverrides): Promise<[string]>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    dao(overrides?: CallOverrides): Promise<string>;
    entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    proxiableUUID(overrides?: CallOverrides): Promise<string>;
    targetInterfaceId(overrides?: CallOverrides): Promise<string>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        dao(overrides?: CallOverrides): Promise<string>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        proxiableUUID(overrides?: CallOverrides): Promise<string>;
        targetInterfaceId(overrides?: CallOverrides): Promise<string>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$4;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$4;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$4;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$4;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$7;
        Initialized(version?: null): InitializedEventFilter$7;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$4;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$4;
    };
    estimateGas: {
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        dao(overrides?: CallOverrides): Promise<BigNumber>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;
        targetInterfaceId(overrides?: CallOverrides): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetInterfaceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$V_InterfaceBasedRegistry = InterfaceBasedRegistry;
declare namespace index$V {
  export {
    index$W as ens,
    index$V_InterfaceBasedRegistry as InterfaceBasedRegistry,
  };
}

declare namespace index$U {
  export {
    index$$ as dao,
    index$X as plugin,
    index$V as utils,
  };
}

interface CallbackHandlerMockHelperInterface extends utils.Interface {
    functions: {
        "handleCallback(bytes4,bytes)": FunctionFragment;
        "registerCallback(bytes4,bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "handleCallback" | "registerCallback"): FunctionFragment;
    encodeFunctionData(functionFragment: "handleCallback", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "registerCallback", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "handleCallback", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerCallback", data: BytesLike): Result;
    events: {
        "CallbackReceived(address,bytes4,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "CallbackReceived"): EventFragment;
}
interface CallbackReceivedEventObject {
    sender: string;
    sig: string;
    data: string;
}
type CallbackReceivedEvent = TypedEvent<[
    string,
    string,
    string
], CallbackReceivedEventObject>;
type CallbackReceivedEventFilter = TypedEventFilter<CallbackReceivedEvent>;
interface CallbackHandlerMockHelper extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: CallbackHandlerMockHelperInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        handleCallback(selector: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        registerCallback(selector: PromiseOrValue<BytesLike>, magicNumber: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    handleCallback(selector: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    registerCallback(selector: PromiseOrValue<BytesLike>, magicNumber: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        handleCallback(selector: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        registerCallback(selector: PromiseOrValue<BytesLike>, magicNumber: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "CallbackReceived(address,bytes4,bytes)"(sender?: null, sig?: PromiseOrValue<BytesLike> | null, data?: null): CallbackReceivedEventFilter;
        CallbackReceived(sender?: null, sig?: PromiseOrValue<BytesLike> | null, data?: null): CallbackReceivedEventFilter;
    };
    estimateGas: {
        handleCallback(selector: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        registerCallback(selector: PromiseOrValue<BytesLike>, magicNumber: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        handleCallback(selector: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        registerCallback(selector: PromiseOrValue<BytesLike>, magicNumber: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$T_CallbackHandlerMockHelper = CallbackHandlerMockHelper;
declare namespace index$T {
  export {
    index$T_CallbackHandlerMockHelper as CallbackHandlerMockHelper,
  };
}

interface GasConsumerInterface extends utils.Interface {
    functions: {
        "consumeGas(uint256)": FunctionFragment;
        "store(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "consumeGas" | "store"): FunctionFragment;
    encodeFunctionData(functionFragment: "consumeGas", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "store", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "consumeGas", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
    events: {};
}
interface GasConsumer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: GasConsumerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        consumeGas(count: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        store(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    consumeGas(count: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    store(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        consumeGas(count: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        store(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        consumeGas(count: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        store(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        consumeGas(count: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        store(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$S_GasConsumer = GasConsumer;
declare namespace index$S {
  export {
    index$S_GasConsumer as GasConsumer,
  };
}

interface ActionExecuteInterface extends utils.Interface {
    functions: {
        "fail()": FunctionFragment;
        "setTest(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "fail" | "setTest"): FunctionFragment;
    encodeFunctionData(functionFragment: "fail", values?: undefined): string;
    encodeFunctionData(functionFragment: "setTest", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "fail", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTest", data: BytesLike): Result;
    events: {};
}
interface ActionExecute extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ActionExecuteInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        fail(overrides?: CallOverrides): Promise<[void]>;
        setTest(newNum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    fail(overrides?: CallOverrides): Promise<void>;
    setTest(newNum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        fail(overrides?: CallOverrides): Promise<void>;
        setTest(newNum: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        fail(overrides?: CallOverrides): Promise<BigNumber>;
        setTest(newNum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        fail(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setTest(newNum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$R_ActionExecute = ActionExecute;
declare namespace index$R {
  export {
    index$T as callbackHandlerHelperMockSol,
    index$S as gasConsumerHelperSol,
    index$R_ActionExecute as ActionExecute,
  };
}

interface PermissionConditionMockInterface extends utils.Interface {
    functions: {
        "answer()": FunctionFragment;
        "isGranted(address,address,bytes32,bytes)": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "setAnswer(bool)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "answer" | "isGranted" | "protocolVersion" | "setAnswer" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "answer", values?: undefined): string;
    encodeFunctionData(functionFragment: "isGranted", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "setAnswer", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "answer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {};
}
interface PermissionConditionMock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PermissionConditionMockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        answer(overrides?: CallOverrides): Promise<[boolean]>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        setAnswer(_answer: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    answer(overrides?: CallOverrides): Promise<boolean>;
    isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    setAnswer(_answer: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        answer(overrides?: CallOverrides): Promise<boolean>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        setAnswer(_answer: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        answer(overrides?: CallOverrides): Promise<BigNumber>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        setAnswer(_answer: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        answer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setAnswer(_answer: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace PermissionLib$9 {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
    type SingleTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        who: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type SingleTargetPermissionStructOutput = [number, string, string] & {
        operation: number;
        who: string;
        permissionId: string;
    };
}
interface PermissionManagerTestInterface extends utils.Interface {
    functions: {
        "ROOT_PERMISSION_ID()": FunctionFragment;
        "TEST_PERMISSION_1_ID()": FunctionFragment;
        "TEST_PERMISSION_2_ID()": FunctionFragment;
        "applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])": FunctionFragment;
        "applySingleTargetPermissions(address,(uint8,address,bytes32)[])": FunctionFragment;
        "getAnyAddr()": FunctionFragment;
        "getAuthPermission(address,address,bytes32)": FunctionFragment;
        "getPermissionHash(address,address,bytes32)": FunctionFragment;
        "grant(address,address,bytes32)": FunctionFragment;
        "grantWithCondition(address,address,bytes32,address)": FunctionFragment;
        "hasPermission(address,address,bytes32,bytes)": FunctionFragment;
        "init(address)": FunctionFragment;
        "isGranted(address,address,bytes32,bytes)": FunctionFragment;
        "revoke(address,address,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ROOT_PERMISSION_ID" | "TEST_PERMISSION_1_ID" | "TEST_PERMISSION_2_ID" | "applyMultiTargetPermissions" | "applySingleTargetPermissions" | "getAnyAddr" | "getAuthPermission" | "getPermissionHash" | "grant" | "grantWithCondition" | "hasPermission" | "init" | "isGranted" | "revoke"): FunctionFragment;
    encodeFunctionData(functionFragment: "ROOT_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "TEST_PERMISSION_1_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "TEST_PERMISSION_2_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "applyMultiTargetPermissions", values: [PermissionLib$9.MultiTargetPermissionStruct[]]): string;
    encodeFunctionData(functionFragment: "applySingleTargetPermissions", values: [
        PromiseOrValue<string>,
        PermissionLib$9.SingleTargetPermissionStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "getAnyAddr", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAuthPermission", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getPermissionHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "grant", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "grantWithCondition", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "hasPermission", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "init", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isGranted", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "revoke", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "ROOT_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "TEST_PERMISSION_1_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "TEST_PERMISSION_2_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applyMultiTargetPermissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applySingleTargetPermissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAnyAddr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAuthPermission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPermissionHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantWithCondition", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasPermission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
    events: {
        "Granted(bytes32,address,address,address,address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "Revoked(bytes32,address,address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Granted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
}
interface GrantedEventObject {
    permissionId: string;
    here: string;
    where: string;
    who: string;
    condition: string;
}
type GrantedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string
], GrantedEventObject>;
type GrantedEventFilter = TypedEventFilter<GrantedEvent>;
interface InitializedEventObject$6 {
    version: number;
}
type InitializedEvent$6 = TypedEvent<[number], InitializedEventObject$6>;
type InitializedEventFilter$6 = TypedEventFilter<InitializedEvent$6>;
interface RevokedEventObject {
    permissionId: string;
    here: string;
    where: string;
    who: string;
}
type RevokedEvent = TypedEvent<[
    string,
    string,
    string,
    string
], RevokedEventObject>;
type RevokedEventFilter = TypedEventFilter<RevokedEvent>;
interface PermissionManagerTest extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PermissionManagerTestInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        TEST_PERMISSION_1_ID(overrides?: CallOverrides): Promise<[string]>;
        TEST_PERMISSION_2_ID(overrides?: CallOverrides): Promise<[string]>;
        applyMultiTargetPermissions(_items: PermissionLib$9.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$9.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getAnyAddr(overrides?: CallOverrides): Promise<[string]>;
        getAuthPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getPermissionHash(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        init(_who: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    TEST_PERMISSION_1_ID(overrides?: CallOverrides): Promise<string>;
    TEST_PERMISSION_2_ID(overrides?: CallOverrides): Promise<string>;
    applyMultiTargetPermissions(_items: PermissionLib$9.MultiTargetPermissionStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$9.SingleTargetPermissionStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getAnyAddr(overrides?: CallOverrides): Promise<string>;
    getAuthPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getPermissionHash(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    init(_who: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        TEST_PERMISSION_1_ID(overrides?: CallOverrides): Promise<string>;
        TEST_PERMISSION_2_ID(overrides?: CallOverrides): Promise<string>;
        applyMultiTargetPermissions(_items: PermissionLib$9.MultiTargetPermissionStruct[], overrides?: CallOverrides): Promise<void>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$9.SingleTargetPermissionStruct[], overrides?: CallOverrides): Promise<void>;
        getAnyAddr(overrides?: CallOverrides): Promise<string>;
        getAuthPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getPermissionHash(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        init(_who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Granted(bytes32,address,address,address,address)"(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null, condition?: null): GrantedEventFilter;
        Granted(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null, condition?: null): GrantedEventFilter;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$6;
        Initialized(version?: null): InitializedEventFilter$6;
        "Revoked(bytes32,address,address,address)"(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null): RevokedEventFilter;
        Revoked(permissionId?: PromiseOrValue<BytesLike> | null, here?: PromiseOrValue<string> | null, where?: null, who?: PromiseOrValue<string> | null): RevokedEventFilter;
    };
    estimateGas: {
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        TEST_PERMISSION_1_ID(overrides?: CallOverrides): Promise<BigNumber>;
        TEST_PERMISSION_2_ID(overrides?: CallOverrides): Promise<BigNumber>;
        applyMultiTargetPermissions(_items: PermissionLib$9.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$9.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getAnyAddr(overrides?: CallOverrides): Promise<BigNumber>;
        getAuthPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getPermissionHash(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        init(_who: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        TEST_PERMISSION_1_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        TEST_PERMISSION_2_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        applyMultiTargetPermissions(_items: PermissionLib$9.MultiTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        applySingleTargetPermissions(_where: PromiseOrValue<string>, items: PermissionLib$9.SingleTargetPermissionStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getAnyAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAuthPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPermissionHash(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grant(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        grantWithCondition(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _condition: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasPermission(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        init(_who: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isGranted(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revoke(_where: PromiseOrValue<string>, _who: PromiseOrValue<string>, _permissionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$Q_PermissionConditionMock = PermissionConditionMock;
type index$Q_PermissionManagerTest = PermissionManagerTest;
declare namespace index$Q {
  export {
    index$Q_PermissionConditionMock as PermissionConditionMock,
    index$Q_PermissionManagerTest as PermissionManagerTest,
  };
}

declare namespace IPlugin$5 {
    type TargetConfigStruct = {
        target: PromiseOrValue<string>;
        operation: PromiseOrValue<BigNumberish>;
    };
    type TargetConfigStructOutput = [string, number] & {
        target: string;
        operation: number;
    };
}
interface PluginCloneableV1MockInterface extends utils.Interface {
    functions: {
        "SET_TARGET_CONFIG_PERMISSION_ID()": FunctionFragment;
        "dao()": FunctionFragment;
        "getCurrentTargetConfig()": FunctionFragment;
        "getTargetConfig()": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "pluginType()": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "setTargetConfig((address,uint8))": FunctionFragment;
        "state1()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "SET_TARGET_CONFIG_PERMISSION_ID" | "dao" | "getCurrentTargetConfig" | "getTargetConfig" | "initialize" | "pluginType" | "protocolVersion" | "setTargetConfig" | "state1" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "dao", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCurrentTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "pluginType", values?: undefined): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "setTargetConfig", values: [IPlugin$5.TargetConfigStruct]): string;
    encodeFunctionData(functionFragment: "state1", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pluginType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "TargetSet(tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
}
interface InitializedEventObject$5 {
    version: number;
}
type InitializedEvent$5 = TypedEvent<[number], InitializedEventObject$5>;
type InitializedEventFilter$5 = TypedEventFilter<InitializedEvent$5>;
interface TargetSetEventObject$5 {
    newTargetConfig: IPlugin$5.TargetConfigStructOutput;
}
type TargetSetEvent$5 = TypedEvent<[
    IPlugin$5.TargetConfigStructOutput
], TargetSetEventObject$5>;
type TargetSetEventFilter$5 = TypedEventFilter<TargetSetEvent$5>;
interface PluginCloneableV1Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginCloneableV1MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        dao(overrides?: CallOverrides): Promise<[string]>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<[IPlugin$5.TargetConfigStructOutput]>;
        getTargetConfig(overrides?: CallOverrides): Promise<[IPlugin$5.TargetConfigStructOutput]>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        pluginType(overrides?: CallOverrides): Promise<[number]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        setTargetConfig(_targetConfig: IPlugin$5.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        state1(overrides?: CallOverrides): Promise<[BigNumber]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    dao(overrides?: CallOverrides): Promise<string>;
    getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin$5.TargetConfigStructOutput>;
    getTargetConfig(overrides?: CallOverrides): Promise<IPlugin$5.TargetConfigStructOutput>;
    initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    pluginType(overrides?: CallOverrides): Promise<number>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    setTargetConfig(_targetConfig: IPlugin$5.TargetConfigStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    state1(overrides?: CallOverrides): Promise<BigNumber>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        dao(overrides?: CallOverrides): Promise<string>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin$5.TargetConfigStructOutput>;
        getTargetConfig(overrides?: CallOverrides): Promise<IPlugin$5.TargetConfigStructOutput>;
        initialize(_dao: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        pluginType(overrides?: CallOverrides): Promise<number>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        setTargetConfig(_targetConfig: IPlugin$5.TargetConfigStruct, overrides?: CallOverrides): Promise<void>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter$5;
        Initialized(version?: null): InitializedEventFilter$5;
        "TargetSet(tuple)"(newTargetConfig?: null): TargetSetEventFilter$5;
        TargetSet(newTargetConfig?: null): TargetSetEventFilter$5;
    };
    estimateGas: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        dao(overrides?: CallOverrides): Promise<BigNumber>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        getTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        pluginType(overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        setTargetConfig(_targetConfig: IPlugin$5.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        pluginType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setTargetConfig(_targetConfig: IPlugin$5.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        state1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface PluginCloneableV1MockBadInterface extends utils.Interface {
    functions: {
        "initialize(address)": FunctionFragment;
        "state1()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "initialize" | "state1"): FunctionFragment;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "state1", values?: undefined): string;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state1", data: BytesLike): Result;
    events: {};
}
interface PluginCloneableV1MockBad extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginCloneableV1MockBadInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        state1(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    state1(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        initialize(_dao: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        state1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IPlugin$4 {
    type TargetConfigStruct = {
        target: PromiseOrValue<string>;
        operation: PromiseOrValue<BigNumberish>;
    };
    type TargetConfigStructOutput = [string, number] & {
        target: string;
        operation: number;
    };
}
interface PluginCloneableV2MockInterface extends utils.Interface {
    functions: {
        "SET_TARGET_CONFIG_PERMISSION_ID()": FunctionFragment;
        "dao()": FunctionFragment;
        "getCurrentTargetConfig()": FunctionFragment;
        "getTargetConfig()": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "pluginType()": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "setTargetConfig((address,uint8))": FunctionFragment;
        "state1()": FunctionFragment;
        "state2()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "SET_TARGET_CONFIG_PERMISSION_ID" | "dao" | "getCurrentTargetConfig" | "getTargetConfig" | "initialize" | "pluginType" | "protocolVersion" | "setTargetConfig" | "state1" | "state2" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "dao", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCurrentTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "pluginType", values?: undefined): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "setTargetConfig", values: [IPlugin$4.TargetConfigStruct]): string;
    encodeFunctionData(functionFragment: "state1", values?: undefined): string;
    encodeFunctionData(functionFragment: "state2", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pluginType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "TargetSet(tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
}
interface InitializedEventObject$4 {
    version: number;
}
type InitializedEvent$4 = TypedEvent<[number], InitializedEventObject$4>;
type InitializedEventFilter$4 = TypedEventFilter<InitializedEvent$4>;
interface TargetSetEventObject$4 {
    newTargetConfig: IPlugin$4.TargetConfigStructOutput;
}
type TargetSetEvent$4 = TypedEvent<[
    IPlugin$4.TargetConfigStructOutput
], TargetSetEventObject$4>;
type TargetSetEventFilter$4 = TypedEventFilter<TargetSetEvent$4>;
interface PluginCloneableV2Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginCloneableV2MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        dao(overrides?: CallOverrides): Promise<[string]>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<[IPlugin$4.TargetConfigStructOutput]>;
        getTargetConfig(overrides?: CallOverrides): Promise<[IPlugin$4.TargetConfigStructOutput]>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        pluginType(overrides?: CallOverrides): Promise<[number]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        setTargetConfig(_targetConfig: IPlugin$4.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        state1(overrides?: CallOverrides): Promise<[BigNumber]>;
        state2(overrides?: CallOverrides): Promise<[BigNumber]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    dao(overrides?: CallOverrides): Promise<string>;
    getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin$4.TargetConfigStructOutput>;
    getTargetConfig(overrides?: CallOverrides): Promise<IPlugin$4.TargetConfigStructOutput>;
    initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    pluginType(overrides?: CallOverrides): Promise<number>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    setTargetConfig(_targetConfig: IPlugin$4.TargetConfigStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    state1(overrides?: CallOverrides): Promise<BigNumber>;
    state2(overrides?: CallOverrides): Promise<BigNumber>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        dao(overrides?: CallOverrides): Promise<string>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin$4.TargetConfigStructOutput>;
        getTargetConfig(overrides?: CallOverrides): Promise<IPlugin$4.TargetConfigStructOutput>;
        initialize(_dao: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        pluginType(overrides?: CallOverrides): Promise<number>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        setTargetConfig(_targetConfig: IPlugin$4.TargetConfigStruct, overrides?: CallOverrides): Promise<void>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        state2(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter$4;
        Initialized(version?: null): InitializedEventFilter$4;
        "TargetSet(tuple)"(newTargetConfig?: null): TargetSetEventFilter$4;
        TargetSet(newTargetConfig?: null): TargetSetEventFilter$4;
    };
    estimateGas: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        dao(overrides?: CallOverrides): Promise<BigNumber>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        getTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        pluginType(overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        setTargetConfig(_targetConfig: IPlugin$4.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        state2(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        pluginType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setTargetConfig(_targetConfig: IPlugin$4.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        state1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        state2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$P_PluginCloneableV1Mock = PluginCloneableV1Mock;
type index$P_PluginCloneableV1MockBad = PluginCloneableV1MockBad;
type index$P_PluginCloneableV2Mock = PluginCloneableV2Mock;
declare namespace index$P {
  export {
    index$P_PluginCloneableV1Mock as PluginCloneableV1Mock,
    index$P_PluginCloneableV1MockBad as PluginCloneableV1MockBad,
    index$P_PluginCloneableV2Mock as PluginCloneableV2Mock,
  };
}

declare namespace PermissionLib$8 {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
declare namespace IPluginSetup$8 {
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib$8.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib$8.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib$8.MultiTargetPermissionStructOutput[];
    };
    type SetupPayloadStruct = {
        plugin: PromiseOrValue<string>;
        currentHelpers: PromiseOrValue<string>[];
        data: PromiseOrValue<BytesLike>;
    };
    type SetupPayloadStructOutput = [string, string[], string] & {
        plugin: string;
        currentHelpers: string[];
        data: string;
    };
}
interface PluginCloneableSetupV1MockInterface extends utils.Interface {
    functions: {
        "implementation()": FunctionFragment;
        "prepareInstallation(address,bytes)": FunctionFragment;
        "prepareUninstallation(address,(address,address[],bytes))": FunctionFragment;
        "prepareUpdate(address,uint16,(address,address[],bytes))": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "implementation" | "prepareInstallation" | "prepareUninstallation" | "prepareUpdate" | "protocolVersion" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "prepareInstallation", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "prepareUninstallation", values: [PromiseOrValue<string>, IPluginSetup$8.SetupPayloadStruct]): string;
    encodeFunctionData(functionFragment: "prepareUpdate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IPluginSetup$8.SetupPayloadStruct
    ]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {};
}
interface PluginCloneableSetupV1Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginCloneableSetupV1MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        implementation(overrides?: CallOverrides): Promise<[string]>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$8.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$8.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    implementation(overrides?: CallOverrides): Promise<string>;
    prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$8.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$8.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        implementation(overrides?: CallOverrides): Promise<string>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$8.PreparedSetupDataStructOutput
        ] & {
            plugin: string;
            preparedSetupData: IPluginSetup$8.PreparedSetupDataStructOutput;
        }>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$8.SetupPayloadStruct, overrides?: CallOverrides): Promise<PermissionLib$8.MultiTargetPermissionStructOutput[]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$8.SetupPayloadStruct, overrides?: CallOverrides): Promise<[string, IPluginSetup$8.PreparedSetupDataStructOutput]>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$8.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$8.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$8.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$8.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace PermissionLib$7 {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
declare namespace IPluginSetup$7 {
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib$7.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib$7.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib$7.MultiTargetPermissionStructOutput[];
    };
    type SetupPayloadStruct = {
        plugin: PromiseOrValue<string>;
        currentHelpers: PromiseOrValue<string>[];
        data: PromiseOrValue<BytesLike>;
    };
    type SetupPayloadStructOutput = [string, string[], string] & {
        plugin: string;
        currentHelpers: string[];
        data: string;
    };
}
interface PluginCloneableSetupV1MockBadInterface extends utils.Interface {
    functions: {
        "implementation()": FunctionFragment;
        "prepareInstallation(address,bytes)": FunctionFragment;
        "prepareUninstallation(address,(address,address[],bytes))": FunctionFragment;
        "prepareUpdate(address,uint16,(address,address[],bytes))": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "implementation" | "prepareInstallation" | "prepareUninstallation" | "prepareUpdate" | "protocolVersion" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "prepareInstallation", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "prepareUninstallation", values: [PromiseOrValue<string>, IPluginSetup$7.SetupPayloadStruct]): string;
    encodeFunctionData(functionFragment: "prepareUpdate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IPluginSetup$7.SetupPayloadStruct
    ]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {};
}
interface PluginCloneableSetupV1MockBad extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginCloneableSetupV1MockBadInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        implementation(overrides?: CallOverrides): Promise<[string]>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$7.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$7.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    implementation(overrides?: CallOverrides): Promise<string>;
    prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$7.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$7.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        implementation(overrides?: CallOverrides): Promise<string>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$7.PreparedSetupDataStructOutput
        ] & {
            plugin: string;
            preparedSetupData: IPluginSetup$7.PreparedSetupDataStructOutput;
        }>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$7.SetupPayloadStruct, overrides?: CallOverrides): Promise<PermissionLib$7.MultiTargetPermissionStructOutput[]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$7.SetupPayloadStruct, overrides?: CallOverrides): Promise<[string, IPluginSetup$7.PreparedSetupDataStructOutput]>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$7.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$7.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$7.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$7.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace PermissionLib$6 {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
declare namespace IPluginSetup$6 {
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib$6.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib$6.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib$6.MultiTargetPermissionStructOutput[];
    };
    type SetupPayloadStruct = {
        plugin: PromiseOrValue<string>;
        currentHelpers: PromiseOrValue<string>[];
        data: PromiseOrValue<BytesLike>;
    };
    type SetupPayloadStructOutput = [string, string[], string] & {
        plugin: string;
        currentHelpers: string[];
        data: string;
    };
}
interface PluginCloneableSetupV2MockInterface extends utils.Interface {
    functions: {
        "implementation()": FunctionFragment;
        "prepareInstallation(address,bytes)": FunctionFragment;
        "prepareUninstallation(address,(address,address[],bytes))": FunctionFragment;
        "prepareUpdate(address,uint16,(address,address[],bytes))": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "implementation" | "prepareInstallation" | "prepareUninstallation" | "prepareUpdate" | "protocolVersion" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "prepareInstallation", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "prepareUninstallation", values: [PromiseOrValue<string>, IPluginSetup$6.SetupPayloadStruct]): string;
    encodeFunctionData(functionFragment: "prepareUpdate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IPluginSetup$6.SetupPayloadStruct
    ]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {};
}
interface PluginCloneableSetupV2Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginCloneableSetupV2MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        implementation(overrides?: CallOverrides): Promise<[string]>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$6.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$6.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    implementation(overrides?: CallOverrides): Promise<string>;
    prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$6.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$6.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        implementation(overrides?: CallOverrides): Promise<string>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$6.PreparedSetupDataStructOutput
        ] & {
            plugin: string;
            preparedSetupData: IPluginSetup$6.PreparedSetupDataStructOutput;
        }>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$6.SetupPayloadStruct, overrides?: CallOverrides): Promise<PermissionLib$6.MultiTargetPermissionStructOutput[]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$6.SetupPayloadStruct, overrides?: CallOverrides): Promise<[string, IPluginSetup$6.PreparedSetupDataStructOutput]>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$6.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$6.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$6.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$6.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$O_PluginCloneableSetupV1Mock = PluginCloneableSetupV1Mock;
type index$O_PluginCloneableSetupV1MockBad = PluginCloneableSetupV1MockBad;
type index$O_PluginCloneableSetupV2Mock = PluginCloneableSetupV2Mock;
declare namespace index$O {
  export {
    index$O_PluginCloneableSetupV1Mock as PluginCloneableSetupV1Mock,
    index$O_PluginCloneableSetupV1MockBad as PluginCloneableSetupV1MockBad,
    index$O_PluginCloneableSetupV2Mock as PluginCloneableSetupV2Mock,
  };
}

declare namespace index$N {
  export {
    index$P as pluginCloneableMockSol,
    index$O as pluginCloneableSetupMockSol,
  };
}

declare namespace IPlugin$3 {
    type TargetConfigStruct = {
        target: PromiseOrValue<string>;
        operation: PromiseOrValue<BigNumberish>;
    };
    type TargetConfigStructOutput = [string, number] & {
        target: string;
        operation: number;
    };
}
interface PluginV1MockInterface extends utils.Interface {
    functions: {
        "SET_TARGET_CONFIG_PERMISSION_ID()": FunctionFragment;
        "dao()": FunctionFragment;
        "getCurrentTargetConfig()": FunctionFragment;
        "getTargetConfig()": FunctionFragment;
        "pluginType()": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "setTargetConfig((address,uint8))": FunctionFragment;
        "state1()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "SET_TARGET_CONFIG_PERMISSION_ID" | "dao" | "getCurrentTargetConfig" | "getTargetConfig" | "pluginType" | "protocolVersion" | "setTargetConfig" | "state1" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "dao", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCurrentTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "pluginType", values?: undefined): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "setTargetConfig", values: [IPlugin$3.TargetConfigStruct]): string;
    encodeFunctionData(functionFragment: "state1", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pluginType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "TargetSet(tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
}
interface TargetSetEventObject$3 {
    newTargetConfig: IPlugin$3.TargetConfigStructOutput;
}
type TargetSetEvent$3 = TypedEvent<[
    IPlugin$3.TargetConfigStructOutput
], TargetSetEventObject$3>;
type TargetSetEventFilter$3 = TypedEventFilter<TargetSetEvent$3>;
interface PluginV1Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginV1MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        dao(overrides?: CallOverrides): Promise<[string]>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<[IPlugin$3.TargetConfigStructOutput]>;
        getTargetConfig(overrides?: CallOverrides): Promise<[IPlugin$3.TargetConfigStructOutput]>;
        pluginType(overrides?: CallOverrides): Promise<[number]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        setTargetConfig(_targetConfig: IPlugin$3.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        state1(overrides?: CallOverrides): Promise<[BigNumber]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    dao(overrides?: CallOverrides): Promise<string>;
    getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin$3.TargetConfigStructOutput>;
    getTargetConfig(overrides?: CallOverrides): Promise<IPlugin$3.TargetConfigStructOutput>;
    pluginType(overrides?: CallOverrides): Promise<number>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    setTargetConfig(_targetConfig: IPlugin$3.TargetConfigStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    state1(overrides?: CallOverrides): Promise<BigNumber>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        dao(overrides?: CallOverrides): Promise<string>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin$3.TargetConfigStructOutput>;
        getTargetConfig(overrides?: CallOverrides): Promise<IPlugin$3.TargetConfigStructOutput>;
        pluginType(overrides?: CallOverrides): Promise<number>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        setTargetConfig(_targetConfig: IPlugin$3.TargetConfigStruct, overrides?: CallOverrides): Promise<void>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "TargetSet(tuple)"(newTargetConfig?: null): TargetSetEventFilter$3;
        TargetSet(newTargetConfig?: null): TargetSetEventFilter$3;
    };
    estimateGas: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        dao(overrides?: CallOverrides): Promise<BigNumber>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        getTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        pluginType(overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        setTargetConfig(_targetConfig: IPlugin$3.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pluginType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setTargetConfig(_targetConfig: IPlugin$3.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        state1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$M_PluginV1Mock = PluginV1Mock;
declare namespace index$M {
  export {
    index$M_PluginV1Mock as PluginV1Mock,
  };
}

declare namespace index$L {
  export {
    index$M as pluginMockSol,
  };
}

declare namespace IPlugin$2 {
    type TargetConfigStruct = {
        target: PromiseOrValue<string>;
        operation: PromiseOrValue<BigNumberish>;
    };
    type TargetConfigStructOutput = [string, number] & {
        target: string;
        operation: number;
    };
}
interface PluginUUPSUpgradeableV1MockInterface extends utils.Interface {
    functions: {
        "SET_TARGET_CONFIG_PERMISSION_ID()": FunctionFragment;
        "UPGRADE_PLUGIN_PERMISSION_ID()": FunctionFragment;
        "dao()": FunctionFragment;
        "getCurrentTargetConfig()": FunctionFragment;
        "getTargetConfig()": FunctionFragment;
        "implementation()": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "pluginType()": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "setTargetConfig((address,uint8))": FunctionFragment;
        "state1()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "SET_TARGET_CONFIG_PERMISSION_ID" | "UPGRADE_PLUGIN_PERMISSION_ID" | "dao" | "getCurrentTargetConfig" | "getTargetConfig" | "implementation" | "initialize" | "pluginType" | "protocolVersion" | "proxiableUUID" | "setTargetConfig" | "state1" | "supportsInterface" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_PLUGIN_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "dao", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCurrentTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "pluginType", values?: undefined): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "setTargetConfig", values: [IPlugin$2.TargetConfigStruct]): string;
    encodeFunctionData(functionFragment: "state1", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_PLUGIN_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pluginType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "TargetSet(tuple)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject$3 {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent$3 = TypedEvent<[
    string,
    string
], AdminChangedEventObject$3>;
type AdminChangedEventFilter$3 = TypedEventFilter<AdminChangedEvent$3>;
interface BeaconUpgradedEventObject$3 {
    beacon: string;
}
type BeaconUpgradedEvent$3 = TypedEvent<[
    string
], BeaconUpgradedEventObject$3>;
type BeaconUpgradedEventFilter$3 = TypedEventFilter<BeaconUpgradedEvent$3>;
interface InitializedEventObject$3 {
    version: number;
}
type InitializedEvent$3 = TypedEvent<[number], InitializedEventObject$3>;
type InitializedEventFilter$3 = TypedEventFilter<InitializedEvent$3>;
interface TargetSetEventObject$2 {
    newTargetConfig: IPlugin$2.TargetConfigStructOutput;
}
type TargetSetEvent$2 = TypedEvent<[
    IPlugin$2.TargetConfigStructOutput
], TargetSetEventObject$2>;
type TargetSetEventFilter$2 = TypedEventFilter<TargetSetEvent$2>;
interface UpgradedEventObject$3 {
    implementation: string;
}
type UpgradedEvent$3 = TypedEvent<[string], UpgradedEventObject$3>;
type UpgradedEventFilter$3 = TypedEventFilter<UpgradedEvent$3>;
interface PluginUUPSUpgradeableV1Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginUUPSUpgradeableV1MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        dao(overrides?: CallOverrides): Promise<[string]>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<[IPlugin$2.TargetConfigStructOutput]>;
        getTargetConfig(overrides?: CallOverrides): Promise<[IPlugin$2.TargetConfigStructOutput]>;
        implementation(overrides?: CallOverrides): Promise<[string]>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        pluginType(overrides?: CallOverrides): Promise<[number]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;
        setTargetConfig(_targetConfig: IPlugin$2.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        state1(overrides?: CallOverrides): Promise<[BigNumber]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    dao(overrides?: CallOverrides): Promise<string>;
    getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin$2.TargetConfigStructOutput>;
    getTargetConfig(overrides?: CallOverrides): Promise<IPlugin$2.TargetConfigStructOutput>;
    implementation(overrides?: CallOverrides): Promise<string>;
    initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    pluginType(overrides?: CallOverrides): Promise<number>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    proxiableUUID(overrides?: CallOverrides): Promise<string>;
    setTargetConfig(_targetConfig: IPlugin$2.TargetConfigStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    state1(overrides?: CallOverrides): Promise<BigNumber>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        dao(overrides?: CallOverrides): Promise<string>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin$2.TargetConfigStructOutput>;
        getTargetConfig(overrides?: CallOverrides): Promise<IPlugin$2.TargetConfigStructOutput>;
        implementation(overrides?: CallOverrides): Promise<string>;
        initialize(_dao: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        pluginType(overrides?: CallOverrides): Promise<number>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        proxiableUUID(overrides?: CallOverrides): Promise<string>;
        setTargetConfig(_targetConfig: IPlugin$2.TargetConfigStruct, overrides?: CallOverrides): Promise<void>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$3;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$3;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$3;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$3;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$3;
        Initialized(version?: null): InitializedEventFilter$3;
        "TargetSet(tuple)"(newTargetConfig?: null): TargetSetEventFilter$2;
        TargetSet(newTargetConfig?: null): TargetSetEventFilter$2;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$3;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$3;
    };
    estimateGas: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        dao(overrides?: CallOverrides): Promise<BigNumber>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        getTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        pluginType(overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;
        setTargetConfig(_targetConfig: IPlugin$2.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        pluginType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setTargetConfig(_targetConfig: IPlugin$2.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        state1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IPlugin$1 {
    type TargetConfigStruct = {
        target: PromiseOrValue<string>;
        operation: PromiseOrValue<BigNumberish>;
    };
    type TargetConfigStructOutput = [string, number] & {
        target: string;
        operation: number;
    };
}
interface PluginUUPSUpgradeableV2MockInterface extends utils.Interface {
    functions: {
        "SET_TARGET_CONFIG_PERMISSION_ID()": FunctionFragment;
        "UPGRADE_PLUGIN_PERMISSION_ID()": FunctionFragment;
        "dao()": FunctionFragment;
        "getCurrentTargetConfig()": FunctionFragment;
        "getTargetConfig()": FunctionFragment;
        "implementation()": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "initializeV1toV2()": FunctionFragment;
        "pluginType()": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "setTargetConfig((address,uint8))": FunctionFragment;
        "state1()": FunctionFragment;
        "state2()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "SET_TARGET_CONFIG_PERMISSION_ID" | "UPGRADE_PLUGIN_PERMISSION_ID" | "dao" | "getCurrentTargetConfig" | "getTargetConfig" | "implementation" | "initialize" | "initializeV1toV2" | "pluginType" | "protocolVersion" | "proxiableUUID" | "setTargetConfig" | "state1" | "state2" | "supportsInterface" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_PLUGIN_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "dao", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCurrentTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initializeV1toV2", values?: undefined): string;
    encodeFunctionData(functionFragment: "pluginType", values?: undefined): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "setTargetConfig", values: [IPlugin$1.TargetConfigStruct]): string;
    encodeFunctionData(functionFragment: "state1", values?: undefined): string;
    encodeFunctionData(functionFragment: "state2", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_PLUGIN_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeV1toV2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pluginType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "TargetSet(tuple)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject$2 {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent$2 = TypedEvent<[
    string,
    string
], AdminChangedEventObject$2>;
type AdminChangedEventFilter$2 = TypedEventFilter<AdminChangedEvent$2>;
interface BeaconUpgradedEventObject$2 {
    beacon: string;
}
type BeaconUpgradedEvent$2 = TypedEvent<[
    string
], BeaconUpgradedEventObject$2>;
type BeaconUpgradedEventFilter$2 = TypedEventFilter<BeaconUpgradedEvent$2>;
interface InitializedEventObject$2 {
    version: number;
}
type InitializedEvent$2 = TypedEvent<[number], InitializedEventObject$2>;
type InitializedEventFilter$2 = TypedEventFilter<InitializedEvent$2>;
interface TargetSetEventObject$1 {
    newTargetConfig: IPlugin$1.TargetConfigStructOutput;
}
type TargetSetEvent$1 = TypedEvent<[
    IPlugin$1.TargetConfigStructOutput
], TargetSetEventObject$1>;
type TargetSetEventFilter$1 = TypedEventFilter<TargetSetEvent$1>;
interface UpgradedEventObject$2 {
    implementation: string;
}
type UpgradedEvent$2 = TypedEvent<[string], UpgradedEventObject$2>;
type UpgradedEventFilter$2 = TypedEventFilter<UpgradedEvent$2>;
interface PluginUUPSUpgradeableV2Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginUUPSUpgradeableV2MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        dao(overrides?: CallOverrides): Promise<[string]>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<[IPlugin$1.TargetConfigStructOutput]>;
        getTargetConfig(overrides?: CallOverrides): Promise<[IPlugin$1.TargetConfigStructOutput]>;
        implementation(overrides?: CallOverrides): Promise<[string]>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        initializeV1toV2(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        pluginType(overrides?: CallOverrides): Promise<[number]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;
        setTargetConfig(_targetConfig: IPlugin$1.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        state1(overrides?: CallOverrides): Promise<[BigNumber]>;
        state2(overrides?: CallOverrides): Promise<[BigNumber]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    dao(overrides?: CallOverrides): Promise<string>;
    getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin$1.TargetConfigStructOutput>;
    getTargetConfig(overrides?: CallOverrides): Promise<IPlugin$1.TargetConfigStructOutput>;
    implementation(overrides?: CallOverrides): Promise<string>;
    initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    initializeV1toV2(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    pluginType(overrides?: CallOverrides): Promise<number>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    proxiableUUID(overrides?: CallOverrides): Promise<string>;
    setTargetConfig(_targetConfig: IPlugin$1.TargetConfigStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    state1(overrides?: CallOverrides): Promise<BigNumber>;
    state2(overrides?: CallOverrides): Promise<BigNumber>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        dao(overrides?: CallOverrides): Promise<string>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin$1.TargetConfigStructOutput>;
        getTargetConfig(overrides?: CallOverrides): Promise<IPlugin$1.TargetConfigStructOutput>;
        implementation(overrides?: CallOverrides): Promise<string>;
        initialize(_dao: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        initializeV1toV2(overrides?: CallOverrides): Promise<void>;
        pluginType(overrides?: CallOverrides): Promise<number>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        proxiableUUID(overrides?: CallOverrides): Promise<string>;
        setTargetConfig(_targetConfig: IPlugin$1.TargetConfigStruct, overrides?: CallOverrides): Promise<void>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        state2(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$2;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$2;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$2;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$2;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$2;
        Initialized(version?: null): InitializedEventFilter$2;
        "TargetSet(tuple)"(newTargetConfig?: null): TargetSetEventFilter$1;
        TargetSet(newTargetConfig?: null): TargetSetEventFilter$1;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$2;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$2;
    };
    estimateGas: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        dao(overrides?: CallOverrides): Promise<BigNumber>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        getTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        initializeV1toV2(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        pluginType(overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;
        setTargetConfig(_targetConfig: IPlugin$1.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        state2(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        initializeV1toV2(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        pluginType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setTargetConfig(_targetConfig: IPlugin$1.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        state1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        state2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IPlugin {
    type TargetConfigStruct = {
        target: PromiseOrValue<string>;
        operation: PromiseOrValue<BigNumberish>;
    };
    type TargetConfigStructOutput = [string, number] & {
        target: string;
        operation: number;
    };
}
interface PluginUUPSUpgradeableV3MockInterface extends utils.Interface {
    functions: {
        "SET_TARGET_CONFIG_PERMISSION_ID()": FunctionFragment;
        "UPGRADE_PLUGIN_PERMISSION_ID()": FunctionFragment;
        "dao()": FunctionFragment;
        "getCurrentTargetConfig()": FunctionFragment;
        "getTargetConfig()": FunctionFragment;
        "implementation()": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "initializeV1toV3()": FunctionFragment;
        "initializeV2toV3()": FunctionFragment;
        "pluginType()": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "setTargetConfig((address,uint8))": FunctionFragment;
        "state1()": FunctionFragment;
        "state2()": FunctionFragment;
        "state3()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "SET_TARGET_CONFIG_PERMISSION_ID" | "UPGRADE_PLUGIN_PERMISSION_ID" | "dao" | "getCurrentTargetConfig" | "getTargetConfig" | "implementation" | "initialize" | "initializeV1toV3" | "initializeV2toV3" | "pluginType" | "protocolVersion" | "proxiableUUID" | "setTargetConfig" | "state1" | "state2" | "state3" | "supportsInterface" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_PLUGIN_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "dao", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCurrentTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTargetConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initializeV1toV3", values?: undefined): string;
    encodeFunctionData(functionFragment: "initializeV2toV3", values?: undefined): string;
    encodeFunctionData(functionFragment: "pluginType", values?: undefined): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "setTargetConfig", values: [IPlugin.TargetConfigStruct]): string;
    encodeFunctionData(functionFragment: "state1", values?: undefined): string;
    encodeFunctionData(functionFragment: "state2", values?: undefined): string;
    encodeFunctionData(functionFragment: "state3", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "SET_TARGET_CONFIG_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_PLUGIN_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeV1toV3", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeV2toV3", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pluginType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTargetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "state3", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "TargetSet(tuple)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject$1 {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent$1 = TypedEvent<[
    string,
    string
], AdminChangedEventObject$1>;
type AdminChangedEventFilter$1 = TypedEventFilter<AdminChangedEvent$1>;
interface BeaconUpgradedEventObject$1 {
    beacon: string;
}
type BeaconUpgradedEvent$1 = TypedEvent<[
    string
], BeaconUpgradedEventObject$1>;
type BeaconUpgradedEventFilter$1 = TypedEventFilter<BeaconUpgradedEvent$1>;
interface InitializedEventObject$1 {
    version: number;
}
type InitializedEvent$1 = TypedEvent<[number], InitializedEventObject$1>;
type InitializedEventFilter$1 = TypedEventFilter<InitializedEvent$1>;
interface TargetSetEventObject {
    newTargetConfig: IPlugin.TargetConfigStructOutput;
}
type TargetSetEvent = TypedEvent<[
    IPlugin.TargetConfigStructOutput
], TargetSetEventObject>;
type TargetSetEventFilter = TypedEventFilter<TargetSetEvent>;
interface UpgradedEventObject$1 {
    implementation: string;
}
type UpgradedEvent$1 = TypedEvent<[string], UpgradedEventObject$1>;
type UpgradedEventFilter$1 = TypedEventFilter<UpgradedEvent$1>;
interface PluginUUPSUpgradeableV3Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginUUPSUpgradeableV3MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        dao(overrides?: CallOverrides): Promise<[string]>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<[IPlugin.TargetConfigStructOutput]>;
        getTargetConfig(overrides?: CallOverrides): Promise<[IPlugin.TargetConfigStructOutput]>;
        implementation(overrides?: CallOverrides): Promise<[string]>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        initializeV1toV3(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        initializeV2toV3(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        pluginType(overrides?: CallOverrides): Promise<[number]>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;
        setTargetConfig(_targetConfig: IPlugin.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        state1(overrides?: CallOverrides): Promise<[BigNumber]>;
        state2(overrides?: CallOverrides): Promise<[BigNumber]>;
        state3(overrides?: CallOverrides): Promise<[BigNumber]>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    dao(overrides?: CallOverrides): Promise<string>;
    getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin.TargetConfigStructOutput>;
    getTargetConfig(overrides?: CallOverrides): Promise<IPlugin.TargetConfigStructOutput>;
    implementation(overrides?: CallOverrides): Promise<string>;
    initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    initializeV1toV3(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    initializeV2toV3(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    pluginType(overrides?: CallOverrides): Promise<number>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    proxiableUUID(overrides?: CallOverrides): Promise<string>;
    setTargetConfig(_targetConfig: IPlugin.TargetConfigStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    state1(overrides?: CallOverrides): Promise<BigNumber>;
    state2(overrides?: CallOverrides): Promise<BigNumber>;
    state3(overrides?: CallOverrides): Promise<BigNumber>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        dao(overrides?: CallOverrides): Promise<string>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<IPlugin.TargetConfigStructOutput>;
        getTargetConfig(overrides?: CallOverrides): Promise<IPlugin.TargetConfigStructOutput>;
        implementation(overrides?: CallOverrides): Promise<string>;
        initialize(_dao: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        initializeV1toV3(overrides?: CallOverrides): Promise<void>;
        initializeV2toV3(overrides?: CallOverrides): Promise<void>;
        pluginType(overrides?: CallOverrides): Promise<number>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        proxiableUUID(overrides?: CallOverrides): Promise<string>;
        setTargetConfig(_targetConfig: IPlugin.TargetConfigStruct, overrides?: CallOverrides): Promise<void>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        state2(overrides?: CallOverrides): Promise<BigNumber>;
        state3(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$1;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter$1;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$1;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter$1;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$1;
        Initialized(version?: null): InitializedEventFilter$1;
        "TargetSet(tuple)"(newTargetConfig?: null): TargetSetEventFilter;
        TargetSet(newTargetConfig?: null): TargetSetEventFilter;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$1;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter$1;
    };
    estimateGas: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        dao(overrides?: CallOverrides): Promise<BigNumber>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        getTargetConfig(overrides?: CallOverrides): Promise<BigNumber>;
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        initializeV1toV3(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        initializeV2toV3(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        pluginType(overrides?: CallOverrides): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;
        setTargetConfig(_targetConfig: IPlugin.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        state1(overrides?: CallOverrides): Promise<BigNumber>;
        state2(overrides?: CallOverrides): Promise<BigNumber>;
        state3(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        SET_TARGET_CONFIG_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCurrentTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTargetConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_dao: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        initializeV1toV3(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        initializeV2toV3(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        pluginType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setTargetConfig(_targetConfig: IPlugin.TargetConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        state1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        state2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        state3(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$K_PluginUUPSUpgradeableV1Mock = PluginUUPSUpgradeableV1Mock;
type index$K_PluginUUPSUpgradeableV2Mock = PluginUUPSUpgradeableV2Mock;
type index$K_PluginUUPSUpgradeableV3Mock = PluginUUPSUpgradeableV3Mock;
declare namespace index$K {
  export {
    index$K_PluginUUPSUpgradeableV1Mock as PluginUUPSUpgradeableV1Mock,
    index$K_PluginUUPSUpgradeableV2Mock as PluginUUPSUpgradeableV2Mock,
    index$K_PluginUUPSUpgradeableV3Mock as PluginUUPSUpgradeableV3Mock,
  };
}

declare namespace IPluginSetup$5 {
    type SetupPayloadStruct = {
        plugin: PromiseOrValue<string>;
        currentHelpers: PromiseOrValue<string>[];
        data: PromiseOrValue<BytesLike>;
    };
    type SetupPayloadStructOutput = [string, string[], string] & {
        plugin: string;
        currentHelpers: string[];
        data: string;
    };
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib$5.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib$5.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib$5.MultiTargetPermissionStructOutput[];
    };
}
declare namespace PermissionLib$5 {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
interface MockedHelperInterface extends utils.Interface {
    functions: {
        "implementation()": FunctionFragment;
        "mockHelperCount(uint160)": FunctionFragment;
        "mockPermissionIndexes(uint160,uint160)": FunctionFragment;
        "prepareInstallation(address,bytes)": FunctionFragment;
        "prepareUninstallation(address,(address,address[],bytes))": FunctionFragment;
        "prepareUpdate(address,uint16,(address,address[],bytes))": FunctionFragment;
        "reset()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "implementation" | "mockHelperCount" | "mockPermissionIndexes" | "prepareInstallation" | "prepareUninstallation" | "prepareUpdate" | "reset"): FunctionFragment;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "mockHelperCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "mockPermissionIndexes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "prepareInstallation", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "prepareUninstallation", values: [PromiseOrValue<string>, IPluginSetup$5.SetupPayloadStruct]): string;
    encodeFunctionData(functionFragment: "prepareUpdate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IPluginSetup$5.SetupPayloadStruct
    ]): string;
    encodeFunctionData(functionFragment: "reset", values?: undefined): string;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockHelperCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockPermissionIndexes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
    events: {
        "InstallationPrepared(address,bytes)": EventFragment;
        "UninstallationPrepared(address,tuple)": EventFragment;
        "UpdatePrepared(address,uint16,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UninstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePrepared"): EventFragment;
}
interface InstallationPreparedEventObject$5 {
    dao: string;
    data: string;
}
type InstallationPreparedEvent$5 = TypedEvent<[
    string,
    string
], InstallationPreparedEventObject$5>;
type InstallationPreparedEventFilter$5 = TypedEventFilter<InstallationPreparedEvent$5>;
interface UninstallationPreparedEventObject$5 {
    dao: string;
    payload: IPluginSetup$5.SetupPayloadStructOutput;
}
type UninstallationPreparedEvent$5 = TypedEvent<[
    string,
    IPluginSetup$5.SetupPayloadStructOutput
], UninstallationPreparedEventObject$5>;
type UninstallationPreparedEventFilter$5 = TypedEventFilter<UninstallationPreparedEvent$5>;
interface UpdatePreparedEventObject$5 {
    dao: string;
    build: number;
    payload: IPluginSetup$5.SetupPayloadStructOutput;
}
type UpdatePreparedEvent$5 = TypedEvent<[
    string,
    number,
    IPluginSetup$5.SetupPayloadStructOutput
], UpdatePreparedEventObject$5>;
type UpdatePreparedEventFilter$5 = TypedEventFilter<UpdatePreparedEvent$5>;
interface MockedHelper extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockedHelperInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        implementation(overrides?: CallOverrides): Promise<[string]>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$5.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$5.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    implementation(overrides?: CallOverrides): Promise<string>;
    mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$5.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$5.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    reset(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        implementation(overrides?: CallOverrides): Promise<string>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$5.PreparedSetupDataStructOutput
        ] & {
            plugin: string;
            preparedSetupData: IPluginSetup$5.PreparedSetupDataStructOutput;
        }>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$5.SetupPayloadStruct, overrides?: CallOverrides): Promise<PermissionLib$5.MultiTargetPermissionStructOutput[]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$5.SetupPayloadStruct, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$5.PreparedSetupDataStructOutput
        ] & {
            initData: string;
            preparedSetupData: IPluginSetup$5.PreparedSetupDataStructOutput;
        }>;
        reset(overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "InstallationPrepared(address,bytes)"(dao?: null, data?: null): InstallationPreparedEventFilter$5;
        InstallationPrepared(dao?: null, data?: null): InstallationPreparedEventFilter$5;
        "UninstallationPrepared(address,tuple)"(dao?: null, payload?: null): UninstallationPreparedEventFilter$5;
        UninstallationPrepared(dao?: null, payload?: null): UninstallationPreparedEventFilter$5;
        "UpdatePrepared(address,uint16,tuple)"(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter$5;
        UpdatePrepared(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter$5;
    };
    estimateGas: {
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$5.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$5.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$5.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$5.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IPluginSetup$4 {
    type SetupPayloadStruct = {
        plugin: PromiseOrValue<string>;
        currentHelpers: PromiseOrValue<string>[];
        data: PromiseOrValue<BytesLike>;
    };
    type SetupPayloadStructOutput = [string, string[], string] & {
        plugin: string;
        currentHelpers: string[];
        data: string;
    };
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib$4.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib$4.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib$4.MultiTargetPermissionStructOutput[];
    };
}
declare namespace PermissionLib$4 {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
interface PluginUUPSUpgradeableSetupV1MockInterface extends utils.Interface {
    functions: {
        "implementation()": FunctionFragment;
        "mockHelperCount(uint160)": FunctionFragment;
        "mockPermissionIndexes(uint160,uint160)": FunctionFragment;
        "prepareInstallation(address,bytes)": FunctionFragment;
        "prepareUninstallation(address,(address,address[],bytes))": FunctionFragment;
        "prepareUpdate(address,uint16,(address,address[],bytes))": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "reset()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "implementation" | "mockHelperCount" | "mockPermissionIndexes" | "prepareInstallation" | "prepareUninstallation" | "prepareUpdate" | "protocolVersion" | "reset" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "mockHelperCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "mockPermissionIndexes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "prepareInstallation", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "prepareUninstallation", values: [PromiseOrValue<string>, IPluginSetup$4.SetupPayloadStruct]): string;
    encodeFunctionData(functionFragment: "prepareUpdate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IPluginSetup$4.SetupPayloadStruct
    ]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "reset", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockHelperCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockPermissionIndexes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "InstallationPrepared(address,bytes)": EventFragment;
        "UninstallationPrepared(address,tuple)": EventFragment;
        "UpdatePrepared(address,uint16,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UninstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePrepared"): EventFragment;
}
interface InstallationPreparedEventObject$4 {
    dao: string;
    data: string;
}
type InstallationPreparedEvent$4 = TypedEvent<[
    string,
    string
], InstallationPreparedEventObject$4>;
type InstallationPreparedEventFilter$4 = TypedEventFilter<InstallationPreparedEvent$4>;
interface UninstallationPreparedEventObject$4 {
    dao: string;
    payload: IPluginSetup$4.SetupPayloadStructOutput;
}
type UninstallationPreparedEvent$4 = TypedEvent<[
    string,
    IPluginSetup$4.SetupPayloadStructOutput
], UninstallationPreparedEventObject$4>;
type UninstallationPreparedEventFilter$4 = TypedEventFilter<UninstallationPreparedEvent$4>;
interface UpdatePreparedEventObject$4 {
    dao: string;
    build: number;
    payload: IPluginSetup$4.SetupPayloadStructOutput;
}
type UpdatePreparedEvent$4 = TypedEvent<[
    string,
    number,
    IPluginSetup$4.SetupPayloadStructOutput
], UpdatePreparedEventObject$4>;
type UpdatePreparedEventFilter$4 = TypedEventFilter<UpdatePreparedEvent$4>;
interface PluginUUPSUpgradeableSetupV1Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginUUPSUpgradeableSetupV1MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        implementation(overrides?: CallOverrides): Promise<[string]>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$4.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$4.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    implementation(overrides?: CallOverrides): Promise<string>;
    mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$4.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$4.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    reset(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        implementation(overrides?: CallOverrides): Promise<string>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$4.PreparedSetupDataStructOutput
        ] & {
            plugin: string;
            preparedSetupData: IPluginSetup$4.PreparedSetupDataStructOutput;
        }>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$4.SetupPayloadStruct, overrides?: CallOverrides): Promise<PermissionLib$4.MultiTargetPermissionStructOutput[]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$4.SetupPayloadStruct, overrides?: CallOverrides): Promise<[string, IPluginSetup$4.PreparedSetupDataStructOutput]>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        reset(overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "InstallationPrepared(address,bytes)"(dao?: null, data?: null): InstallationPreparedEventFilter$4;
        InstallationPrepared(dao?: null, data?: null): InstallationPreparedEventFilter$4;
        "UninstallationPrepared(address,tuple)"(dao?: null, payload?: null): UninstallationPreparedEventFilter$4;
        UninstallationPrepared(dao?: null, payload?: null): UninstallationPreparedEventFilter$4;
        "UpdatePrepared(address,uint16,tuple)"(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter$4;
        UpdatePrepared(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter$4;
    };
    estimateGas: {
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$4.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$4.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$4.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$4.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IPluginSetup$3 {
    type SetupPayloadStruct = {
        plugin: PromiseOrValue<string>;
        currentHelpers: PromiseOrValue<string>[];
        data: PromiseOrValue<BytesLike>;
    };
    type SetupPayloadStructOutput = [string, string[], string] & {
        plugin: string;
        currentHelpers: string[];
        data: string;
    };
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib$3.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib$3.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib$3.MultiTargetPermissionStructOutput[];
    };
}
declare namespace PermissionLib$3 {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
interface PluginUUPSUpgradeableSetupV1MockBadInterface extends utils.Interface {
    functions: {
        "implementation()": FunctionFragment;
        "mockHelperCount(uint160)": FunctionFragment;
        "mockPermissionIndexes(uint160,uint160)": FunctionFragment;
        "prepareInstallation(address,bytes)": FunctionFragment;
        "prepareUninstallation(address,(address,address[],bytes))": FunctionFragment;
        "prepareUpdate(address,uint16,(address,address[],bytes))": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "reset()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "implementation" | "mockHelperCount" | "mockPermissionIndexes" | "prepareInstallation" | "prepareUninstallation" | "prepareUpdate" | "protocolVersion" | "reset" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "mockHelperCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "mockPermissionIndexes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "prepareInstallation", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "prepareUninstallation", values: [PromiseOrValue<string>, IPluginSetup$3.SetupPayloadStruct]): string;
    encodeFunctionData(functionFragment: "prepareUpdate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IPluginSetup$3.SetupPayloadStruct
    ]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "reset", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockHelperCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockPermissionIndexes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "InstallationPrepared(address,bytes)": EventFragment;
        "UninstallationPrepared(address,tuple)": EventFragment;
        "UpdatePrepared(address,uint16,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UninstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePrepared"): EventFragment;
}
interface InstallationPreparedEventObject$3 {
    dao: string;
    data: string;
}
type InstallationPreparedEvent$3 = TypedEvent<[
    string,
    string
], InstallationPreparedEventObject$3>;
type InstallationPreparedEventFilter$3 = TypedEventFilter<InstallationPreparedEvent$3>;
interface UninstallationPreparedEventObject$3 {
    dao: string;
    payload: IPluginSetup$3.SetupPayloadStructOutput;
}
type UninstallationPreparedEvent$3 = TypedEvent<[
    string,
    IPluginSetup$3.SetupPayloadStructOutput
], UninstallationPreparedEventObject$3>;
type UninstallationPreparedEventFilter$3 = TypedEventFilter<UninstallationPreparedEvent$3>;
interface UpdatePreparedEventObject$3 {
    dao: string;
    build: number;
    payload: IPluginSetup$3.SetupPayloadStructOutput;
}
type UpdatePreparedEvent$3 = TypedEvent<[
    string,
    number,
    IPluginSetup$3.SetupPayloadStructOutput
], UpdatePreparedEventObject$3>;
type UpdatePreparedEventFilter$3 = TypedEventFilter<UpdatePreparedEvent$3>;
interface PluginUUPSUpgradeableSetupV1MockBad extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginUUPSUpgradeableSetupV1MockBadInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        implementation(overrides?: CallOverrides): Promise<[string]>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$3.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$3.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    implementation(overrides?: CallOverrides): Promise<string>;
    mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$3.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$3.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    reset(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        implementation(overrides?: CallOverrides): Promise<string>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$3.PreparedSetupDataStructOutput
        ] & {
            plugin: string;
            preparedSetupData: IPluginSetup$3.PreparedSetupDataStructOutput;
        }>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$3.SetupPayloadStruct, overrides?: CallOverrides): Promise<PermissionLib$3.MultiTargetPermissionStructOutput[]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$3.SetupPayloadStruct, overrides?: CallOverrides): Promise<[string, IPluginSetup$3.PreparedSetupDataStructOutput]>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        reset(overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "InstallationPrepared(address,bytes)"(dao?: null, data?: null): InstallationPreparedEventFilter$3;
        InstallationPrepared(dao?: null, data?: null): InstallationPreparedEventFilter$3;
        "UninstallationPrepared(address,tuple)"(dao?: null, payload?: null): UninstallationPreparedEventFilter$3;
        UninstallationPrepared(dao?: null, payload?: null): UninstallationPreparedEventFilter$3;
        "UpdatePrepared(address,uint16,tuple)"(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter$3;
        UpdatePrepared(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter$3;
    };
    estimateGas: {
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$3.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$3.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$3.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _fromBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$3.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IPluginSetup$2 {
    type SetupPayloadStruct = {
        plugin: PromiseOrValue<string>;
        currentHelpers: PromiseOrValue<string>[];
        data: PromiseOrValue<BytesLike>;
    };
    type SetupPayloadStructOutput = [string, string[], string] & {
        plugin: string;
        currentHelpers: string[];
        data: string;
    };
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib$2.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib$2.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib$2.MultiTargetPermissionStructOutput[];
    };
}
declare namespace PermissionLib$2 {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
interface PluginUUPSUpgradeableSetupV2MockInterface extends utils.Interface {
    functions: {
        "implementation()": FunctionFragment;
        "mockHelperCount(uint160)": FunctionFragment;
        "mockPermissionIndexes(uint160,uint160)": FunctionFragment;
        "prepareInstallation(address,bytes)": FunctionFragment;
        "prepareUninstallation(address,(address,address[],bytes))": FunctionFragment;
        "prepareUpdate(address,uint16,(address,address[],bytes))": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "reset()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "implementation" | "mockHelperCount" | "mockPermissionIndexes" | "prepareInstallation" | "prepareUninstallation" | "prepareUpdate" | "protocolVersion" | "reset" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "mockHelperCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "mockPermissionIndexes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "prepareInstallation", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "prepareUninstallation", values: [PromiseOrValue<string>, IPluginSetup$2.SetupPayloadStruct]): string;
    encodeFunctionData(functionFragment: "prepareUpdate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IPluginSetup$2.SetupPayloadStruct
    ]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "reset", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockHelperCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockPermissionIndexes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "InstallationPrepared(address,bytes)": EventFragment;
        "UninstallationPrepared(address,tuple)": EventFragment;
        "UpdatePrepared(address,uint16,tuple)": EventFragment;
        "amazing(uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UninstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "amazing"): EventFragment;
}
interface InstallationPreparedEventObject$2 {
    dao: string;
    data: string;
}
type InstallationPreparedEvent$2 = TypedEvent<[
    string,
    string
], InstallationPreparedEventObject$2>;
type InstallationPreparedEventFilter$2 = TypedEventFilter<InstallationPreparedEvent$2>;
interface UninstallationPreparedEventObject$2 {
    dao: string;
    payload: IPluginSetup$2.SetupPayloadStructOutput;
}
type UninstallationPreparedEvent$2 = TypedEvent<[
    string,
    IPluginSetup$2.SetupPayloadStructOutput
], UninstallationPreparedEventObject$2>;
type UninstallationPreparedEventFilter$2 = TypedEventFilter<UninstallationPreparedEvent$2>;
interface UpdatePreparedEventObject$2 {
    dao: string;
    build: number;
    payload: IPluginSetup$2.SetupPayloadStructOutput;
}
type UpdatePreparedEvent$2 = TypedEvent<[
    string,
    number,
    IPluginSetup$2.SetupPayloadStructOutput
], UpdatePreparedEventObject$2>;
type UpdatePreparedEventFilter$2 = TypedEventFilter<UpdatePreparedEvent$2>;
interface amazingEventObject$2 {
    k: BigNumber;
}
type amazingEvent$2 = TypedEvent<[BigNumber], amazingEventObject$2>;
type amazingEventFilter$2 = TypedEventFilter<amazingEvent$2>;
interface PluginUUPSUpgradeableSetupV2Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginUUPSUpgradeableSetupV2MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        implementation(overrides?: CallOverrides): Promise<[string]>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$2.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$2.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    implementation(overrides?: CallOverrides): Promise<string>;
    mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$2.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$2.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    reset(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        implementation(overrides?: CallOverrides): Promise<string>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$2.PreparedSetupDataStructOutput
        ] & {
            plugin: string;
            preparedSetupData: IPluginSetup$2.PreparedSetupDataStructOutput;
        }>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$2.SetupPayloadStruct, overrides?: CallOverrides): Promise<PermissionLib$2.MultiTargetPermissionStructOutput[]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$2.SetupPayloadStruct, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$2.PreparedSetupDataStructOutput
        ] & {
            initData: string;
            preparedSetupData: IPluginSetup$2.PreparedSetupDataStructOutput;
        }>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        reset(overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "InstallationPrepared(address,bytes)"(dao?: null, data?: null): InstallationPreparedEventFilter$2;
        InstallationPrepared(dao?: null, data?: null): InstallationPreparedEventFilter$2;
        "UninstallationPrepared(address,tuple)"(dao?: null, payload?: null): UninstallationPreparedEventFilter$2;
        UninstallationPrepared(dao?: null, payload?: null): UninstallationPreparedEventFilter$2;
        "UpdatePrepared(address,uint16,tuple)"(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter$2;
        UpdatePrepared(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter$2;
        "amazing(uint256)"(k?: null): amazingEventFilter$2;
        amazing(k?: null): amazingEventFilter$2;
    };
    estimateGas: {
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$2.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$2.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$2.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$2.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IPluginSetup$1 {
    type SetupPayloadStruct = {
        plugin: PromiseOrValue<string>;
        currentHelpers: PromiseOrValue<string>[];
        data: PromiseOrValue<BytesLike>;
    };
    type SetupPayloadStructOutput = [string, string[], string] & {
        plugin: string;
        currentHelpers: string[];
        data: string;
    };
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib$1.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib$1.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib$1.MultiTargetPermissionStructOutput[];
    };
}
declare namespace PermissionLib$1 {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
interface PluginUUPSUpgradeableSetupV3MockInterface extends utils.Interface {
    functions: {
        "implementation()": FunctionFragment;
        "mockHelperCount(uint160)": FunctionFragment;
        "mockPermissionIndexes(uint160,uint160)": FunctionFragment;
        "prepareInstallation(address,bytes)": FunctionFragment;
        "prepareUninstallation(address,(address,address[],bytes))": FunctionFragment;
        "prepareUpdate(address,uint16,(address,address[],bytes))": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "reset()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "implementation" | "mockHelperCount" | "mockPermissionIndexes" | "prepareInstallation" | "prepareUninstallation" | "prepareUpdate" | "protocolVersion" | "reset" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "mockHelperCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "mockPermissionIndexes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "prepareInstallation", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "prepareUninstallation", values: [PromiseOrValue<string>, IPluginSetup$1.SetupPayloadStruct]): string;
    encodeFunctionData(functionFragment: "prepareUpdate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IPluginSetup$1.SetupPayloadStruct
    ]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "reset", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockHelperCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockPermissionIndexes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "InstallationPrepared(address,bytes)": EventFragment;
        "UninstallationPrepared(address,tuple)": EventFragment;
        "UpdatePrepared(address,uint16,tuple)": EventFragment;
        "amazing(uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UninstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "amazing"): EventFragment;
}
interface InstallationPreparedEventObject$1 {
    dao: string;
    data: string;
}
type InstallationPreparedEvent$1 = TypedEvent<[
    string,
    string
], InstallationPreparedEventObject$1>;
type InstallationPreparedEventFilter$1 = TypedEventFilter<InstallationPreparedEvent$1>;
interface UninstallationPreparedEventObject$1 {
    dao: string;
    payload: IPluginSetup$1.SetupPayloadStructOutput;
}
type UninstallationPreparedEvent$1 = TypedEvent<[
    string,
    IPluginSetup$1.SetupPayloadStructOutput
], UninstallationPreparedEventObject$1>;
type UninstallationPreparedEventFilter$1 = TypedEventFilter<UninstallationPreparedEvent$1>;
interface UpdatePreparedEventObject$1 {
    dao: string;
    build: number;
    payload: IPluginSetup$1.SetupPayloadStructOutput;
}
type UpdatePreparedEvent$1 = TypedEvent<[
    string,
    number,
    IPluginSetup$1.SetupPayloadStructOutput
], UpdatePreparedEventObject$1>;
type UpdatePreparedEventFilter$1 = TypedEventFilter<UpdatePreparedEvent$1>;
interface amazingEventObject$1 {
    k: BigNumber;
}
type amazingEvent$1 = TypedEvent<[BigNumber], amazingEventObject$1>;
type amazingEventFilter$1 = TypedEventFilter<amazingEvent$1>;
interface PluginUUPSUpgradeableSetupV3Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginUUPSUpgradeableSetupV3MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        implementation(overrides?: CallOverrides): Promise<[string]>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$1.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$1.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    implementation(overrides?: CallOverrides): Promise<string>;
    mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$1.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$1.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    reset(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        implementation(overrides?: CallOverrides): Promise<string>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$1.PreparedSetupDataStructOutput
        ] & {
            plugin: string;
            preparedSetupData: IPluginSetup$1.PreparedSetupDataStructOutput;
        }>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$1.SetupPayloadStruct, overrides?: CallOverrides): Promise<PermissionLib$1.MultiTargetPermissionStructOutput[]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$1.SetupPayloadStruct, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup$1.PreparedSetupDataStructOutput
        ] & {
            initData: string;
            preparedSetupData: IPluginSetup$1.PreparedSetupDataStructOutput;
        }>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        reset(overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "InstallationPrepared(address,bytes)"(dao?: null, data?: null): InstallationPreparedEventFilter$1;
        InstallationPrepared(dao?: null, data?: null): InstallationPreparedEventFilter$1;
        "UninstallationPrepared(address,tuple)"(dao?: null, payload?: null): UninstallationPreparedEventFilter$1;
        UninstallationPrepared(dao?: null, payload?: null): UninstallationPreparedEventFilter$1;
        "UpdatePrepared(address,uint16,tuple)"(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter$1;
        UpdatePrepared(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter$1;
        "amazing(uint256)"(k?: null): amazingEventFilter$1;
        amazing(k?: null): amazingEventFilter$1;
    };
    estimateGas: {
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$1.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$1.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup$1.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup$1.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IPluginSetup {
    type SetupPayloadStruct = {
        plugin: PromiseOrValue<string>;
        currentHelpers: PromiseOrValue<string>[];
        data: PromiseOrValue<BytesLike>;
    };
    type SetupPayloadStructOutput = [string, string[], string] & {
        plugin: string;
        currentHelpers: string[];
        data: string;
    };
    type PreparedSetupDataStruct = {
        helpers: PromiseOrValue<string>[];
        permissions: PermissionLib.MultiTargetPermissionStruct[];
    };
    type PreparedSetupDataStructOutput = [
        string[],
        PermissionLib.MultiTargetPermissionStructOutput[]
    ] & {
        helpers: string[];
        permissions: PermissionLib.MultiTargetPermissionStructOutput[];
    };
}
declare namespace PermissionLib {
    type MultiTargetPermissionStruct = {
        operation: PromiseOrValue<BigNumberish>;
        where: PromiseOrValue<string>;
        who: PromiseOrValue<string>;
        condition: PromiseOrValue<string>;
        permissionId: PromiseOrValue<BytesLike>;
    };
    type MultiTargetPermissionStructOutput = [
        number,
        string,
        string,
        string,
        string
    ] & {
        operation: number;
        where: string;
        who: string;
        condition: string;
        permissionId: string;
    };
}
interface PluginUUPSUpgradeableSetupV4MockInterface extends utils.Interface {
    functions: {
        "implementation()": FunctionFragment;
        "mockHelperCount(uint160)": FunctionFragment;
        "mockPermissionIndexes(uint160,uint160)": FunctionFragment;
        "prepareInstallation(address,bytes)": FunctionFragment;
        "prepareUninstallation(address,(address,address[],bytes))": FunctionFragment;
        "prepareUpdate(address,uint16,(address,address[],bytes))": FunctionFragment;
        "protocolVersion()": FunctionFragment;
        "reset()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "implementation" | "mockHelperCount" | "mockPermissionIndexes" | "prepareInstallation" | "prepareUninstallation" | "prepareUpdate" | "protocolVersion" | "reset" | "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "mockHelperCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "mockPermissionIndexes", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "prepareInstallation", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "prepareUninstallation", values: [PromiseOrValue<string>, IPluginSetup.SetupPayloadStruct]): string;
    encodeFunctionData(functionFragment: "prepareUpdate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IPluginSetup.SetupPayloadStruct
    ]): string;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "reset", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockHelperCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mockPermissionIndexes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUninstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "prepareUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "InstallationPrepared(address,bytes)": EventFragment;
        "UninstallationPrepared(address,tuple)": EventFragment;
        "UpdatePrepared(address,uint16,tuple)": EventFragment;
        "amazing(uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UninstallationPrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePrepared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "amazing"): EventFragment;
}
interface InstallationPreparedEventObject {
    dao: string;
    data: string;
}
type InstallationPreparedEvent = TypedEvent<[
    string,
    string
], InstallationPreparedEventObject>;
type InstallationPreparedEventFilter = TypedEventFilter<InstallationPreparedEvent>;
interface UninstallationPreparedEventObject {
    dao: string;
    payload: IPluginSetup.SetupPayloadStructOutput;
}
type UninstallationPreparedEvent = TypedEvent<[
    string,
    IPluginSetup.SetupPayloadStructOutput
], UninstallationPreparedEventObject>;
type UninstallationPreparedEventFilter = TypedEventFilter<UninstallationPreparedEvent>;
interface UpdatePreparedEventObject {
    dao: string;
    build: number;
    payload: IPluginSetup.SetupPayloadStructOutput;
}
type UpdatePreparedEvent = TypedEvent<[
    string,
    number,
    IPluginSetup.SetupPayloadStructOutput
], UpdatePreparedEventObject>;
type UpdatePreparedEventFilter = TypedEventFilter<UpdatePreparedEvent>;
interface amazingEventObject {
    k: BigNumber;
}
type amazingEvent = TypedEvent<[BigNumber], amazingEventObject>;
type amazingEventFilter = TypedEventFilter<amazingEvent>;
interface PluginUUPSUpgradeableSetupV4Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PluginUUPSUpgradeableSetupV4MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        implementation(overrides?: CallOverrides): Promise<[string]>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    implementation(overrides?: CallOverrides): Promise<string>;
    mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup.SetupPayloadStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    reset(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        implementation(overrides?: CallOverrides): Promise<string>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup.PreparedSetupDataStructOutput
        ] & {
            plugin: string;
            preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
        }>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup.SetupPayloadStruct, overrides?: CallOverrides): Promise<PermissionLib.MultiTargetPermissionStructOutput[]>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup.SetupPayloadStruct, overrides?: CallOverrides): Promise<[
            string,
            IPluginSetup.PreparedSetupDataStructOutput
        ] & {
            initData: string;
            preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
        }>;
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
        reset(overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "InstallationPrepared(address,bytes)"(dao?: null, data?: null): InstallationPreparedEventFilter;
        InstallationPrepared(dao?: null, data?: null): InstallationPreparedEventFilter;
        "UninstallationPrepared(address,tuple)"(dao?: null, payload?: null): UninstallationPreparedEventFilter;
        UninstallationPrepared(dao?: null, payload?: null): UninstallationPreparedEventFilter;
        "UpdatePrepared(address,uint16,tuple)"(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter;
        UpdatePrepared(dao?: null, build?: null, payload?: null): UpdatePreparedEventFilter;
        "amazing(uint256)"(k?: null): amazingEventFilter;
        amazing(k?: null): amazingEventFilter;
    };
    estimateGas: {
        implementation(overrides?: CallOverrides): Promise<BigNumber>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mockHelperCount(_helpersCount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        mockPermissionIndexes(_lowerIndex: PromiseOrValue<BigNumberish>, _upperIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareInstallation(_dao: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUninstallation(_dao: PromiseOrValue<string>, _payload: IPluginSetup.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        prepareUpdate(_dao: PromiseOrValue<string>, _currentBuild: PromiseOrValue<BigNumberish>, _payload: IPluginSetup.SetupPayloadStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        reset(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$J_MockedHelper = MockedHelper;
type index$J_PluginUUPSUpgradeableSetupV1Mock = PluginUUPSUpgradeableSetupV1Mock;
type index$J_PluginUUPSUpgradeableSetupV1MockBad = PluginUUPSUpgradeableSetupV1MockBad;
type index$J_PluginUUPSUpgradeableSetupV2Mock = PluginUUPSUpgradeableSetupV2Mock;
type index$J_PluginUUPSUpgradeableSetupV3Mock = PluginUUPSUpgradeableSetupV3Mock;
type index$J_PluginUUPSUpgradeableSetupV4Mock = PluginUUPSUpgradeableSetupV4Mock;
declare namespace index$J {
  export {
    index$J_MockedHelper as MockedHelper,
    index$J_PluginUUPSUpgradeableSetupV1Mock as PluginUUPSUpgradeableSetupV1Mock,
    index$J_PluginUUPSUpgradeableSetupV1MockBad as PluginUUPSUpgradeableSetupV1MockBad,
    index$J_PluginUUPSUpgradeableSetupV2Mock as PluginUUPSUpgradeableSetupV2Mock,
    index$J_PluginUUPSUpgradeableSetupV3Mock as PluginUUPSUpgradeableSetupV3Mock,
    index$J_PluginUUPSUpgradeableSetupV4Mock as PluginUUPSUpgradeableSetupV4Mock,
  };
}

declare namespace index$I {
  export {
    index$K as pluginUupsUpgradeableMockSol,
    index$J as pluginUupsUpgradeableSetupMockSol,
  };
}

declare namespace index$H {
  export {
    index$N as cloneable,
    index$L as constructable,
    index$I as uupsUpgradeable,
  };
}

interface ERC1155MockInterface extends utils.Interface {
    functions: {
        "balanceOf(address,uint256)": FunctionFragment;
        "balanceOfBatch(address[],uint256[])": FunctionFragment;
        "burn(address,uint256,uint256)": FunctionFragment;
        "isApprovedForAll(address,address)": FunctionFragment;
        "mint(address,uint256,uint256)": FunctionFragment;
        "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
        "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
        "setApprovalForAll(address,bool)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "uri(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "balanceOf" | "balanceOfBatch" | "burn" | "isApprovedForAll" | "mint" | "safeBatchTransferFrom" | "safeTransferFrom" | "setApprovalForAll" | "supportsInterface" | "uri"): FunctionFragment;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "balanceOfBatch", values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "burn", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "isApprovedForAll", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "mint", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "safeBatchTransferFrom", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setApprovalForAll", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "uri", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOfBatch", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeBatchTransferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
    events: {
        "ApprovalForAll(address,address,bool)": EventFragment;
        "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
        "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
        "URI(string,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}
interface ApprovalForAllEventObject$1 {
    account: string;
    operator: string;
    approved: boolean;
}
type ApprovalForAllEvent$1 = TypedEvent<[
    string,
    string,
    boolean
], ApprovalForAllEventObject$1>;
type ApprovalForAllEventFilter$1 = TypedEventFilter<ApprovalForAllEvent$1>;
interface TransferBatchEventObject {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
}
type TransferBatchEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber[],
    BigNumber[]
], TransferBatchEventObject>;
type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;
interface TransferSingleEventObject {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
}
type TransferSingleEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    BigNumber
], TransferSingleEventObject>;
type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;
interface URIEventObject {
    value: string;
    id: BigNumber;
}
type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;
type URIEventFilter = TypedEventFilter<URIEvent>;
interface ERC1155Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ERC1155MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        balanceOf(account: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        balanceOfBatch(accounts: PromiseOrValue<string>[], ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<[BigNumber[]]>;
        burn(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isApprovedForAll(account: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        mint(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        safeBatchTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, ids: PromiseOrValue<BigNumberish>[], amounts: PromiseOrValue<BigNumberish>[], data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        safeTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
    };
    balanceOf(account: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    balanceOfBatch(accounts: PromiseOrValue<string>[], ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>;
    burn(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isApprovedForAll(account: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    mint(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    safeBatchTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, ids: PromiseOrValue<BigNumberish>[], amounts: PromiseOrValue<BigNumberish>[], data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    safeTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        balanceOf(account: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        balanceOfBatch(accounts: PromiseOrValue<string>[], ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>;
        burn(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        isApprovedForAll(account: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        mint(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        safeBatchTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, ids: PromiseOrValue<BigNumberish>[], amounts: PromiseOrValue<BigNumberish>[], data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        safeTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ApprovalForAll(address,address,bool)"(account?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter$1;
        ApprovalForAll(account?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter$1;
        "TransferBatch(address,address,address,uint256[],uint256[])"(operator?: PromiseOrValue<string> | null, from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, ids?: null, values?: null): TransferBatchEventFilter;
        TransferBatch(operator?: PromiseOrValue<string> | null, from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, ids?: null, values?: null): TransferBatchEventFilter;
        "TransferSingle(address,address,address,uint256,uint256)"(operator?: PromiseOrValue<string> | null, from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, id?: null, value?: null): TransferSingleEventFilter;
        TransferSingle(operator?: PromiseOrValue<string> | null, from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, id?: null, value?: null): TransferSingleEventFilter;
        "URI(string,uint256)"(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
        URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
    };
    estimateGas: {
        balanceOf(account: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        balanceOfBatch(accounts: PromiseOrValue<string>[], ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>;
        burn(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isApprovedForAll(account: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        mint(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        safeBatchTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, ids: PromiseOrValue<BigNumberish>[], amounts: PromiseOrValue<BigNumberish>[], data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        safeTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        balanceOf(account: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        balanceOfBatch(accounts: PromiseOrValue<string>[], ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        burn(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isApprovedForAll(account: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mint(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        safeBatchTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, ids: PromiseOrValue<BigNumberish>[], amounts: PromiseOrValue<BigNumberish>[], data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        safeTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, id: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ERC20MockInterface extends utils.Interface {
    functions: {
        "allowance(address,address)": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "decimals()": FunctionFragment;
        "decimals_()": FunctionFragment;
        "decreaseAllowance(address,uint256)": FunctionFragment;
        "increaseAllowance(address,uint256)": FunctionFragment;
        "name()": FunctionFragment;
        "setBalance(address,uint256)": FunctionFragment;
        "setDecimals(uint8)": FunctionFragment;
        "symbol()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "allowance" | "approve" | "balanceOf" | "decimals" | "decimals_" | "decreaseAllowance" | "increaseAllowance" | "name" | "setBalance" | "setDecimals" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
    encodeFunctionData(functionFragment: "allowance", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "approve", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimals_", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "setBalance", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setDecimals", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals_", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    events: {
        "Approval(address,address,uint256)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}
interface ApprovalEventObject$1 {
    owner: string;
    spender: string;
    value: BigNumber;
}
type ApprovalEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], ApprovalEventObject$1>;
type ApprovalEventFilter$1 = TypedEventFilter<ApprovalEvent$1>;
interface TransferEventObject$1 {
    from: string;
    to: string;
    value: BigNumber;
}
type TransferEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], TransferEventObject$1>;
type TransferEventFilter$1 = TypedEventFilter<TransferEvent$1>;
interface ERC20Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ERC20MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        decimals(overrides?: CallOverrides): Promise<[number]>;
        decimals_(overrides?: CallOverrides): Promise<[number]>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        name(overrides?: CallOverrides): Promise<[string]>;
        setBalance(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDecimals(_decimals: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        symbol(overrides?: CallOverrides): Promise<[string]>;
        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    decimals(overrides?: CallOverrides): Promise<number>;
    decimals_(overrides?: CallOverrides): Promise<number>;
    decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    name(overrides?: CallOverrides): Promise<string>;
    setBalance(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDecimals(_decimals: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    symbol(overrides?: CallOverrides): Promise<string>;
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
    transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<number>;
        decimals_(overrides?: CallOverrides): Promise<number>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        name(overrides?: CallOverrides): Promise<string>;
        setBalance(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDecimals(_decimals: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        symbol(overrides?: CallOverrides): Promise<string>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Approval(address,address,uint256)"(owner?: PromiseOrValue<string> | null, spender?: PromiseOrValue<string> | null, value?: null): ApprovalEventFilter$1;
        Approval(owner?: PromiseOrValue<string> | null, spender?: PromiseOrValue<string> | null, value?: null): ApprovalEventFilter$1;
        "Transfer(address,address,uint256)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, value?: null): TransferEventFilter$1;
        Transfer(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, value?: null): TransferEventFilter$1;
    };
    estimateGas: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<BigNumber>;
        decimals_(overrides?: CallOverrides): Promise<BigNumber>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        name(overrides?: CallOverrides): Promise<BigNumber>;
        setBalance(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDecimals(_decimals: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        symbol(overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimals_(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setBalance(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDecimals(_decimals: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface ERC721MockInterface extends utils.Interface {
    functions: {
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "burn(uint256)": FunctionFragment;
        "getApproved(uint256)": FunctionFragment;
        "isApprovedForAll(address,address)": FunctionFragment;
        "mint(address,uint256)": FunctionFragment;
        "name()": FunctionFragment;
        "ownerOf(uint256)": FunctionFragment;
        "safeTransferFrom(address,address,uint256)": FunctionFragment;
        "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
        "setApprovalForAll(address,bool)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "symbol()": FunctionFragment;
        "tokenURI(uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "approve" | "balanceOf" | "burn" | "getApproved" | "isApprovedForAll" | "mint" | "name" | "ownerOf" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setApprovalForAll" | "supportsInterface" | "symbol" | "tokenURI" | "transferFrom"): FunctionFragment;
    encodeFunctionData(functionFragment: "approve", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "burn", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getApproved", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isApprovedForAll", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "mint", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "ownerOf", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom(address,address,uint256)", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom(address,address,uint256,bytes)", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setApprovalForAll", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "tokenURI", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getApproved", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    events: {
        "Approval(address,address,uint256)": EventFragment;
        "ApprovalForAll(address,address,bool)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}
interface ApprovalEventObject {
    owner: string;
    approved: string;
    tokenId: BigNumber;
}
type ApprovalEvent = TypedEvent<[
    string,
    string,
    BigNumber
], ApprovalEventObject>;
type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
interface ApprovalForAllEventObject {
    owner: string;
    operator: string;
    approved: boolean;
}
type ApprovalForAllEvent = TypedEvent<[
    string,
    string,
    boolean
], ApprovalForAllEventObject>;
type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;
interface TransferEventObject {
    from: string;
    to: string;
    tokenId: BigNumber;
}
type TransferEvent = TypedEvent<[
    string,
    string,
    BigNumber
], TransferEventObject>;
type TransferEventFilter = TypedEventFilter<TransferEvent>;
interface ERC721Mock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ERC721MockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        approve(to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        burn(tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        mint(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        name(overrides?: CallOverrides): Promise<[string]>;
        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        "safeTransferFrom(address,address,uint256)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "safeTransferFrom(address,address,uint256,bytes)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        symbol(overrides?: CallOverrides): Promise<[string]>;
        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    approve(to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    burn(tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    mint(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    name(overrides?: CallOverrides): Promise<string>;
    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    "safeTransferFrom(address,address,uint256)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "safeTransferFrom(address,address,uint256,bytes)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    symbol(overrides?: CallOverrides): Promise<string>;
    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        approve(to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        burn(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        mint(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        name(overrides?: CallOverrides): Promise<string>;
        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        "safeTransferFrom(address,address,uint256)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        "safeTransferFrom(address,address,uint256,bytes)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        symbol(overrides?: CallOverrides): Promise<string>;
        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Approval(address,address,uint256)"(owner?: PromiseOrValue<string> | null, approved?: PromiseOrValue<string> | null, tokenId?: PromiseOrValue<BigNumberish> | null): ApprovalEventFilter;
        Approval(owner?: PromiseOrValue<string> | null, approved?: PromiseOrValue<string> | null, tokenId?: PromiseOrValue<BigNumberish> | null): ApprovalEventFilter;
        "ApprovalForAll(address,address,bool)"(owner?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter;
        ApprovalForAll(owner?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter;
        "Transfer(address,address,uint256)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, tokenId?: PromiseOrValue<BigNumberish> | null): TransferEventFilter;
        Transfer(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, tokenId?: PromiseOrValue<BigNumberish> | null): TransferEventFilter;
    };
    estimateGas: {
        approve(to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        burn(tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        mint(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        name(overrides?: CallOverrides): Promise<BigNumber>;
        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "safeTransferFrom(address,address,uint256)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "safeTransferFrom(address,address,uint256,bytes)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        symbol(overrides?: CallOverrides): Promise<BigNumber>;
        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        approve(to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        burn(tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mint(account: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "safeTransferFrom(address,address,uint256)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "safeTransferFrom(address,address,uint256,bytes)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$G_ERC1155Mock = ERC1155Mock;
type index$G_ERC20Mock = ERC20Mock;
type index$G_ERC721Mock = ERC721Mock;
declare namespace index$G {
  export {
    index$G_ERC1155Mock as ERC1155Mock,
    index$G_ERC20Mock as ERC20Mock,
    index$G_ERC721Mock as ERC721Mock,
  };
}

interface RegistryUtilsInterface extends utils.Interface {
    functions: {
        "isSubdomainValid(string)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "isSubdomainValid"): FunctionFragment;
    encodeFunctionData(functionFragment: "isSubdomainValid", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "isSubdomainValid", data: BytesLike): Result;
    events: {};
}
interface RegistryUtils extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: RegistryUtilsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        isSubdomainValid(subdomain: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    isSubdomainValid(subdomain: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        isSubdomainValid(subdomain: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        isSubdomainValid(subdomain: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        isSubdomainValid(subdomain: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$F_RegistryUtils = RegistryUtils;
declare namespace index$F {
  export {
    index$F_RegistryUtils as RegistryUtils,
  };
}

interface InterfaceBasedRegistryMockInterface extends utils.Interface {
    functions: {
        "REGISTER_PERMISSION_ID()": FunctionFragment;
        "UPGRADE_REGISTRY_PERMISSION_ID()": FunctionFragment;
        "dao()": FunctionFragment;
        "entries(address)": FunctionFragment;
        "initialize(address,bytes4)": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "register(address)": FunctionFragment;
        "targetInterfaceId()": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "REGISTER_PERMISSION_ID" | "UPGRADE_REGISTRY_PERMISSION_ID" | "dao" | "entries" | "initialize" | "proxiableUUID" | "register" | "targetInterfaceId" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "REGISTER_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_REGISTRY_PERMISSION_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "dao", values?: undefined): string;
    encodeFunctionData(functionFragment: "entries", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "register", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "targetInterfaceId", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "REGISTER_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_REGISTRY_PERMISSION_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "entries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetInterfaceId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "Registered(address)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent = TypedEvent<[
    string,
    string
], AdminChangedEventObject>;
type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;
interface BeaconUpgradedEventObject {
    beacon: string;
}
type BeaconUpgradedEvent = TypedEvent<[
    string
], BeaconUpgradedEventObject>;
type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;
interface InitializedEventObject {
    version: number;
}
type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
interface RegisteredEventObject {
    arg0: string;
}
type RegisteredEvent = TypedEvent<[string], RegisteredEventObject>;
type RegisteredEventFilter = TypedEventFilter<RegisteredEvent>;
interface UpgradedEventObject {
    implementation: string;
}
type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;
type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;
interface InterfaceBasedRegistryMock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: InterfaceBasedRegistryMockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        REGISTER_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;
        dao(overrides?: CallOverrides): Promise<[string]>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        initialize(_dao: PromiseOrValue<string>, targetInterface: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;
        register(registrant: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        targetInterfaceId(overrides?: CallOverrides): Promise<[string]>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    REGISTER_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
    dao(overrides?: CallOverrides): Promise<string>;
    entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    initialize(_dao: PromiseOrValue<string>, targetInterface: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    proxiableUUID(overrides?: CallOverrides): Promise<string>;
    register(registrant: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    targetInterfaceId(overrides?: CallOverrides): Promise<string>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        REGISTER_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;
        dao(overrides?: CallOverrides): Promise<string>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        initialize(_dao: PromiseOrValue<string>, targetInterface: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        proxiableUUID(overrides?: CallOverrides): Promise<string>;
        register(registrant: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        targetInterfaceId(overrides?: CallOverrides): Promise<string>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "Registered(address)"(arg0?: null): RegisteredEventFilter;
        Registered(arg0?: null): RegisteredEventFilter;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    };
    estimateGas: {
        REGISTER_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;
        dao(overrides?: CallOverrides): Promise<BigNumber>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_dao: PromiseOrValue<string>, targetInterface: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;
        register(registrant: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        targetInterfaceId(overrides?: CallOverrides): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        REGISTER_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        UPGRADE_REGISTRY_PERMISSION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        entries(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_dao: PromiseOrValue<string>, targetInterface: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        register(registrant: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        targetInterfaceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$E_InterfaceBasedRegistryMock = InterfaceBasedRegistryMock;
declare namespace index$E {
  export {
    index$F as registryUtilsTestSol,
    index$E_InterfaceBasedRegistryMock as InterfaceBasedRegistryMock,
  };
}

interface ProtocolVersionMockInterface extends utils.Interface {
    functions: {
        "protocolVersion()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "protocolVersion"): FunctionFragment;
    encodeFunctionData(functionFragment: "protocolVersion", values?: undefined): string;
    decodeFunctionResult(functionFragment: "protocolVersion", data: BytesLike): Result;
    events: {};
}
interface ProtocolVersionMock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ProtocolVersionMockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        protocolVersion(overrides?: CallOverrides): Promise<[[number, number, number]]>;
    };
    protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    callStatic: {
        protocolVersion(overrides?: CallOverrides): Promise<[number, number, number]>;
    };
    filters: {};
    estimateGas: {
        protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$D_ProtocolVersionMock = ProtocolVersionMock;
declare namespace index$D {
  export {
    index$R as dao,
    index$Q as permission,
    index$H as plugin,
    index$G as token,
    index$E as utils,
    index$D_ProtocolVersionMock as ProtocolVersionMock,
  };
}

declare namespace index$C {
  export {
    index$10 as core,
    index$U as framework,
    index$D as test,
  };
}

declare class ENS__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "ApprovalForAll";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "label";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "NewOwner";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "resolver";
            readonly type: "address";
        }];
        readonly name: "NewResolver";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "ttl";
            readonly type: "uint64";
        }];
        readonly name: "NewTTL";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "recordExists";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "resolver";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "setOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "resolver";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "ttl";
            readonly type: "uint64";
        }];
        readonly name: "setRecord";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "resolver";
            readonly type: "address";
        }];
        readonly name: "setResolver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "label";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "setSubnodeOwner";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "label";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "resolver";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "ttl";
            readonly type: "uint64";
        }];
        readonly name: "setSubnodeRecord";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "ttl";
            readonly type: "uint64";
        }];
        readonly name: "setTTL";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "ttl";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ENSInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ENS;
}

type ENSRegistryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ENSRegistry__factory extends ContractFactory {
    constructor(...args: ENSRegistryConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ENSRegistry>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ENSRegistry;
    connect(signer: Signer): ENSRegistry__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5060008080526020527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb580546001600160a01b03191633179055610a7f806100596000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80635b0fc9c311610081578063cf4088231161005b578063cf40882314610204578063e985e9c514610217578063f79fe5381461026357600080fd5b80635b0fc9c3146101cb5780635ef2c7f0146101de578063a22cb465146101f157600080fd5b806314ab9038116100b257806314ab90381461015657806316a25cbd1461016b5780631896f70a146101b857600080fd5b80630178b8bf146100d957806302571be31461012257806306ab592314610135575b600080fd5b6101056100e736600461086e565b6000908152602081905260409020600101546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b61010561013036600461086e565b61028e565b6101486101433660046108a3565b6102bc565b604051908152602001610119565b6101696101643660046108f0565b6103da565b005b61019f61017936600461086e565b600090815260208190526040902060010154600160a01b900467ffffffffffffffff1690565b60405167ffffffffffffffff9091168152602001610119565b6101696101c636600461091c565b6104c1565b6101696101d936600461091c565b610593565b6101696101ec36600461093f565b61065f565b6101696101ff366004610996565b610681565b6101696102123660046109d2565b61070b565b610253610225366004610a1f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6040519015158152602001610119565b61025361027136600461086e565b6000908152602081905260409020546001600160a01b0316151590565b6000818152602081905260408120546001600160a01b03163081036102b65750600092915050565b92915050565b60008381526020819052604081205484906001600160a01b03163381148061030757506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b61031057600080fd5b6040805160208101889052908101869052600090606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152928390529120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03881617905590506040516001600160a01b0386168152869088907fce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e829060200160405180910390a39695505050505050565b60008281526020819052604090205482906001600160a01b03163381148061042557506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b61042e57600080fd5b60405167ffffffffffffffff8416815284907f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa689060200160405180910390a25050600091825260208290526040909120600101805467ffffffffffffffff909216600160a01b027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60008281526020819052604090205482906001600160a01b03163381148061050c57506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b61051557600080fd5b6040516001600160a01b038416815284907f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a09060200160405180910390a25050600091825260208290526040909120600101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b60008281526020819052604090205482906001600160a01b0316338114806105de57506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6105e757600080fd5b6000848152602081905260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790556040516001600160a01b038416815284907fd4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d2669060200160405180910390a250505050565b600061066c8686866102bc565b9050610679818484610726565b505050505050565b3360008181526001602090815260408083206001600160a01b0387168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6107158484610593565b610720848383610726565b50505050565b6000838152602081905260409020600101546001600160a01b038381169116146107b95760008381526020818152604091829020600101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616908117909155915191825284917f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0910160405180910390a25b60008381526020819052604090206001015467ffffffffffffffff828116600160a01b9092041614610869576000838152602081815260409182902060010180547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b67ffffffffffffffff861690810291909117909155915191825284917f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa68910160405180910390a25b505050565b60006020828403121561088057600080fd5b5035919050565b80356001600160a01b038116811461089e57600080fd5b919050565b6000806000606084860312156108b857600080fd5b83359250602084013591506108cf60408501610887565b90509250925092565b803567ffffffffffffffff8116811461089e57600080fd5b6000806040838503121561090357600080fd5b82359150610913602084016108d8565b90509250929050565b6000806040838503121561092f57600080fd5b8235915061091360208401610887565b600080600080600060a0868803121561095757600080fd5b853594506020860135935061096e60408701610887565b925061097c60608701610887565b915061098a608087016108d8565b90509295509295909350565b600080604083850312156109a957600080fd5b6109b283610887565b9150602083013580151581146109c757600080fd5b809150509250929050565b600080600080608085870312156109e857600080fd5b843593506109f860208601610887565b9250610a0660408601610887565b9150610a14606086016108d8565b905092959194509250565b60008060408385031215610a3257600080fd5b610a3b83610887565b91506109136020840161088756fea2646970667358221220db3b4f5904b45afbf97ca0758cb71d6d04309d483fea7d5f720fc910c886e5b464736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "ApprovalForAll";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "label";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "NewOwner";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "resolver";
            readonly type: "address";
        }];
        readonly name: "NewResolver";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "ttl";
            readonly type: "uint64";
        }];
        readonly name: "NewTTL";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "recordExists";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "resolver";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "setOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "resolver";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "ttl";
            readonly type: "uint64";
        }];
        readonly name: "setRecord";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "resolver";
            readonly type: "address";
        }];
        readonly name: "setResolver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "label";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "setSubnodeOwner";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "label";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "resolver";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "ttl";
            readonly type: "uint64";
        }];
        readonly name: "setSubnodeRecord";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "ttl";
            readonly type: "uint64";
        }];
        readonly name: "setTTL";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "ttl";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ENSRegistryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ENSRegistry;
}

type index$B_ENS__factory = ENS__factory;
declare const index$B_ENS__factory: typeof ENS__factory;
type index$B_ENSRegistry__factory = ENSRegistry__factory;
declare const index$B_ENSRegistry__factory: typeof ENSRegistry__factory;
declare namespace index$B {
  export {
    index$B_ENS__factory as ENS__factory,
    index$B_ENSRegistry__factory as ENSRegistry__factory,
  };
}

declare class INameWrapper__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }];
        readonly name: "ownerOf";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): INameWrapperInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): INameWrapper;
}

type PublicResolverConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PublicResolver__factory extends ContractFactory {
    constructor(...args: PublicResolverConstructorParams);
    deploy(_ens: PromiseOrValue<string>, wrapperAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PublicResolver>;
    getDeployTransaction(_ens: PromiseOrValue<string>, wrapperAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PublicResolver;
    connect(signer: Signer): PublicResolver__factory;
    static readonly bytecode = "0x60806040523480156200001157600080fd5b5060405162002a1138038062002a1183398101604081905262000034916200007f565b600b80546001600160a01b039384166001600160a01b031991821617909155600c8054929093169116179055620000be565b6001600160a01b03811681146200007c57600080fd5b50565b600080604083850312156200009357600080fd5b8251620000a08162000066565b6020840151909250620000b38162000066565b809150509250929050565b61294380620000ce6000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806377372213116100ee578063bc1c58d111610097578063d5fa2b0011610071578063d5fa2b0014610403578063e59d895d14610416578063e985e9c514610429578063f1cb7e061461046557600080fd5b8063bc1c58d1146103a0578063c8690233146103b3578063ce3decdc146103f057600080fd5b8063a8fa5682116100c8578063a8fa56821461035a578063ac9650d81461036d578063ad5780af1461038d57600080fd5b806377372213146103215780638b95dd7114610334578063a22cb4651461034757600080fd5b8063304e6ade1161015b57806359d1d43c1161013557806359d1d43c146102c85780635c98042b146102e8578063623195b0146102fb578063691f34311461030e57600080fd5b8063304e6ade146102625780633b3b57de146102755780634cbf6ba41461028857600080fd5b8063124a319c1161018c578063124a319c146102035780632203ab561461022e57806329cd62ea1461024f57600080fd5b806301ffc9a7146101b35780630af179d7146101db57806310f13a8c146101f0575b600080fd5b6101c66101c1366004611f63565b610478565b60405190151581526020015b60405180910390f35b6101ee6101e9366004611fc0565b6104bc565b005b6101ee6101fe36600461200c565b6106aa565b610216610211366004612086565b610758565b6040516001600160a01b0390911681526020016101d2565b61024161023c3660046120b2565b6109ea565b6040516101d2929190612124565b6101ee61025d36600461213d565b610b05565b6101ee610270366004611fc0565b610b85565b610216610283366004612169565b610be4565b6101c66102963660046120b2565b600091825260066020908152604080842060048352818520548552825280842092845291905290205461ffff16151590565b6102db6102d6366004611fc0565b610c16565b6040516101d29190612182565b6102db6102f6366004612169565b610cdb565b6101ee610309366004612195565b610d7d565b6102db61031c366004612169565b610dfe565b6101ee61032f366004611fc0565b610e1b565b6101ee6103423660046121fe565b610e7a565b6101ee6103553660046122d7565b610f40565b6102db610368366004612315565b611066565b61038061037b366004612355565b6110a9565b6040516101d291906123ca565b6101ee61039b366004612169565b6111c4565b6102db6103ae366004612169565b611225565b6103db6103c1366004612169565b600090815260096020526040902080546001909101549091565b604080519283526020830191909152016101d2565b6101ee6103fe366004611fc0565b611242565b6101ee61041136600461244a565b61134e565b6101ee61042436600461246f565b611375565b6101c66104373660046124a4565b6001600160a01b039182166000908152600d6020908152604080832093909416825291909152205460ff1690565b6102db6104733660046120b2565b61141a565b60006001600160e01b031982167fac9650d80000000000000000000000000000000000000000000000000000000014806104b657506104b6826114c8565b92915050565b826104c681611506565b6104cf57600080fd5b60008060608060008061051c60008a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506116719050565b90505b80515160208201511015610645578561ffff166000036105845780604001519550610549816116d2565b93508360405160200161055c91906124d2565b60405160208183030381529060405280519060200120915061057d816116f3565b9250610637565b600061058f826116d2565b9050816040015161ffff168761ffff161415806105b357506105b1858261170f565b155b156106355761060e8b86898d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505060208801518c9150610606908290612504565b8a511561172d565b816040015196508160200151955080945084805190602001209250610632826116f3565b93505b505b6106408161196c565b61051f565b5082511561069f5761069f8984878b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b925061069791508290508e612504565b88511561172d565b505050505050505050565b846106b481611506565b6106bd57600080fd5b8282600a600089815260200190815260200160002087876040516106e2929190612517565b908152602001604051809103902091826106fd9291906125af565b50848460405161070e929190612517565b6040518091039020867fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550878760405161074892919061269a565b60405180910390a3505050505050565b60008281526007602090815260408083206001600160e01b0319851684529091528120546001600160a01b031680156107925790506104b6565b600061079d85610be4565b90506001600160a01b0381166107b8576000925050506104b6565b6040516301ffc9a760e01b602482015260009081906001600160a01b0384169060440160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b1790525161082591906124d2565b600060405180830381855afa9150503d8060008114610860576040519150601f19603f3d011682016040523d82523d6000602084013e610865565b606091505b5091509150811580610878575060208151105b806108ba575080601f81518110610891576108916126ae565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b156108cc5760009450505050506104b6565b6040516001600160e01b0319871660248201526001600160a01b0384169060440160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b1790525161093791906124d2565b600060405180830381855afa9150503d8060008114610972576040519150601f19603f3d011682016040523d82523d6000602084013e610977565b606091505b50909250905081158061098b575060208151105b806109cd575080601f815181106109a4576109a46126ae565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b156109df5760009450505050506104b6565b509095945050505050565b600082815260208190526040812060609060015b848111610ae55780851615801590610a2e575060008181526020839052604081208054610a2a90612527565b9050115b15610add5780826000838152602001908152602001600020808054610a5290612527565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7e90612527565b8015610acb5780601f10610aa057610100808354040283529160200191610acb565b820191906000526020600020905b815481529060010190602001808311610aae57829003601f168201915b50505050509050935093505050610afe565b60011b6109fe565b5060006040518060200160405280600081525092509250505b9250929050565b82610b0f81611506565b610b1857600080fd5b60408051808201825284815260208082018581526000888152600983528490209251835551600190920191909155815185815290810184905285917f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4691015b60405180910390a250505050565b82610b8f81611506565b610b9857600080fd5b6000848152600260205260409020610bb18385836125af565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610b7792919061269a565b600080610bf283603c61141a565b90508051600003610c065750600092915050565b610c0f81611a54565b9392505050565b6060600a60008581526020019081526020016000208383604051610c3b929190612517565b90815260200160405180910390208054610c5490612527565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8090612527565b8015610ccd5780601f10610ca257610100808354040283529160200191610ccd565b820191906000526020600020905b815481529060010190602001808311610cb057829003601f168201915b505050505090509392505050565b6000818152600360205260409020805460609190610cf890612527565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2490612527565b8015610d715780601f10610d4657610100808354040283529160200191610d71565b820191906000526020600020905b815481529060010190602001808311610d5457829003601f168201915b50505050509050919050565b83610d8781611506565b610d9057600080fd5b83610d9c600182612504565b1615610da757600080fd5b6000858152602081815260408083208784529091529020610dc98385836125af565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b6000818152600860205260409020805460609190610cf890612527565b82610e2581611506565b610e2e57600080fd5b6000848152600860205260409020610e478385836125af565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610b7792919061269a565b82610e8481611506565b610e8d57600080fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af7528484604051610ebf929190612124565b60405180910390a2603c8303610f1657837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2610efa84611a54565b6040516001600160a01b03909116815260200160405180910390a25b60008481526001602090815260408083208684529091529020610f3983826126c4565b5050505050565b6001600160a01b0382163303610fdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840160405180910390fd5b336000818152600d602090815260408083206001600160a01b0387168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000838152600560209081526040808320600483528184205484528252808320858452825280832061ffff851684529091529020805460609190610c5490612527565b60608167ffffffffffffffff8111156110c4576110c46121e8565b6040519080825280602002602001820160405280156110f757816020015b60608152602001906001900390816110e25790505b50905060005b828110156111bd576000803086868581811061111b5761111b6126ae565b905060200281019061112d9190612784565b60405161113b929190612517565b600060405180830381855af49150503d8060008114611176576040519150601f19603f3d011682016040523d82523d6000602084013e61117b565b606091505b50915091508161118a57600080fd5b8084848151811061119d5761119d6126ae565b6020026020010181905250505080806111b5906127e9565b9150506110fd565b5092915050565b806111ce81611506565b6111d757600080fd5b60008281526004602052604081208054916111f1836127e9565b909155505060405182907fb757169b8492ca2f1c6619d9d76ce22803035c3b1d5f6930dffe7b127c1a198390600090a25050565b6000818152600260205260409020805460609190610cf890612527565b8261124c81611506565b61125557600080fd5b6000848152600360205260408120805461126e90612527565b80601f016020809104026020016040519081016040528092919081815260200182805461129a90612527565b80156112e75780601f106112bc576101008083540402835291602001916112e7565b820191906000526020600020905b8154815290600101906020018083116112ca57829003601f168201915b505050600088815260036020526040902092935061130a915085905086836125af565b50847f8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f8582868660405161133f93929190612803565b60405180910390a25050505050565b8161135881611506565b61136157600080fd5b61137083603c61034285611a7c565b505050565b8261137f81611506565b61138857600080fd5b60008481526007602090815260408083206001600160e01b031987168085529083529281902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038716908117909155905190815286917f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa910160405180910390a350505050565b6000828152600160209081526040808320848452909152902080546060919061144290612527565b80601f016020809104026020016040519081016040528092919081815260200182805461146e90612527565b80156114bb5780601f10611490576101008083540402835291602001916114bb565b820191906000526020600020905b81548152906001019060200180831161149e57829003601f168201915b5050505050905092915050565b60006001600160e01b031982167f59d1d43c0000000000000000000000000000000000000000000000000000000014806104b657506104b682611ab5565b600b546040517f02571be30000000000000000000000000000000000000000000000000000000081526004810183905260009182916001600160a01b03909116906302571be390602401602060405180830381865afa15801561156d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115919190612833565b600c549091506001600160a01b039081169082160361163357600c546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0390911690636352211e90602401602060405180830381865afa15801561160c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116309190612833565b90505b6001600160a01b038116331480610c0f57506001600160a01b0381166000908152600d6020908152604080832033845290915290205460ff16610c0f565b6116bf6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c081018290526104b68161196c565b602081015181516060916104b6916116ea9082611af3565b84519190611b55565b60a081015160c08201516060916104b6916116ea908290612504565b600081518351148015610c0f5750610c0f8360008460008751611bcc565b60008781526004602090815260408220548851918901919091209091611754878787611b55565b9050831561185d5760008a81526005602090815260408083208684528252808320858452825280832061ffff8c1684529091529020805461179490612527565b1590506117e85760008a815260066020908152604080832086845282528083208584529091528120805461ffff16916117cc83612850565b91906101000a81548161ffff021916908361ffff160217905550505b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c168452909152812061181e91611ef0565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a60405161185092919061286e565b60405180910390a2611960565b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c1684529091529020805461189590612527565b90506000036118eb5760008a815260066020908152604080832086845282528083208584529091528120805461ffff16916118cf83612894565b91906101000a81548161ffff021916908361ffff160217905550505b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c168452909152902061192282826126c4565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a84604051611957939291906128b5565b60405180910390a25b50505050505050505050565b60c081015160208201819052815151116119835750565b600061199782600001518360200151611af3565b82602001516119a691906128e4565b82519091506119b59082611bef565b61ffff1660408301526119c96002826128e4565b82519091506119d89082611bef565b61ffff1660608301526119ec6002826128e4565b82519091506119fb9082611c17565b63ffffffff166080830152611a116004826128e4565b8251909150600090611a239083611bef565b61ffff169050611a346002836128e4565b60a084018190529150611a4781836128e4565b60c0909301929092525050565b60008151601414611a6457600080fd5b50602001516c01000000000000000000000000900490565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b60006001600160e01b031982167fc86902330000000000000000000000000000000000000000000000000000000014806104b657506104b682611c41565b6000815b83518110611b0757611b076128f7565b6000611b138583611c7f565b60ff169050611b238160016128e4565b611b2d90836128e4565b915080600003611b3d5750611b43565b50611af7565b611b4d8382612504565b949350505050565b8251606090611b6483856128e4565b1115611b6f57600080fd5b60008267ffffffffffffffff811115611b8a57611b8a6121e8565b6040519080825280601f01601f191660200182016040528015611bb4576020820181803683370190505b509050602080820190868601016109df828287611ca3565b6000611bd9848484611cf9565b611be4878785611cf9565b149695505050505050565b8151600090611bff8360026128e4565b1115611c0a57600080fd5b50016002015161ffff1690565b8151600090611c278360046128e4565b1115611c3257600080fd5b50016004015163ffffffff1690565b60006001600160e01b031982167f691f34310000000000000000000000000000000000000000000000000000000014806104b657506104b682611d1d565b6000828281518110611c9357611c936126ae565b016020015160f81c905092915050565b60208110611cdb5781518352611cba6020846128e4565b9250611cc76020836128e4565b9150611cd4602082612504565b9050611ca3565b905182516020929092036101000a6000190180199091169116179052565b8251600090611d0883856128e4565b1115611d1357600080fd5b5091016020012090565b60006001600160e01b031982167f124a319c0000000000000000000000000000000000000000000000000000000014806104b657506104b68260006001600160e01b031982167fa8fa5682000000000000000000000000000000000000000000000000000000001480611db957506001600160e01b031982167f5c98042b00000000000000000000000000000000000000000000000000000000145b806104b657506104b68260006001600160e01b031982167fbc1c58d10000000000000000000000000000000000000000000000000000000014806104b657506104b68260006001600160e01b031982167f3b3b57de000000000000000000000000000000000000000000000000000000001480611e5f57506001600160e01b031982167ff1cb7e0600000000000000000000000000000000000000000000000000000000145b806104b657506104b68260006001600160e01b031982167f2203ab560000000000000000000000000000000000000000000000000000000014806104b657506104b68260006001600160e01b031982167fac9650d80000000000000000000000000000000000000000000000000000000014806104b657506301ffc9a760e01b6001600160e01b03198316146104b6565b508054611efc90612527565b6000825580601f10611f0c575050565b601f016020900490600052602060002090810190611f2a9190611f2d565b50565b5b80821115611f425760008155600101611f2e565b5090565b80356001600160e01b031981168114611f5e57600080fd5b919050565b600060208284031215611f7557600080fd5b610c0f82611f46565b60008083601f840112611f9057600080fd5b50813567ffffffffffffffff811115611fa857600080fd5b602083019150836020828501011115610afe57600080fd5b600080600060408486031215611fd557600080fd5b83359250602084013567ffffffffffffffff811115611ff357600080fd5b611fff86828701611f7e565b9497909650939450505050565b60008060008060006060868803121561202457600080fd5b85359450602086013567ffffffffffffffff8082111561204357600080fd5b61204f89838a01611f7e565b9096509450604088013591508082111561206857600080fd5b5061207588828901611f7e565b969995985093965092949392505050565b6000806040838503121561209957600080fd5b823591506120a960208401611f46565b90509250929050565b600080604083850312156120c557600080fd5b50508035926020909101359150565b60005b838110156120ef5781810151838201526020016120d7565b50506000910152565b600081518084526121108160208601602086016120d4565b601f01601f19169290920160200192915050565b828152604060208201526000611b4d60408301846120f8565b60008060006060848603121561215257600080fd5b505081359360208301359350604090920135919050565b60006020828403121561217b57600080fd5b5035919050565b602081526000610c0f60208301846120f8565b600080600080606085870312156121ab57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156121d057600080fd5b6121dc87828801611f7e565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561221357600080fd5b8335925060208401359150604084013567ffffffffffffffff8082111561223957600080fd5b818601915086601f83011261224d57600080fd5b81358181111561225f5761225f6121e8565b604051601f8201601f19908116603f01168101908382118183101715612287576122876121e8565b816040528281528960208487010111156122a057600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6001600160a01b0381168114611f2a57600080fd5b600080604083850312156122ea57600080fd5b82356122f5816122c2565b91506020830135801515811461230a57600080fd5b809150509250929050565b60008060006060848603121561232a57600080fd5b8335925060208401359150604084013561ffff8116811461234a57600080fd5b809150509250925092565b6000806020838503121561236857600080fd5b823567ffffffffffffffff8082111561238057600080fd5b818501915085601f83011261239457600080fd5b8135818111156123a357600080fd5b8660208260051b85010111156123b857600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561243d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261242b8583516120f8565b945092850192908501906001016123f1565b5092979650505050505050565b6000806040838503121561245d57600080fd5b82359150602083013561230a816122c2565b60008060006060848603121561248457600080fd5b8335925061249460208501611f46565b9150604084013561234a816122c2565b600080604083850312156124b757600080fd5b82356124c2816122c2565b9150602083013561230a816122c2565b600082516124e48184602087016120d4565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104b6576104b66124ee565b8183823760009101908152919050565b600181811c9082168061253b57607f821691505b60208210810361255b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561137057600081815260208120601f850160051c810160208610156125885750805b601f850160051c820191505b818110156125a757828155600101612594565b505050505050565b67ffffffffffffffff8311156125c7576125c76121e8565b6125db836125d58354612527565b83612561565b6000601f84116001811461260f57600085156125f75750838201355b600019600387901b1c1916600186901b178355610f39565b600083815260209020601f19861690835b828110156126405786850135825560209485019460019092019101612620565b508682101561265d5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b602081526000611b4d60208301848661266f565b634e487b7160e01b600052603260045260246000fd5b815167ffffffffffffffff8111156126de576126de6121e8565b6126f2816126ec8454612527565b84612561565b602080601f831160018114612727576000841561270f5750858301515b600019600386901b1c1916600185901b1785556125a7565b600085815260208120601f198616915b8281101561275657888601518255948401946001909101908401612737565b50858210156127745787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126127b957600080fd5b83018035915067ffffffffffffffff8211156127d457600080fd5b602001915036819003821315610afe57600080fd5b600060001982036127fc576127fc6124ee565b5060010190565b60408152600061281660408301866120f8565b828103602084015261282981858761266f565b9695505050505050565b60006020828403121561284557600080fd5b8151610c0f816122c2565b600061ffff821680612864576128646124ee565b6000190192915050565b60408152600061288160408301856120f8565b905061ffff831660208301529392505050565b600061ffff8083168181036128ab576128ab6124ee565b6001019392505050565b6060815260006128c860608301866120f8565b61ffff85166020840152828103604084015261282981856120f8565b808201808211156104b6576104b66124ee565b634e487b7160e01b600052600160045260246000fdfea26469706673582212203dae933f7034201bd245e98fcf94447fed3de1ec9ec16aae7fdb364375f7b49964736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract ENS";
            readonly name: "_ens";
            readonly type: "address";
        }, {
            readonly internalType: "contract INameWrapper";
            readonly name: "wrapperAddress";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "contentType";
            readonly type: "uint256";
        }];
        readonly name: "ABIChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "a";
            readonly type: "address";
        }];
        readonly name: "AddrChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "newAddress";
            readonly type: "bytes";
        }];
        readonly name: "AddressChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "ApprovalForAll";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "hash";
            readonly type: "bytes";
        }];
        readonly name: "ContenthashChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "name";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "record";
            readonly type: "bytes";
        }];
        readonly name: "DNSRecordChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "name";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }];
        readonly name: "DNSRecordDeleted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "DNSZoneCleared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "lastzonehash";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "zonehash";
            readonly type: "bytes";
        }];
        readonly name: "DNSZonehashChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "implementer";
            readonly type: "address";
        }];
        readonly name: "InterfaceChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }];
        readonly name: "NameChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "x";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "y";
            readonly type: "bytes32";
        }];
        readonly name: "PubkeyChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "string";
            readonly name: "indexedKey";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }];
        readonly name: "TextChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "contentTypes";
            readonly type: "uint256";
        }];
        readonly name: "ABI";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "addr";
        readonly outputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }];
        readonly name: "addr";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "clearDNSZone";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "contenthash";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "name";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }];
        readonly name: "dnsRecord";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "name";
            readonly type: "bytes32";
        }];
        readonly name: "hasDNSRecords";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "interfaceImplementer";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "data";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "results";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "pubkey";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "x";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "y";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "contentType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "setABI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "a";
            readonly type: "bytes";
        }];
        readonly name: "setAddr";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "a";
            readonly type: "address";
        }];
        readonly name: "setAddr";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "hash";
            readonly type: "bytes";
        }];
        readonly name: "setContenthash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "setDNSRecords";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }, {
            readonly internalType: "address";
            readonly name: "implementer";
            readonly type: "address";
        }];
        readonly name: "setInterface";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "newName";
            readonly type: "string";
        }];
        readonly name: "setName";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "x";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "y";
            readonly type: "bytes32";
        }];
        readonly name: "setPubkey";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "value";
            readonly type: "string";
        }];
        readonly name: "setText";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "hash";
            readonly type: "bytes";
        }];
        readonly name: "setZonehash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }];
        readonly name: "text";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "zonehash";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PublicResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PublicResolver;
}

type index$A_INameWrapper__factory = INameWrapper__factory;
declare const index$A_INameWrapper__factory: typeof INameWrapper__factory;
type index$A_PublicResolver__factory = PublicResolver__factory;
declare const index$A_PublicResolver__factory: typeof PublicResolver__factory;
declare namespace index$A {
  export {
    index$A_INameWrapper__factory as INameWrapper__factory,
    index$A_PublicResolver__factory as PublicResolver__factory,
  };
}

declare class ABIResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "contentType";
            readonly type: "uint256";
        }];
        readonly name: "ABIChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "contentTypes";
            readonly type: "uint256";
        }];
        readonly name: "ABI";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "contentType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "setABI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): ABIResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ABIResolver;
}

declare class AddrResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "a";
            readonly type: "address";
        }];
        readonly name: "AddrChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "newAddress";
            readonly type: "bytes";
        }];
        readonly name: "AddressChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "addr";
        readonly outputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }];
        readonly name: "addr";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "a";
            readonly type: "bytes";
        }];
        readonly name: "setAddr";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "a";
            readonly type: "address";
        }];
        readonly name: "setAddr";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): AddrResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AddrResolver;
}

declare class ContentHashResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "hash";
            readonly type: "bytes";
        }];
        readonly name: "ContenthashChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "contenthash";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "hash";
            readonly type: "bytes";
        }];
        readonly name: "setContenthash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): ContentHashResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ContentHashResolver;
}

declare class DNSResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "name";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "record";
            readonly type: "bytes";
        }];
        readonly name: "DNSRecordChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "name";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }];
        readonly name: "DNSRecordDeleted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "DNSZoneCleared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "lastzonehash";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "zonehash";
            readonly type: "bytes";
        }];
        readonly name: "DNSZonehashChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "clearDNSZone";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "name";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }];
        readonly name: "dnsRecord";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "name";
            readonly type: "bytes32";
        }];
        readonly name: "hasDNSRecords";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "setDNSRecords";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "hash";
            readonly type: "bytes";
        }];
        readonly name: "setZonehash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "zonehash";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): DNSResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DNSResolver;
}

declare class IABIResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "contentType";
            readonly type: "uint256";
        }];
        readonly name: "ABIChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "contentTypes";
            readonly type: "uint256";
        }];
        readonly name: "ABI";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IABIResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IABIResolver;
}

declare class IAddrResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "a";
            readonly type: "address";
        }];
        readonly name: "AddrChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "addr";
        readonly outputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IAddrResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IAddrResolver;
}

declare class IAddressResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "newAddress";
            readonly type: "bytes";
        }];
        readonly name: "AddressChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }];
        readonly name: "addr";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IAddressResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IAddressResolver;
}

declare class IContentHashResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "hash";
            readonly type: "bytes";
        }];
        readonly name: "ContenthashChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "contenthash";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IContentHashResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IContentHashResolver;
}

declare class IDNSRecordResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "name";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "record";
            readonly type: "bytes";
        }];
        readonly name: "DNSRecordChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "name";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }];
        readonly name: "DNSRecordDeleted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "DNSZoneCleared";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "name";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }];
        readonly name: "dnsRecord";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IDNSRecordResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IDNSRecordResolver;
}

declare class IDNSZoneResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "lastzonehash";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "zonehash";
            readonly type: "bytes";
        }];
        readonly name: "DNSZonehashChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "zonehash";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IDNSZoneResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IDNSZoneResolver;
}

declare class IInterfaceResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "implementer";
            readonly type: "address";
        }];
        readonly name: "InterfaceChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "interfaceImplementer";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IInterfaceResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IInterfaceResolver;
}

declare class INameResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }];
        readonly name: "NameChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): INameResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): INameResolver;
}

declare class IPubkeyResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "x";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "y";
            readonly type: "bytes32";
        }];
        readonly name: "PubkeyChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "pubkey";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "x";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "y";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IPubkeyResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IPubkeyResolver;
}

declare class ITextResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "string";
            readonly name: "indexedKey";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }];
        readonly name: "TextChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }];
        readonly name: "text";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ITextResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ITextResolver;
}

declare class InterfaceResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "a";
            readonly type: "address";
        }];
        readonly name: "AddrChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "newAddress";
            readonly type: "bytes";
        }];
        readonly name: "AddressChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "implementer";
            readonly type: "address";
        }];
        readonly name: "InterfaceChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "addr";
        readonly outputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }];
        readonly name: "addr";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "interfaceImplementer";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "a";
            readonly type: "bytes";
        }];
        readonly name: "setAddr";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "a";
            readonly type: "address";
        }];
        readonly name: "setAddr";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }, {
            readonly internalType: "address";
            readonly name: "implementer";
            readonly type: "address";
        }];
        readonly name: "setInterface";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): InterfaceResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): InterfaceResolver;
}

declare class NameResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }];
        readonly name: "NameChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "newName";
            readonly type: "string";
        }];
        readonly name: "setName";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): NameResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): NameResolver;
}

declare class PubkeyResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "x";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "y";
            readonly type: "bytes32";
        }];
        readonly name: "PubkeyChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "pubkey";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "x";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "y";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "x";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "y";
            readonly type: "bytes32";
        }];
        readonly name: "setPubkey";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): PubkeyResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PubkeyResolver;
}

declare class TextResolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "string";
            readonly name: "indexedKey";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }];
        readonly name: "TextChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "value";
            readonly type: "string";
        }];
        readonly name: "setText";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }];
        readonly name: "text";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): TextResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TextResolver;
}

type index$z_ABIResolver__factory = ABIResolver__factory;
declare const index$z_ABIResolver__factory: typeof ABIResolver__factory;
type index$z_AddrResolver__factory = AddrResolver__factory;
declare const index$z_AddrResolver__factory: typeof AddrResolver__factory;
type index$z_ContentHashResolver__factory = ContentHashResolver__factory;
declare const index$z_ContentHashResolver__factory: typeof ContentHashResolver__factory;
type index$z_DNSResolver__factory = DNSResolver__factory;
declare const index$z_DNSResolver__factory: typeof DNSResolver__factory;
type index$z_IABIResolver__factory = IABIResolver__factory;
declare const index$z_IABIResolver__factory: typeof IABIResolver__factory;
type index$z_IAddrResolver__factory = IAddrResolver__factory;
declare const index$z_IAddrResolver__factory: typeof IAddrResolver__factory;
type index$z_IAddressResolver__factory = IAddressResolver__factory;
declare const index$z_IAddressResolver__factory: typeof IAddressResolver__factory;
type index$z_IContentHashResolver__factory = IContentHashResolver__factory;
declare const index$z_IContentHashResolver__factory: typeof IContentHashResolver__factory;
type index$z_IDNSRecordResolver__factory = IDNSRecordResolver__factory;
declare const index$z_IDNSRecordResolver__factory: typeof IDNSRecordResolver__factory;
type index$z_IDNSZoneResolver__factory = IDNSZoneResolver__factory;
declare const index$z_IDNSZoneResolver__factory: typeof IDNSZoneResolver__factory;
type index$z_IInterfaceResolver__factory = IInterfaceResolver__factory;
declare const index$z_IInterfaceResolver__factory: typeof IInterfaceResolver__factory;
type index$z_INameResolver__factory = INameResolver__factory;
declare const index$z_INameResolver__factory: typeof INameResolver__factory;
type index$z_IPubkeyResolver__factory = IPubkeyResolver__factory;
declare const index$z_IPubkeyResolver__factory: typeof IPubkeyResolver__factory;
type index$z_ITextResolver__factory = ITextResolver__factory;
declare const index$z_ITextResolver__factory: typeof ITextResolver__factory;
type index$z_InterfaceResolver__factory = InterfaceResolver__factory;
declare const index$z_InterfaceResolver__factory: typeof InterfaceResolver__factory;
type index$z_NameResolver__factory = NameResolver__factory;
declare const index$z_NameResolver__factory: typeof NameResolver__factory;
type index$z_PubkeyResolver__factory = PubkeyResolver__factory;
declare const index$z_PubkeyResolver__factory: typeof PubkeyResolver__factory;
type index$z_TextResolver__factory = TextResolver__factory;
declare const index$z_TextResolver__factory: typeof TextResolver__factory;
declare namespace index$z {
  export {
    index$z_ABIResolver__factory as ABIResolver__factory,
    index$z_AddrResolver__factory as AddrResolver__factory,
    index$z_ContentHashResolver__factory as ContentHashResolver__factory,
    index$z_DNSResolver__factory as DNSResolver__factory,
    index$z_IABIResolver__factory as IABIResolver__factory,
    index$z_IAddrResolver__factory as IAddrResolver__factory,
    index$z_IAddressResolver__factory as IAddressResolver__factory,
    index$z_IContentHashResolver__factory as IContentHashResolver__factory,
    index$z_IDNSRecordResolver__factory as IDNSRecordResolver__factory,
    index$z_IDNSZoneResolver__factory as IDNSZoneResolver__factory,
    index$z_IInterfaceResolver__factory as IInterfaceResolver__factory,
    index$z_INameResolver__factory as INameResolver__factory,
    index$z_IPubkeyResolver__factory as IPubkeyResolver__factory,
    index$z_ITextResolver__factory as ITextResolver__factory,
    index$z_InterfaceResolver__factory as InterfaceResolver__factory,
    index$z_NameResolver__factory as NameResolver__factory,
    index$z_PubkeyResolver__factory as PubkeyResolver__factory,
    index$z_TextResolver__factory as TextResolver__factory,
  };
}

declare class IMulticallable__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "data";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "results";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMulticallableInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMulticallable;
}

declare class ISupportsInterface__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): ISupportsInterfaceInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ISupportsInterface;
}

declare class Multicallable__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "data";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "results";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): MulticallableInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Multicallable;
}

declare class Resolver__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "contentType";
            readonly type: "uint256";
        }];
        readonly name: "ABIChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "a";
            readonly type: "address";
        }];
        readonly name: "AddrChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "newAddress";
            readonly type: "bytes";
        }];
        readonly name: "AddressChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "ContentChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "hash";
            readonly type: "bytes";
        }];
        readonly name: "ContenthashChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "name";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "record";
            readonly type: "bytes";
        }];
        readonly name: "DNSRecordChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "name";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }];
        readonly name: "DNSRecordDeleted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "DNSZoneCleared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "lastzonehash";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "zonehash";
            readonly type: "bytes";
        }];
        readonly name: "DNSZonehashChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "implementer";
            readonly type: "address";
        }];
        readonly name: "InterfaceChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }];
        readonly name: "NameChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "x";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "y";
            readonly type: "bytes32";
        }];
        readonly name: "PubkeyChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "string";
            readonly name: "indexedKey";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }];
        readonly name: "TextChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "contentTypes";
            readonly type: "uint256";
        }];
        readonly name: "ABI";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "addr";
        readonly outputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }];
        readonly name: "addr";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "content";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "contenthash";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "name";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "resource";
            readonly type: "uint16";
        }];
        readonly name: "dnsRecord";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "interfaceImplementer";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "data";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "results";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "multihash";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "pubkey";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "x";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "y";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "contentType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "setABI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "coinType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "a";
            readonly type: "bytes";
        }];
        readonly name: "setAddr";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "setAddr";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "setContent";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "hash";
            readonly type: "bytes";
        }];
        readonly name: "setContenthash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "setDnsrr";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }, {
            readonly internalType: "address";
            readonly name: "implementer";
            readonly type: "address";
        }];
        readonly name: "setInterface";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "hash";
            readonly type: "bytes";
        }];
        readonly name: "setMultihash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "_name";
            readonly type: "string";
        }];
        readonly name: "setName";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "x";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "y";
            readonly type: "bytes32";
        }];
        readonly name: "setPubkey";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "value";
            readonly type: "string";
        }];
        readonly name: "setText";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }];
        readonly name: "text";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }];
        readonly name: "zonehash";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ResolverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Resolver;
}

declare class ResolverBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): ResolverBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ResolverBase;
}

declare class SupportsInterface__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceID";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): SupportsInterfaceInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SupportsInterface;
}

type index$y_IMulticallable__factory = IMulticallable__factory;
declare const index$y_IMulticallable__factory: typeof IMulticallable__factory;
type index$y_ISupportsInterface__factory = ISupportsInterface__factory;
declare const index$y_ISupportsInterface__factory: typeof ISupportsInterface__factory;
type index$y_Multicallable__factory = Multicallable__factory;
declare const index$y_Multicallable__factory: typeof Multicallable__factory;
type index$y_Resolver__factory = Resolver__factory;
declare const index$y_Resolver__factory: typeof Resolver__factory;
type index$y_ResolverBase__factory = ResolverBase__factory;
declare const index$y_ResolverBase__factory: typeof ResolverBase__factory;
type index$y_SupportsInterface__factory = SupportsInterface__factory;
declare const index$y_SupportsInterface__factory: typeof SupportsInterface__factory;
declare namespace index$y {
  export {
    index$A as publicResolverSol,
    index$z as profiles,
    index$y_IMulticallable__factory as IMulticallable__factory,
    index$y_ISupportsInterface__factory as ISupportsInterface__factory,
    index$y_Multicallable__factory as Multicallable__factory,
    index$y_Resolver__factory as Resolver__factory,
    index$y_ResolverBase__factory as ResolverBase__factory,
    index$y_SupportsInterface__factory as SupportsInterface__factory,
  };
}

declare namespace index$x {
  export {
    index$B as registry,
    index$y as resolvers,
  };
}

declare namespace index$w {
  export {
    index$x as contracts,
  };
}

declare namespace index$v {
  export {
    index$w as ensContracts,
  };
}

type DAOConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DAO__factory extends ContractFactory {
    constructor(...args: DAOConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<DAO$2>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): DAO$2;
    connect(signer: Signer): DAO__factory;
    static readonly bytecode = "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051613daa6200011f60003960008181610c8a01528181610d20015281816110dc01528181611172015261126d0152613daa6000f3fe6080604052600436106101dc5760003560e01c806352d1902d11610102578063d68bad2c11610095578063e978afe511610064578063e978afe5146106d0578063eafb8b06146106f0578063ee57e36f14610710578063fdef9106146107305761021b565b8063d68bad2c1461063c578063d96054c41461065c578063da7422281461067c578063e306bee71461069c5761021b565b8063c4a50145116100d1578063c4a50145146105a5578063c71bf324146105c5578063c9dbc2a4146105f3578063ce1b815f146106135761021b565b806352d1902d146105275780637034731b1461053c578063829331a11461055e578063bfe07da6146105925761021b565b80632675fdd01161017a5780633e2ab0d9116101495780633e2ab0d9146104a057806342d8e99e146104c05780634ec7ac23146104e05780634f1ef286146105145761021b565b80632675fdd01461040a57806326875b1f1461042a5780632ae9c6001461045e5780633659cfe6146104805761021b565b80631080f99b116101b65780631080f99b1461035b5780631626ba7e1461037d57806322844d04146103b657806324b4d73f146103d65761021b565b806301ffc9a7146102b05780630729d054146102e557806309e56b14146103275761021b565b3661021b57604080513381523460208201527f62c2c8e34665db7c56b2cabd7f5fb9702ccd352ffa8150147e450797e9f8e8f3910160405180910390a1005b34801561022757600080fd5b506000366060600061027b6000356001600160e01b03191685858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061075092505050565b604080516001600160e01b03198316602082015291925001604051602081830303815290604052915050915050805190602001f35b3480156102bc57600080fd5b506102d06102cb36600461307f565b610827565b60405190151581526020015b60405180910390f35b3480156102f157600080fd5b506103197fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d81565b6040519081526020016102dc565b34801561033357600080fd5b506103197f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b34801561036757600080fd5b5061037b6103763660046130e3565b61087c565b005b34801561038957600080fd5b5061039d6103983660046131c8565b6108b5565b6040516001600160e01b031990911681526020016102dc565b3480156103c257600080fd5b5061037b6103d1366004613224565b610940565b3480156103e257600080fd5b506103197f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc81565b34801561041657600080fd5b506102d06104253660046132ac565b610a5c565b34801561043657600080fd5b506103197ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc81565b34801561046a57600080fd5b50610473610c56565b6040516102dc9190613318565b34801561048c57600080fd5b5061037b61049b36600461334c565b610c80565b3480156104ac57600080fd5b5061037b6104bb36600461334c565b610e1d565b3480156104cc57600080fd5b5061037b6104db366004613369565b610e4f565b3480156104ec57600080fd5b506103197f968c17ebf04aa1b7544168e69314cdab6b69ba813bb6080d49c0c40a65560f5881565b61037b6105223660046133c1565b6110d2565b34801561053357600080fd5b50610319611260565b34801561054857600080fd5b50610551611325565b6040516102dc919061344b565b34801561056a57600080fd5b506103197f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c81565b61037b6105a036600461345e565b6113b8565b3480156105b157600080fd5b5061037b6105c03660046134ba565b6114f2565b3480156105d157600080fd5b506105e56105e03660046134fd565b61159c565b6040516102dc9291906135d7565b3480156105ff57600080fd5b5061037b61060e3660046135f9565b6118c2565b34801561061f57600080fd5b5061012e546040516001600160a01b0390911681526020016102dc565b34801561064857600080fd5b5061037b61065736600461364c565b6118f8565b34801561066857600080fd5b5061037b61067736600461364c565b611933565b34801561068857600080fd5b5061037b61069736600461334c565b611968565b3480156106a857600080fd5b506103197f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b81565b3480156106dc57600080fd5b5061037b6106eb36600461368d565b61199b565b3480156106fc57600080fd5b5061037b61070b366004613702565b611ae7565b34801561071c57600080fd5b5061037b61072b3660046130e3565b611d40565b34801561073c57600080fd5b506102d061074b3660046132ac565b611d74565b6001600160e01b0319808316600090815260fb6020526040812054909160e09190911b9081166107c5576040517f4aa318c30000000000000000000000000000000000000000000000000000000081526001600160e01b03198086166004830152821660248201526044015b60405180910390fd5b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f4792cb6e46e49876374bea490ba23274bacea6b84c216a64f47abab54027589b338560405161081692919061379b565b60405180910390a290505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806108215750506001600160e01b03191660009081526033602052604090205460ff1690565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b6108a681611d8b565b6108b08383611e13565b505050565b600061090430337f968c17ebf04aa1b7544168e69314cdab6b69ba813bb6080d49c0c40a65560f5886866040516020016108f09291906137bd565b604051602081830303815290604052610a5c565b1561093057507f1626ba7e00000000000000000000000000000000000000000000000000000000610821565b506001600160e01b031992915050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361096a81611d8b565b60005b82811015610a55576000848483818110610989576109896137d6565b90506060020180360381019061099f91906137fb565b90506000815160028111156109b6576109b6613864565b036109d3576109ce8682602001518360400151611e5f565b610a4c565b6001815160028111156109e8576109e8613864565b03610a00576109ce868260200151836040015161202b565b600281516002811115610a1557610a15613864565b03610a4c576040517fd4d3bef700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060010161096d565b5050505050565b60008060c96000610ace888888604051692822a926a4a9a9a4a7a760b11b60208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b031690506001198101610afd576001915050610c4e565b6001600160a01b03811615610b2157610b19818787878761211f565b915050610c4e565b5060408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19602a8301819052606089901b16603e83015260528083018790528351808403909101815260729092018352815191810191909120600090815260c990915220546001600160a01b03166001198101610ba7576001915050610c4e565b6001600160a01b03811615610bc357610b19818787878761211f565b5060408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606088901b8116602a840152603e83015260528083018790528351808403909101815260729092018352815191810191909120600090815260c990915220546001600160a01b03168015610c4857610b19818787878761211f565b50600090505b949350505050565b610c5e613044565b5060408051606081018252600181526004602082015260009181019190915290565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d1e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016107bc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d797f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610df55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016107bc565b610dfe816121c9565b60408051600080825260208201909252610e1a918391906121f3565b50565b6040517fb2728e9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054600390610100900460ff16158015610e71575060005460ff8083169116105b610ee35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107bc565b6000805461ffff191660ff831617610100179055610f04602085018561388b565b60ff16600114610f4257836040517f84833d670000000000000000000000000000000000000000000000000000000081526004016107bc91906138a6565b6040805160608082018352600182526003602083018190526000838501528351808301909452610f8b939188919083908390808284376000920191909152509192915050612393565b15610fbf57600161013055610fbf7f2ae9c6000000000000000000000000000000000000000000000000000000000061242e565b6040805160608082018352600182526004602083015260008284015282518082019093526110089290879060039083908390808284376000920191909152509192915050612393565b1561108a5761103830307f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e77808837261202b565b6110617f549ea75a0000000000000000000000000000000000000000000000000000000061242e565b61108a7fc71bf3240000000000000000000000000000000000000000000000000000000061242e565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111705760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016107bc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111cb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146112475760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016107bc565b611250826121c9565b61125c828260016121f3565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113005760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107bc565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b606061012f8054611335906138d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611361906138d9565b80156113ae5780601f10611383576101008083540402835291602001916113ae565b820191906000526020600020905b81548152906001019060200180831161139157829003601f168201915b5050505050905090565b826000036113f2576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03841661144757823414611442576040517f1abd5610000000000000000000000000000000000000000000000000000000008152600481018490523460248201526044016107bc565b61149d565b3415611488576040517f1abd5610000000000000000000000000000000000000000000000000000000008152600060048201523460248201526044016107bc565b61149d6001600160a01b0385163330866124cb565b836001600160a01b0316336001600160a01b03167f2bc500cf071be2d1c1458ed6ff484cd4db4345ada8943dee7ff29e7af3558f768585856040516114e49392919061393e565b60405180910390a350505050565b7ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc61151c81611d8b565b6115258461242e565b6001600160e01b03198316600090815260fb60205260409020805463ffffffff191660e084901c179055604080516001600160e01b0319808716825280861660208301528416918101919091527ffc72fd547553f7a663e0048e590afc9c47b56a4242e960f31cf4c62e23d308b9906060016110c4565b60606000600261013054036115dd576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002610130557fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d61160d81611d8b565b610100851115611649576040517f11c763d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8467ffffffffffffffff81111561166257611662613125565b60405190808252806020026020018201604052801561169557816020015b60608152602001906001900390816116805790505b50925060008060005b87811015611862575a92506000808a8a848181106116be576116be6137d6565b90506020028101906116d09190613958565b6116de90602081019061334c565b6001600160a01b03168b8b858181106116f9576116f96137d6565b905060200281019061170b9190613958565b602001358c8c86818110611721576117216137d6565b90506020028101906117339190613958565b611741906040810190613978565b60405161174f9291906139bf565b60006040518083038185875af1925050503d806000811461178c576040519150601f19603f3d011682016040523d82523d6000602084013e611791565b606091505b50915091505a9350600160ff84161b89166117e557816117e0576040517fa6a7dbbd000000000000000000000000000000000000000000000000000000008152600481018490526024016107bc565b61183a565b8161183a576117f56040866139cf565b84101561182e576040517f1c26714c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160ff84161b871896505b8088848151811061184d5761184d6137d6565b6020908102919091010152505060010161169e565b50336001600160a01b03167fd4e57c2049f004fb297ef78591cd409503ceb6b2c722d7ffed032fc99e5f3b588a8a8a8a898b6040516118a6969594939291906139f1565b60405180910390a2505060016101305550909590945092505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336118ec81611d8b565b610a5585858585612553565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361192281611d8b565b61192d848484611e5f565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361195d81611d8b565b61192d84848461202b565b7f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c61199281611d8b565b61125c826128c9565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336119c581611d8b565b60005b8281101561192d5760008484838181106119e4576119e46137d6565b905060a002018036038101906119fa9190613b1d565b9050600081516002811115611a1157611a11613864565b03611a775760608101516001600160a01b031615611a5b576040517fd4d3bef700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a72816020015182604001518360800151611e5f565b611ade565b600181516002811115611a8c57611a8c613864565b03611aa857611a7281602001518260400151836080015161202b565b600281516002811115611abd57611abd613864565b03611ade57611ade8160200151826040015183608001518460600151612553565b506001016119c8565b60005460ff1615611b24576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054600390610100900460ff16158015611b46575060005460ff8083169116105b611bb85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107bc565b6000805461ffff191660ff831617610100179055600161013055611bfb7f9385547e0000000000000000000000000000000000000000000000000000000061242e565b611c247f549ea75a0000000000000000000000000000000000000000000000000000000061242e565b611c4d7fc71bf3240000000000000000000000000000000000000000000000000000000061242e565b611c767f1626ba7e0000000000000000000000000000000000000000000000000000000061242e565b611c9f7f7034731b0000000000000000000000000000000000000000000000000000000061242e565b611cc87f2ae9c6000000000000000000000000000000000000000000000000000000000061242e565b611cd061292b565b611cda8787612a38565b611ce3846128c9565b611ced8383611e13565b611cf685612a69565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050505050565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b611d6a81611d8b565b6108b08383612a38565b6000611d8285858585610a5c565b95945050505050565b611dce3033836000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a5c92505050565b610e1a576040517f1e09743f000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481018290526064016107bc565b61012f611e21828483613bfa565b507fe9b617ecb5f63f6a9ccd8d4d5fa0d7b2ef9b17ce3f48e6b135808d6a40e677428282604051611e53929190613cba565b60405180910390a15050565b7fffffffffffffffffffffffff00000000000000000000000000000000000000016001600160a01b03841601611ea8576040516324159e5b60e01b815260040160405180910390fd5b7fffffffffffffffffffffffff00000000000000000000000000000000000000016001600160a01b03831601611f28577f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33811480611f0a5750611f0a81612aef565b15611f28576040516324159e5b60e01b815260040160405180910390fd5b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e83015260528083018590528351808403909101815260729092019092528051910120600090600081815260c960205260409020549091506001600160a01b031680610a5557600082815260c96020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916600290811790915582516001600160a01b0389811682529281019190915290861691339186917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a45050505050565b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e83015260528083018590528351808403909101815260729092019092528051910120600090600081815260c960205260409020549091506001600160a01b03161561192d57600081815260c96020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526000906001600160a01b03871690632675fdd09061216d908890889088908890600401613cce565b602060405180830381865afa9250505080156121a6575060408051601f3d908101601f191682019092526121a391810190613d00565b60015b156121bd5780156121bb576001915050611d82565b505b50600095945050505050565b7f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc61125c81611d8b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612226576108b083612bbe565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612280575060408051601f3d908101601f1916820190925261227d91810190613d22565b60015b6122f25760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016107bc565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146123875760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016107bc565b506108b0838383612c89565b8051825160009160ff908116911610156123af57506001610821565b8151835160ff918216911611156123c857506000610821565b6020808301519084015160ff918216911610156123e757506001610821565b6020808301519084015160ff9182169116111561240657506000610821565b6040808301519084015160ff9182169116101561242557506001610821565b50600092915050565b6001600160e01b031980821690036124885760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e746572666163652069640000000060448201526064016107bc565b6001600160e01b031916600090815260336020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261192d908590612cae565b806001600160a01b0381163b6125a0576040517f48359af60000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016107bc565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f2675fdd00000000000000000000000000000000000000000000000000000000060048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa15801561261d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126419190613d00565b612682576040517fdbb048620000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016107bc565b6001600160a01b038581161480156126a257506001600160a01b03848116145b156126d9576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0385811614806126f857506001600160a01b03848116145b1561274d577f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3383148061272f575061272f83612aef565b1561274d576040516324159e5b60e01b815260040160405180910390fd5b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606088811b8216602a85015289901b16603e83015260528083018790528351808403909101815260729092019092528051910120600090600081815260c960205260409020549091506001600160a01b03168061284b57600082815260c96020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925583518b8316815292830152881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a46128c0565b826001600160a01b0316816001600160a01b0316146128c0576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280831660648301528416608482015260a4016107bc565b50505050505050565b61012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea29060200160405180910390a150565b6129547f150b7a020000000000000000000000000000000000000000000000000000000061242e565b61297d7f4e2312e00000000000000000000000000000000000000000000000000000000061242e565b60fb6020527f5a08f87af82de422c581ce019b2e54a9c17372e9cba575ae0470ba2482d63686805463ffffffff1990811663150b7a02179091557fe1cfe341950d56d8854f782066100d5ae1d5930cdb4949b973e554a343efc6c38054821663f23a6e611790557fbc197c81000000000000000000000000000000000000000000000000000000006000527f08ba3617671847c1c169da222a5bc01cfdefcc3c4f1e5525214a474479c89123805490911663bc197c81179055565b7fbb39ebb37e60fb5d606ffdb749d2336e56b88e6c88c4bd6513b308f643186eed8282604051611e53929190613cba565b600054610100900460ff16612ae65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107bc565b610e1a81612d96565b60007fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d821480612b3e57507f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc82145b80612b6857507f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b82145b80612b9257507f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c82145b806108215750507ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc1490565b6001600160a01b0381163b612c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016107bc565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b612c9283612dc1565b600082511180612c9f5750805b156108b05761192d8383612e01565b6000612d03826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e2d9092919063ffffffff16565b9050805160001480612d24575080806020019051810190612d249190613d00565b6108b05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107bc565b610e1a30827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33611e5f565b612dca81612bbe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060612e268383604051806060016040528060278152602001613d4e60279139612e3c565b9392505050565b6060610c4e8484600085612eb4565b6060600080856001600160a01b031685604051612e599190613d3b565b600060405180830381855af49150503d8060008114612e94576040519150601f19603f3d011682016040523d82523d6000602084013e612e99565b606091505b5091509150612eaa86838387612fa6565b9695505050505050565b606082471015612f2c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107bc565b600080866001600160a01b03168587604051612f489190613d3b565b60006040518083038185875af1925050503d8060008114612f85576040519150601f19603f3d011682016040523d82523d6000602084013e612f8a565b606091505b5091509150612f9b87838387612fa6565b979650505050505050565b6060831561301557825160000361300e576001600160a01b0385163b61300e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107bc565b5081610c4e565b610c4e838381511561302a5781518083602001fd5b8060405162461bcd60e51b81526004016107bc919061344b565b60405180606001604052806003906020820280368337509192915050565b80356001600160e01b03198116811461307a57600080fd5b919050565b60006020828403121561309157600080fd5b612e2682613062565b60008083601f8401126130ac57600080fd5b50813567ffffffffffffffff8111156130c457600080fd5b6020830191508360208285010111156130dc57600080fd5b9250929050565b600080602083850312156130f657600080fd5b823567ffffffffffffffff81111561310d57600080fd5b6131198582860161309a565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261314c57600080fd5b813567ffffffffffffffff8082111561316757613167613125565b604051601f8301601f19908116603f0116810190828211818310171561318f5761318f613125565b816040528381528660208588010111156131a857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156131db57600080fd5b82359150602083013567ffffffffffffffff8111156131f957600080fd5b6132058582860161313b565b9150509250929050565b6001600160a01b0381168114610e1a57600080fd5b60008060006040848603121561323957600080fd5b83356132448161320f565b9250602084013567ffffffffffffffff8082111561326157600080fd5b818601915086601f83011261327557600080fd5b81358181111561328457600080fd5b87602060608302850101111561329957600080fd5b6020830194508093505050509250925092565b600080600080608085870312156132c257600080fd5b84356132cd8161320f565b935060208501356132dd8161320f565b925060408501359150606085013567ffffffffffffffff81111561330057600080fd5b61330c8782880161313b565b91505092959194509250565b60608101818360005b600381101561334357815160ff16835260209283019290910190600101613321565b50505092915050565b60006020828403121561335e57600080fd5b8135612e268161320f565b60008060006080848603121561337e57600080fd5b606084018581111561338f57600080fd5b8493503567ffffffffffffffff8111156133a857600080fd5b6133b48682870161309a565b9497909650939450505050565b600080604083850312156133d457600080fd5b82356133df8161320f565b9150602083013567ffffffffffffffff8111156131f957600080fd5b60005b838110156134165781810151838201526020016133fe565b50506000910152565b600081518084526134378160208601602086016133fb565b601f01601f19169290920160200192915050565b602081526000612e26602083018461341f565b6000806000806060858703121561347457600080fd5b843561347f8161320f565b935060208501359250604085013567ffffffffffffffff8111156134a257600080fd5b6134ae8782880161309a565b95989497509550505050565b6000806000606084860312156134cf57600080fd5b6134d884613062565b92506134e660208501613062565b91506134f460408501613062565b90509250925092565b6000806000806060858703121561351357600080fd5b84359350602085013567ffffffffffffffff8082111561353257600080fd5b818701915087601f83011261354657600080fd5b81358181111561355557600080fd5b8860208260051b850101111561356a57600080fd5b95986020929092019750949560400135945092505050565b600081518084526020808501808196508360051b8101915082860160005b858110156135ca5782840389526135b884835161341f565b988501989350908401906001016135a0565b5091979650505050505050565b6040815260006135ea6040830185613582565b90508260208301529392505050565b6000806000806080858703121561360f57600080fd5b843561361a8161320f565b9350602085013561362a8161320f565b92506040850135915060608501356136418161320f565b939692955090935050565b60008060006060848603121561366157600080fd5b833561366c8161320f565b9250602084013561367c8161320f565b929592945050506040919091013590565b600080602083850312156136a057600080fd5b823567ffffffffffffffff808211156136b857600080fd5b818501915085601f8301126136cc57600080fd5b8135818111156136db57600080fd5b86602060a0830285010111156136f057600080fd5b60209290920196919550909350505050565b6000806000806000806080878903121561371b57600080fd5b863567ffffffffffffffff8082111561373357600080fd5b61373f8a838b0161309a565b9098509650602089013591506137548261320f565b9094506040880135906137668261320f565b9093506060880135908082111561377c57600080fd5b5061378989828a0161309a565b979a9699509497509295939492505050565b6001600160a01b0383168152604060208201526000610c4e604083018461341f565b828152604060208201526000610c4e604083018461341f565b634e487b7160e01b600052603260045260246000fd5b80356003811061307a57600080fd5b60006060828403121561380d57600080fd5b6040516060810181811067ffffffffffffffff8211171561383057613830613125565b60405261383c836137ec565b8152602083013561384c8161320f565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b803560ff8116811461307a57600080fd5b60006020828403121561389d57600080fd5b612e268261387a565b60608101818360005b60038110156133435760ff6138c38361387a565b16835260209283019291909101906001016138af565b600181811c908216806138ed57607f821691505b60208210810361390d57634e487b7160e01b600052602260045260246000fd5b50919050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b838152604060208201526000611d82604083018486613913565b60008235605e1983360301811261396e57600080fd5b9190910192915050565b6000808335601e1984360301811261398f57600080fd5b83018035915067ffffffffffffffff8211156139aa57600080fd5b6020019150368190038213156130dc57600080fd5b8183823760009101908152919050565b6000826139ec57634e487b7160e01b600052601260045260246000fd5b500490565b600060a08201888352602060a0818501528188835260c08501905060c08960051b86010192508960005b8a811015613aee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408786030183528135605e198d3603018112613a5e57600080fd5b8c0160608135613a6d8161320f565b6001600160a01b03168752818601358688015260408083013536849003601e19018112613a9957600080fd5b90920186810192903567ffffffffffffffff811115613ab757600080fd5b803603841315613ac657600080fd5b82828a0152613ad8838a018286613913565b9850505093850193505090830190600101613a1b565b505050508560408401528460608401528281036080840152613b108185613582565b9998505050505050505050565b600060a08284031215613b2f57600080fd5b60405160a0810181811067ffffffffffffffff82111715613b5257613b52613125565b604052613b5e836137ec565b81526020830135613b6e8161320f565b60208201526040830135613b818161320f565b60408201526060830135613b948161320f565b60608201526080928301359281019290925250919050565b601f8211156108b057600081815260208120601f850160051c81016020861015613bd35750805b601f850160051c820191505b81811015613bf257828155600101613bdf565b505050505050565b67ffffffffffffffff831115613c1257613c12613125565b613c2683613c2083546138d9565b83613bac565b6000601f841160018114613c5a5760008515613c425750838201355b600019600387901b1c1916600186901b178355610a55565b600083815260209020601f19861690835b82811015613c8b5786850135825560209485019460019092019101613c6b565b5086821015613ca85760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b602081526000610c4e602083018486613913565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612eaa608083018461341f565b600060208284031215613d1257600080fd5b81518015158114612e2657600080fd5b600060208284031215613d3457600080fd5b5051919050565b6000825161396e8184602087016133fb56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220be00bc19f55d2accf4e3537127e0329186cb395bc1a6a7274c12c3580cfe305b64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "index";
            readonly type: "uint256";
        }];
        readonly name: "ActionFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AnyAddressDisallowedForWhoAndWhere";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IPermissionCondition";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "ConditionInterfaceNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IPermissionCondition";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "ConditionNotAContract";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FunctionRemoved";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GrantWithConditionNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientGas";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expected";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "NativeTokenDepositAmountMismatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "currentCondition";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "newCondition";
            readonly type: "address";
        }];
        readonly name: "PermissionAlreadyGrantedForDifferentCondition";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PermissionsForAnyAddressDisallowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "protocolVersion";
            readonly type: "uint8[3]";
        }];
        readonly name: "ProtocolVersionUpgradeNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ReentrantCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TooManyActions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "Unauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "callbackSelector";
            readonly type: "bytes4";
        }, {
            readonly internalType: "bytes4";
            readonly name: "magicNumber";
            readonly type: "bytes4";
        }];
        readonly name: "UnknownCallback";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ZeroAmount";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes4";
            readonly name: "sig";
            readonly type: "bytes4";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "CallbackReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "_reference";
            readonly type: "string";
        }];
        readonly name: "Deposited";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "actor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "callId";
            readonly type: "bytes32";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct Action[]";
            readonly name: "actions";
            readonly type: "tuple[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "allowFailureMap";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "failureMap";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes[]";
            readonly name: "execResults";
            readonly type: "bytes[]";
        }];
        readonly name: "Executed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "here";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "Granted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "metadata";
            readonly type: "bytes";
        }];
        readonly name: "MetadataSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeTokenDeposited";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "daoURI";
            readonly type: "string";
        }];
        readonly name: "NewURI";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "here";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }];
        readonly name: "Revoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes4";
            readonly name: "callbackSelector";
            readonly type: "bytes4";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes4";
            readonly name: "magicNumber";
            readonly type: "bytes4";
        }];
        readonly name: "StandardCallbackRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "forwarder";
            readonly type: "address";
        }];
        readonly name: "TrustedForwarderSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "EXECUTE_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "ROOT_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SET_METADATA_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SET_TRUSTED_FORWARDER_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_DAO_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "VALIDATE_SIGNATURE_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "_items";
            readonly type: "tuple[]";
        }];
        readonly name: "applyMultiTargetPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.SingleTargetPermission[]";
            readonly name: "items";
            readonly type: "tuple[]";
        }];
        readonly name: "applySingleTargetPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "daoURI";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "_reference";
            readonly type: "string";
        }];
        readonly name: "deposit";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_callId";
            readonly type: "bytes32";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Action[]";
            readonly name: "_actions";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "_allowFailureMap";
            readonly type: "uint256";
        }];
        readonly name: "execute";
        readonly outputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "execResults";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "failureMap";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTrustedForwarder";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "grant";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "contract IPermissionCondition";
            readonly name: "_condition";
            readonly type: "address";
        }];
        readonly name: "grantWithCondition";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "hasPermission";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_metadata";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_initialOwner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_trustedForwarder";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "daoURI_";
            readonly type: "string";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "_previousProtocolVersion";
            readonly type: "uint8[3]";
        }, {
            readonly internalType: "bytes";
            readonly name: "_initData";
            readonly type: "bytes";
        }];
        readonly name: "initializeFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "isGranted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_signature";
            readonly type: "bytes";
        }];
        readonly name: "isValidSignature";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }, {
            readonly internalType: "bytes4";
            readonly name: "_callbackSelector";
            readonly type: "bytes4";
        }, {
            readonly internalType: "bytes4";
            readonly name: "_magicNumber";
            readonly type: "bytes4";
        }];
        readonly name: "registerStandardCallback";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "revoke";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "newDaoURI";
            readonly type: "string";
        }];
        readonly name: "setDaoURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_metadata";
            readonly type: "bytes";
        }];
        readonly name: "setMetadata";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "setSignatureValidator";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_newTrustedForwarder";
            readonly type: "address";
        }];
        readonly name: "setTrustedForwarder";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): DAOInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DAO$2;
}

declare class IEIP4824__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "daoURI";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "_daoURI";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IEIP4824Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): IEIP4824;
}

type index$u_DAO__factory = DAO__factory;
declare const index$u_DAO__factory: typeof DAO__factory;
type index$u_IEIP4824__factory = IEIP4824__factory;
declare const index$u_IEIP4824__factory: typeof IEIP4824__factory;
declare namespace index$u {
  export {
    index$u_DAO__factory as DAO__factory,
    index$u_IEIP4824__factory as IEIP4824__factory,
  };
}

declare class PermissionManager__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AnyAddressDisallowedForWhoAndWhere";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IPermissionCondition";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "ConditionInterfaceNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IPermissionCondition";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "ConditionNotAContract";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GrantWithConditionNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "currentCondition";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "newCondition";
            readonly type: "address";
        }];
        readonly name: "PermissionAlreadyGrantedForDifferentCondition";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PermissionsForAnyAddressDisallowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "Unauthorized";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "here";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "Granted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "here";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }];
        readonly name: "Revoked";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "ROOT_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "_items";
            readonly type: "tuple[]";
        }];
        readonly name: "applyMultiTargetPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.SingleTargetPermission[]";
            readonly name: "items";
            readonly type: "tuple[]";
        }];
        readonly name: "applySingleTargetPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "grant";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "contract IPermissionCondition";
            readonly name: "_condition";
            readonly type: "address";
        }];
        readonly name: "grantWithCondition";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "isGranted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "revoke";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): PermissionManagerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PermissionManager;
}

type index$t_PermissionManager__factory = PermissionManager__factory;
declare const index$t_PermissionManager__factory: typeof PermissionManager__factory;
declare namespace index$t {
  export {
    index$t_PermissionManager__factory as PermissionManager__factory,
  };
}

declare class CallbackHandler__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "callbackSelector";
            readonly type: "bytes4";
        }, {
            readonly internalType: "bytes4";
            readonly name: "magicNumber";
            readonly type: "bytes4";
        }];
        readonly name: "UnknownCallback";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes4";
            readonly name: "sig";
            readonly type: "bytes4";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "CallbackReceived";
        readonly type: "event";
    }];
    static createInterface(): CallbackHandlerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): CallbackHandler;
}

type index$s_CallbackHandler__factory = CallbackHandler__factory;
declare const index$s_CallbackHandler__factory: typeof CallbackHandler__factory;
declare namespace index$s {
  export {
    index$s_CallbackHandler__factory as CallbackHandler__factory,
  };
}

declare namespace index$r {
  export {
    index$u as dao,
    index$t as permission,
    index$s as utils,
  };
}

type DAOFactoryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DAOFactory__factory extends ContractFactory {
    constructor(...args: DAOFactoryConstructorParams);
    deploy(_registry: PromiseOrValue<string>, _pluginSetupProcessor: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<DAOFactory$1>;
    getDeployTransaction(_registry: PromiseOrValue<string>, _pluginSetupProcessor: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): DAOFactory$1;
    connect(signer: Signer): DAOFactory__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract DAORegistry";
            readonly name: "_registry";
            readonly type: "address";
        }, {
            readonly internalType: "contract PluginSetupProcessor";
            readonly name: "_pluginSetupProcessor";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "NoPluginProvided";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "trustedForwarder";
                readonly type: "address";
            }, {
                readonly internalType: "string";
                readonly name: "daoURI";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "subdomain";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "metadata";
                readonly type: "bytes";
            }];
            readonly internalType: "struct DAOFactory.DAOSettings";
            readonly name: "_daoSettings";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint8";
                        readonly name: "release";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "uint16";
                        readonly name: "build";
                        readonly type: "uint16";
                    }];
                    readonly internalType: "struct PluginRepo.Tag";
                    readonly name: "versionTag";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "contract PluginRepo";
                    readonly name: "pluginSetupRepo";
                    readonly type: "address";
                }];
                readonly internalType: "struct PluginSetupRef";
                readonly name: "pluginSetupRef";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct DAOFactory.PluginSettings[]";
            readonly name: "_pluginSettings";
            readonly type: "tuple[]";
        }];
        readonly name: "createDao";
        readonly outputs: readonly [{
            readonly internalType: "contract DAO";
            readonly name: "createdDao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address[]";
                    readonly name: "helpers";
                    readonly type: "address[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "enum PermissionLib.Operation";
                        readonly name: "operation";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "address";
                        readonly name: "where";
                        readonly type: "address";
                    }, {
                        readonly internalType: "address";
                        readonly name: "who";
                        readonly type: "address";
                    }, {
                        readonly internalType: "address";
                        readonly name: "condition";
                        readonly type: "address";
                    }, {
                        readonly internalType: "bytes32";
                        readonly name: "permissionId";
                        readonly type: "bytes32";
                    }];
                    readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                    readonly name: "permissions";
                    readonly type: "tuple[]";
                }];
                readonly internalType: "struct IPluginSetup.PreparedSetupData";
                readonly name: "preparedSetupData";
                readonly type: "tuple";
            }];
            readonly internalType: "struct DAOFactory.InstalledPlugin[]";
            readonly name: "installedPlugins";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "daoBase";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "daoRegistry";
        readonly outputs: readonly [{
            readonly internalType: "contract DAORegistry";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pluginSetupProcessor";
        readonly outputs: readonly [{
            readonly internalType: "contract PluginSetupProcessor";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): DAOFactoryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DAOFactory$1;
}

type DAORegistryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DAORegistry__factory extends ContractFactory {
    constructor(...args: DAORegistryConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<DAORegistry$1>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): DAORegistry$1;
    connect(signer: Signer): DAORegistry__factory;
    static readonly bytecode = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e1565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100df576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516117bf61011860003960008181610307015281816103a201528181610615015281816106ab01526107a601526117bf6000f3fe6080604052600436106100c65760003560e01c80634f1ef28611610074578063a2298b4b1161004e578063a2298b4b1461023f578063ede4973914610273578063f29ee1251461029357600080fd5b80634f1ef286146101d557806352d1902d146101e857806374574eb71461020b57600080fd5b80634162169f116100a55780634162169f1461014c57806344162ef81461016a578063485cc955146101b557600080fd5b8062077393146100cb5780632ae9c600146101085780633659cfe61461012a575b600080fd5b3480156100d757600080fd5b5060fb546100eb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011457600080fd5b5061011d6102d3565b6040516100ff91906113cb565b34801561013657600080fd5b5061014a610145366004611414565b6102fd565b005b34801561015857600080fd5b506097546001600160a01b03166100eb565b34801561017657600080fd5b5060c9546101849060e01b81565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100ff565b3480156101c157600080fd5b5061014a6101d0366004611431565b61049f565b61014a6101e3366004611480565b61060b565b3480156101f457600080fd5b506101fd610799565b6040519081526020016100ff565b34801561021757600080fd5b506101fd7f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293281565b34801561024b57600080fd5b506101fd7fde5e253d6956bc5fb69cfa564733633f4e53b143e42859306cd13cdc5485621581565b34801561027f57600080fd5b5061014a61028e366004611544565b61085e565b34801561029f57600080fd5b506102c36102ae366004611414565b60ca6020526000908152604090205460ff1681565b60405190151581526020016100ff565b6102db6113ad565b5060408051606081018252600181526004602082015260009181019190915290565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103a05760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103fb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104775760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610397565b61048081610a21565b6040805160008082526020820190925261049c91839190610a5a565b50565b600054610100900460ff16158080156104bf5750600054600160ff909116105b806104d95750303b1580156104d9575060005460ff166001145b61054b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610397565b6000805460ff19166001179055801561056e576000805461ff0019166101001790555b610598837f549ea75a00000000000000000000000000000000000000000000000000000000610bfa565b60fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790558015610606576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106a95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610397565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107047f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107805760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610397565b61078982610a21565b61079582826001610a5a565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108395760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610397565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6097547fde5e253d6956bc5fb69cfa564733633f4e53b143e42859306cd13cdc548562159061089c906001600160a01b031630335b84600036610cb5565b846108a681610da3565b82156109cc5760fb546001600160a01b03166108ee576040517ff72f946a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108f88484610e80565b6109325783836040517f3a5bf49b000000000000000000000000000000000000000000000000000000008152600401610397929190611601565b60008484604051610944929190611615565b60405190819003812060fb547f89bb4145000000000000000000000000000000000000000000000000000000008352600483018290526001600160a01b03858116602485015291935016906389bb414590604401600060405180830381600087803b1580156109b257600080fd5b505af11580156109c6573d6000803e3d6000fd5b50505050505b846001600160a01b0316816001600160a01b03167fbc0b11fe649bb4d67c7fb40936163e5423f45c3ae83fbd8f8f8c75e1a3fa97af8686604051610a11929190611601565b60405180910390a3505050505050565b6097547f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293290610795906001600160a01b03163033610893565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610a8d5761060683610f2d565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610ae7575060408051601f3d908101601f19168201909252610ae491810190611625565b60015b610b595760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610397565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610bee5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610397565b50610606838383610ff8565b600054610100900460ff16610c775760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610397565b610c8082611023565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e09290921c91909117905550565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d02908890889088908890889060040161163e565b602060405180830381865afa158015610d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d439190611671565b610d9b576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610397565b505050505050565b6001600160a01b038116600090815260ca602052604090205460ff1615610e01576040517ffdcce17f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610397565b60c954610e1b906001600160a01b0383169060e01b6110cf565b610e5c576040517f71023c8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610397565b6001600160a01b0316600090815260ca60205260409020805460ff19166001179055565b6000828280835b81811015610f1e576000848483818110610ea357610ea3611693565b919091013560f81c915050606081118015610ec15750607b8160ff16105b15610ecc5750610f0c565b602f8160ff16118015610ee25750603a8160ff16105b15610eed5750610f0c565b8060ff16602d03610efe5750610f0c565b600095505050505050610f27565b80610f16816116a9565b915050610e87565b50600193505050505b92915050565b6001600160a01b0381163b610faa5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610397565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611001836110f2565b60008251118061100e5750805b156106065761101d8383611132565b50505050565b600054610100900460ff166110a05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610397565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006110da83611157565b80156110eb57506110eb83836111bb565b9392505050565b6110fb81610f2d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606110eb83836040518060600160405280602781526020016117636027913961128a565b6000611183827f01ffc9a7000000000000000000000000000000000000000000000000000000006111bb565b8015610f2757506111b4827fffffffff000000000000000000000000000000000000000000000000000000006111bb565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d91506000519050828015611273575060208210155b801561127f5750600081115b979650505050505050565b6060600080856001600160a01b0316856040516112a79190611713565b600060405180830381855af49150503d80600081146112e2576040519150601f19603f3d011682016040523d82523d6000602084013e6112e7565b606091505b50915091506112f886838387611302565b9695505050505050565b6060831561137157825160000361136a576001600160a01b0385163b61136a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610397565b508161137b565b61137b8383611383565b949350505050565b8151156113935781518083602001fd5b8060405162461bcd60e51b8152600401610397919061172f565b60405180606001604052806003906020820280368337509192915050565b60608101818360005b60038110156113f657815160ff168352602092830192909101906001016113d4565b50505092915050565b6001600160a01b038116811461049c57600080fd5b60006020828403121561142657600080fd5b81356110eb816113ff565b6000806040838503121561144457600080fd5b823561144f816113ff565b9150602083013561145f816113ff565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561149357600080fd5b823561149e816113ff565b9150602083013567ffffffffffffffff808211156114bb57600080fd5b818501915085601f8301126114cf57600080fd5b8135818111156114e1576114e161146a565b604051601f8201601f19908116603f011681019083821181831017156115095761150961146a565b8160405282815288602084870101111561152257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806060858703121561155a57600080fd5b8435611565816113ff565b93506020850135611575816113ff565b9250604085013567ffffffffffffffff8082111561159257600080fd5b818701915087601f8301126115a657600080fd5b8135818111156115b557600080fd5b8860208285010111156115c757600080fd5b95989497505060200194505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60208152600061137b6020830184866115d6565b8183823760009101908152919050565b60006020828403121561163757600080fd5b5051919050565b60006001600160a01b0380881683528087166020840152508460408301526080606083015261127f6080830184866115d6565b60006020828403121561168357600080fd5b815180151581146110eb57600080fd5b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116e857634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b8381101561170a5781810151838201526020016116f2565b50506000910152565b600082516117258184602087016116ef565b9190910192915050565b602081526000825180602084015261174e8160408501602087016116ef565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201669d41d45ce8f81909484acaa82039ef76d4cea3c15a129e9f87f24c3a7747864736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractAlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractERC165SupportInvalid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractInterfaceInvalid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "DaoUnauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ENSNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "subdomain";
            readonly type: "string";
        }];
        readonly name: "InvalidDaoSubdomain";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "creator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "subdomain";
            readonly type: "string";
        }];
        readonly name: "DAORegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "REGISTER_DAO_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_REGISTRY_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dao";
        readonly outputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "entries";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "_managingDao";
            readonly type: "address";
        }, {
            readonly internalType: "contract ENSSubdomainRegistrar";
            readonly name: "_subdomainRegistrar";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "creator";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "subdomain";
            readonly type: "string";
        }];
        readonly name: "register";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "subdomainRegistrar";
        readonly outputs: readonly [{
            readonly internalType: "contract ENSSubdomainRegistrar";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetInterfaceId";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): DAORegistryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DAORegistry$1;
}

type index$q_DAOFactory__factory = DAOFactory__factory;
declare const index$q_DAOFactory__factory: typeof DAOFactory__factory;
type index$q_DAORegistry__factory = DAORegistry__factory;
declare const index$q_DAORegistry__factory: typeof DAORegistry__factory;
declare namespace index$q {
  export {
    index$q_DAOFactory__factory as DAOFactory__factory,
    index$q_DAORegistry__factory as DAORegistry__factory,
  };
}

type PlaceholderSetupConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PlaceholderSetup__factory extends ContractFactory {
    constructor(...args: PlaceholderSetupConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PlaceholderSetup>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PlaceholderSetup;
    connect(signer: Signer): PlaceholderSetup__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b5060006080526080516107b8610030600039600060ce01526107b86000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80639cb0a124116100505780639cb0a124146100f8578063a8a9c29e14610118578063f10832f11461013957600080fd5b806301ffc9a7146100775780632ae9c6001461009f5780635c60da1b146100b4575b600080fd5b61008a61008536600461035d565b61015a565b60405190151581526020015b60405180910390f35b6100a761023f565b60405161009691906103a6565b60405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610096565b61010b61010636600461041b565b610269565b60405161009691906104f5565b61012b61012636600461053e565b61029d565b604051610096929190610645565b61014c6101473660046106c8565b6102ee565b60405161009692919061074b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806101ed57507fffffffff0000000000000000000000000000000000000000000000000000000082167f2ae9c60000000000000000000000000000000000000000000000000000000000145b8061023957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b61024761033f565b5060408051606081018252600181526004602082015260009181019190915290565b60606040517fa8a9f28c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606102bc604051806040016040528060608152602001606081525090565b6040517fa112810100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061030d604051806040016040528060608152602001606081525090565b6040517fa8a9f28c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180606001604052806003906020820280368337509192915050565b60006020828403121561036f57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461039f57600080fd5b9392505050565b60608101818360005b60038110156103d157815160ff168352602092830192909101906001016103af565b50505092915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146103fe57600080fd5b919050565b60006060828403121561041557600080fd5b50919050565b6000806040838503121561042e57600080fd5b610437836103da565b9150602083013567ffffffffffffffff81111561045357600080fd5b61045f85828601610403565b9150509250929050565b60008151600381106104a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b83525060208181015173ffffffffffffffffffffffffffffffffffffffff90811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101561053257610524838551610469565b938501939250600101610511565b50909695505050505050565b60008060006060848603121561055357600080fd5b61055c846103da565b9250602084013561ffff8116811461057357600080fd5b9150604084013567ffffffffffffffff81111561058f57600080fd5b61059b86828701610403565b9150509250925092565b805160408084528151908401819052600091602091908201906060860190845b818110156105f757835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016105c5565b50508483015186820387850152805180835290840192506000918401905b8083101561063a57610628828551610469565b91508484019350600183019250610615565b509695505050505050565b604081526000835180604084015260005b818110156106735760208187018101516060868401015201610656565b506000606082850101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8201168301905060608382030160208401526106bf60608201856105a5565b95945050505050565b6000806000604084860312156106dd57600080fd5b6106e6846103da565b9250602084013567ffffffffffffffff8082111561070357600080fd5b818601915086601f83011261071757600080fd5b81358181111561072657600080fd5b87602082850101111561073857600080fd5b6020830194508093505050509250925092565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061077a60408301846105a5565b94935050505056fea2646970667358221220ca28fb29343de1e72c2aab4d7058391c161f4e257ac8466f040caffd7418506964736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "NonUpgradeablePlugin";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PlaceholderSetupCannotBeUsed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "prepareInstallation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly name: "prepareUninstallation";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "_fromBuild";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PlaceholderSetupInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PlaceholderSetup;
}

type index$p_PlaceholderSetup__factory = PlaceholderSetup__factory;
declare const index$p_PlaceholderSetup__factory: typeof PlaceholderSetup__factory;
declare namespace index$p {
  export {
    index$p_PlaceholderSetup__factory as PlaceholderSetup__factory,
  };
}

declare class IPluginRepo__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "release";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "releaseMetadata";
            readonly type: "bytes";
        }];
        readonly name: "ReleaseMetadataUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "release";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "build";
            readonly type: "uint16";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "pluginSetup";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "buildMetadata";
            readonly type: "bytes";
        }];
        readonly name: "VersionCreated";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_release";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "_pluginSetupAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_buildMetadata";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_releaseMetadata";
            readonly type: "bytes";
        }];
        readonly name: "createVersion";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_release";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_releaseMetadata";
            readonly type: "bytes";
        }];
        readonly name: "updateReleaseMetadata";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IPluginRepoInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IPluginRepo;
}

type PluginRepoConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginRepo__factory extends ContractFactory {
    constructor(...args: PluginRepoConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginRepo$3>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginRepo$3;
    connect(signer: Signer): PluginRepo__factory;
    static readonly bytecode = "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516131686200011f60003960008181610a4401528181610adf01528181610cb101528181610d470152610e8c01526131686000f3fe60806040526004361061018b5760003560e01c80639aaf9f08116100d6578063d68bad2c1161007f578063e0589bd311610059578063e0589bd3146104a8578063e978afe5146104c8578063fc054427146104e857600080fd5b8063d68bad2c14610434578063d96054c414610454578063df1d6c441461047457600080fd5b8063c4d66de8116100b0578063c4d66de8146103c0578063c9dbc2a4146103e0578063cc98b8f51461040057600080fd5b80639aaf9f081461034c5780639af3e9091461036c578063afe5eb781461038c57600080fd5b80633659cfe61161013857806350abe9101161011257806350abe910146102de57806352d1902d1461030b5780637be0ca5e1461032057600080fd5b80633659cfe61461028b57806342d8e99e146102ab5780634f1ef286146102cb57600080fd5b80632675fdd0116101695780632675fdd01461022957806328375f67146102495780632ae9c6001461026957600080fd5b806301ffc9a71461019057806309e56b14146101c557806322844d0414610207575b600080fd5b34801561019c57600080fd5b506101b06101ab3660046126d3565b610508565b60405190151581526020015b60405180910390f35b3480156101d157600080fd5b506101f97f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b6040519081526020016101bc565b34801561021357600080fd5b5061022761022236600461272a565b6105d4565b005b34801561023557600080fd5b506101b0610244366004612855565b6106f0565b34801561025557600080fd5b50610227610264366004612920565b6108ea565b34801561027557600080fd5b5061027e610a10565b6040516101bc9190612973565b34801561029757600080fd5b506102276102a63660046129a7565b610a3a565b3480156102b757600080fd5b506102276102c63660046129c4565b610bdc565b6102276102d9366004612a03565b610ca7565b3480156102ea57600080fd5b506102fe6102f93660046129a7565b610e35565b6040516101bc9190612aa3565b34801561031757600080fd5b506101f9610e7f565b34801561032c57600080fd5b5060cc5461033a9060ff1681565b60405160ff90911681526020016101bc565b34801561035857600080fd5b506102fe610367366004612aef565b610f44565b34801561037857600080fd5b506102fe610387366004612b08565b61109b565b34801561039857600080fd5b506101f97fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea81565b3480156103cc57600080fd5b506102276103db3660046129a7565b6110e1565b3480156103ec57600080fd5b506102276103fb366004612b20565b611258565b34801561040c57600080fd5b506101f97f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b81565b34801561044057600080fd5b5061022761044f366004612b73565b61128e565b34801561046057600080fd5b5061022761046f366004612b73565b6112c9565b34801561048057600080fd5b506101f961048f366004612bb4565b60ff16600090815260c9602052604090205461ffff1690565b3480156104b457600080fd5b506102fe6104c3366004612bb4565b6112fe565b3480156104d457600080fd5b506102276104e3366004612bcf565b611367565b3480156104f457600080fd5b50610227610503366004612c44565b6114b3565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd4321b4000000000000000000000000000000000000000000000000000000000148061059b57507fffffffff0000000000000000000000000000000000000000000000000000000082167f2ae9c60000000000000000000000000000000000000000000000000000000000145b806105ce57506301ffc9a760e01b7fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336105fe816118df565b60005b828110156106e957600084848381811061061d5761061d612cd7565b9050606002018036038101906106339190612cfc565b905060008151600281111561064a5761064a612d65565b03610667576106628682602001518360400151611967565b6106e0565b60018151600281111561067c5761067c612d65565b03610694576106628682602001518360400151611b2d565b6002815160028111156106a9576106a9612d65565b036106e0576040517fd4d3bef700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600101610601565b5050505050565b60008060976000610762888888604051692822a926a4a9a9a4a7a760b11b60208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b0316905060011981016107915760019150506108e2565b6001600160a01b038116156107b5576107ad8187878787611c21565b9150506108e2565b5060408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19602a8301819052606089901b16603e830152605280830187905283518084039091018152607290920183528151918101919091206000908152609790915220546001600160a01b0316600119810161083b5760019150506108e2565b6001600160a01b03811615610857576107ad8187878787611c21565b5060408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606088901b8116602a840152603e830152605280830187905283518084039091018152607290920183528151918101919091206000908152609790915220546001600160a01b031680156108dc576107ad8187878787611c21565b50600090505b949350505050565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea610914816118df565b8360ff16600003610951576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc5460ff9081169085161115610994576040517f11c6e3ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008290036109cf576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f7848484604051610a0293929190612da6565b60405180910390a150505050565b610a186126b5565b5060408051606081018252600181526004602082015260009181019190915290565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610add5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b387f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610bb45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610ad4565b610bbd81611ccc565b60408051600080825260208201909252610bd991839190611cf6565b50565b600054600290610100900460ff16158015610bfe575060005460ff8083169116105b610c705760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ad4565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff83161761010017815560019080fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d455760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610ad4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610da07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610e1c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610ad4565b610e2582611ccc565b610e3182826001611cf6565b5050565b6040805160a081018252600060608083018281526080840183905283526020808401839052838501919091526001600160a01b038516825260cb905291909120546105ce90610f44565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f1f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610ad4565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6040805160a0810182526000606080830182815260808401839052835260208084018390528385019190915284825260ca905291822080549192909160ff169003610fbe576040517f8d0aeeb100000000000000000000000000000000000000000000000000000000815260048101849052602401610ad4565b6040805160a081018252825460ff81166060830190815261010090910461ffff166080830152815260018301546001600160a01b0316602082015260028301805491928492908401919061101190612dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461103d90612dc3565b801561108a5780601f1061105f5761010080835404028352916020019161108a565b820191906000526020600020905b81548152906001019060200180831161106d57829003601f168201915b505050505081525050915050919050565b6040805160a081018252600060608083018281526080840183905283526020830191909152918101919091526105ce6103676110dc36859003850185612df7565b611e9b565b600054610100900460ff16158080156111015750600054600160ff909116105b8061111b5750303b15801561111b575060005460ff166001145b61118d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ad4565b6000805460ff1916600117905580156111b0576000805461ff0019166101001790555b6111b982611f2a565b6111e430837fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea611967565b61120f30837f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b611967565b8015610e31576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33611282816118df565b6106e985858585611fb0565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336112b8816118df565b6112c3848484611967565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336112f3816118df565b6112c3848484611b2d565b6040805160a0810182526000606080830182815260808401839052835260208084018390528385019190915260ff851680835260c982529184902054845180860190955291845261ffff90911690830181905290916113609061036790611e9b565b9392505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33611391816118df565b60005b828110156112c35760008484838181106113b0576113b0612cd7565b905060a002018036038101906113c69190612e5b565b90506000815160028111156113dd576113dd612d65565b036114435760608101516001600160a01b031615611427576040517fd4d3bef700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61143e816020015182604001518360800151611967565b6114aa565b60018151600281111561145857611458612d65565b036114745761143e816020015182604001518360800151611b2d565b60028151600281111561148957611489612d65565b036114aa576114aa8160200151826040015183608001518460600151611fb0565b50600101611394565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6114dd816118df565b6115106001600160a01b0387167f99718b5000000000000000000000000000000000000000000000000000000000612307565b611546576040517f9d145ceb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8660ff16600003611583576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc546001906115969060ff1689612f00565b60ff1611156115e25760cc546040517f53db7b7b00000000000000000000000000000000000000000000000000000000815260ff91821660048201529088166024820152604401610ad4565b60cc5460ff908116908816111561163d5760cc805460ff191660ff8916179055600082900361163d576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038616600090815260cb6020908152604080832054835260ca9091529020805460ff161580159061167c5750805460ff898116911614155b156116d85780546040517fff9f367400000000000000000000000000000000000000000000000000000000815260ff8216600482015261010090910461ffff1660248201526001600160a01b0388166044820152606401610ad4565b60ff8816600090815260c960205260408120805482906116fb9061ffff16612f19565b91906101000a81548161ffff021916908361ffff16021790559050600060405180604001604052808b60ff1681526020018361ffff168152509050600061174182611e9b565b905060405180606001604052808381526020018b6001600160a01b031681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083815260ca60209081526040918290208451805182549184015161ffff16610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090921660ff90911617178155908401516001820180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff199092169190911790559083015190915060028201906118349082612f88565b5050506001600160a01b038a16600081815260cb602052604090819020839055517feb4bce5025c5200f6a074dd28fe7754955dfdca0eb2dcbaa16ccc292655e666990611888908e9087908e908e90613048565b60405180910390a285156118d2577f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78b88886040516118c993929190612da6565b60405180910390a15b5050505050505050505050565b6119223033836000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106f092505050565b610bd9576040517f1e09743f00000000000000000000000000000000000000000000000000000000815230600482015233602482015260448101829052606401610ad4565b7fffffffffffffffffffffffff00000000000000000000000000000000000000016001600160a01b038416016119b0576040516324159e5b60e01b815260040160405180910390fd5b7fffffffffffffffffffffffff00000000000000000000000000000000000000016001600160a01b03831601611a2a577f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33811480611a0c575060005b15611a2a576040516324159e5b60e01b815260040160405180910390fd5b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000906000818152609760205260409020549091506001600160a01b0316806106e957600082815260976020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916600290811790915582516001600160a01b0389811682529281019190915290861691339186917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a45050505050565b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000906000818152609760205260409020549091506001600160a01b0316156112c357600081815260976020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526000906001600160a01b03871690632675fdd090611c6f90889088908890889060040161306f565b602060405180830381865afa925050508015611ca8575060408051601f3d908101601f19168201909252611ca5918101906130a1565b60015b15611cbf578015611cbd576001915050611cc3565b505b5060005b95945050505050565b7f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b610e31816118df565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611d2e57611d2983612323565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611d88575060408051601f3d908101601f19168201909252611d85918101906130c3565b60015b611dfa5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610ad4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611e8f5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610ad4565b50611d298383836123ee565b600081600001518260200151604051602001611f0d92919060f89290921b7fff0000000000000000000000000000000000000000000000000000000000000016825260f01b7fffff00000000000000000000000000000000000000000000000000000000000016600182015260030190565b604051602081830303815290604052805190602001209050919050565b600054610100900460ff16611fa75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610ad4565b610bd981612413565b806001600160a01b0381163b611ffd576040517f48359af60000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610ad4565b6040516301ffc9a760e01b81527f2675fdd00000000000000000000000000000000000000000000000000000000060048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015612061573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208591906130a1565b6120c6576040517fdbb048620000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610ad4565b6001600160a01b038581161480156120e657506001600160a01b03848116145b1561211d576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03858116148061213c57506001600160a01b03848116145b1561218b577f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3383148061216d575060005b1561218b576040516324159e5b60e01b815260040160405180910390fd5b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606088811b8216602a85015289901b16603e830152605280830187905283518084039091018152607290920190925280519101206000906000818152609760205260409020549091506001600160a01b03168061228957600082815260976020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925583518b8316815292830152881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a46122fe565b826001600160a01b0316816001600160a01b0316146122fe576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280831660648301528416608482015260a401610ad4565b50505050505050565b60006123128361243e565b801561136057506113608383612489565b6001600160a01b0381163b6123a05760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610ad4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6123f78361253f565b6000825111806124045750805b15611d29576112c3838361257f565b610bd930827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33611967565b6000612451826301ffc9a760e01b612489565b80156105ce5750612482827fffffffff00000000000000000000000000000000000000000000000000000000612489565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612528575060208210155b80156125345750600081115b979650505050505050565b61254881612323565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611360838360405180606001604052806027815260200161310c602791396060600080856001600160a01b0316856040516125bc91906130dc565b600060405180830381855af49150503d80600081146125f7576040519150601f19603f3d011682016040523d82523d6000602084013e6125fc565b606091505b509150915061260d86838387612617565b9695505050505050565b6060831561268657825160000361267f576001600160a01b0385163b61267f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ad4565b50816108e2565b6108e2838381511561269b5781518083602001fd5b8060405162461bcd60e51b8152600401610ad491906130f8565b60405180606001604052806003906020820280368337509192915050565b6000602082840312156126e557600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461136057600080fd5b6001600160a01b0381168114610bd957600080fd5b60008060006040848603121561273f57600080fd5b833561274a81612715565b9250602084013567ffffffffffffffff8082111561276757600080fd5b818601915086601f83011261277b57600080fd5b81358181111561278a57600080fd5b87602060608302850101111561279f57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126127d957600080fd5b813567ffffffffffffffff808211156127f4576127f46127b2565b604051601f8301601f19908116603f0116810190828211818310171561281c5761281c6127b2565b8160405283815286602085880101111561283557600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561286b57600080fd5b843561287681612715565b9350602085013561288681612715565b925060408501359150606085013567ffffffffffffffff8111156128a957600080fd5b6128b5878288016127c8565b91505092959194509250565b803560ff811681146128d257600080fd5b919050565b60008083601f8401126128e957600080fd5b50813567ffffffffffffffff81111561290157600080fd5b60208301915083602082850101111561291957600080fd5b9250929050565b60008060006040848603121561293557600080fd5b61293e846128c1565b9250602084013567ffffffffffffffff81111561295a57600080fd5b612966868287016128d7565b9497909650939450505050565b60608101818360005b600381101561299e57815160ff1683526020928301929091019060010161297c565b50505092915050565b6000602082840312156129b957600080fd5b813561136081612715565b6000806000608084860312156129d957600080fd5b60608401858111156129ea57600080fd5b8493503567ffffffffffffffff81111561295a57600080fd5b60008060408385031215612a1657600080fd5b8235612a2181612715565b9150602083013567ffffffffffffffff811115612a3d57600080fd5b612a49858286016127c8565b9150509250929050565b60005b83811015612a6e578181015183820152602001612a56565b50506000910152565b60008151808452612a8f816020860160208601612a53565b601f01601f19169290920160200192915050565b602081526000825160ff815116602084015261ffff6020820151166040840152506001600160a01b03602084015116606083015260408301516080808401526108e260a0840182612a77565b600060208284031215612b0157600080fd5b5035919050565b600060408284031215612b1a57600080fd5b50919050565b60008060008060808587031215612b3657600080fd5b8435612b4181612715565b93506020850135612b5181612715565b9250604085013591506060850135612b6881612715565b939692955090935050565b600080600060608486031215612b8857600080fd5b8335612b9381612715565b92506020840135612ba381612715565b929592945050506040919091013590565b600060208284031215612bc657600080fd5b611360826128c1565b60008060208385031215612be257600080fd5b823567ffffffffffffffff80821115612bfa57600080fd5b818501915085601f830112612c0e57600080fd5b813581811115612c1d57600080fd5b86602060a083028501011115612c3257600080fd5b60209290920196919550909350505050565b60008060008060008060808789031215612c5d57600080fd5b612c66876128c1565b95506020870135612c7681612715565b9450604087013567ffffffffffffffff80821115612c9357600080fd5b612c9f8a838b016128d7565b90965094506060890135915080821115612cb857600080fd5b50612cc589828a016128d7565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b8035600381106128d257600080fd5b600060608284031215612d0e57600080fd5b6040516060810181811067ffffffffffffffff82111715612d3157612d316127b2565b604052612d3d83612ced565b81526020830135612d4d81612715565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60ff84168152604060208201526000611cc3604083018486612d7b565b600181811c90821680612dd757607f821691505b602082108103612b1a57634e487b7160e01b600052602260045260246000fd5b600060408284031215612e0957600080fd5b6040516040810181811067ffffffffffffffff82111715612e2c57612e2c6127b2565b604052612e38836128c1565b8152602083013561ffff81168114612e4f57600080fd5b60208201529392505050565b600060a08284031215612e6d57600080fd5b60405160a0810181811067ffffffffffffffff82111715612e9057612e906127b2565b604052612e9c83612ced565b81526020830135612eac81612715565b60208201526040830135612ebf81612715565b60408201526060830135612ed281612715565b60608201526080928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156105ce576105ce612eea565b600061ffff808316818103612f3057612f30612eea565b6001019392505050565b601f821115611d2957600081815260208120601f850160051c81016020861015612f615750805b601f850160051c820191505b81811015612f8057828155600101612f6d565b505050505050565b815167ffffffffffffffff811115612fa257612fa26127b2565b612fb681612fb08454612dc3565b84612f3a565b602080601f831160018114612feb5760008415612fd35750858301515b600019600386901b1c1916600185901b178555612f80565b600085815260208120601f198616915b8281101561301a57888601518255948401946001909101908401612ffb565b50858210156130385787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff8516815261ffff8416602082015260606040820152600061260d606083018486612d7b565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261260d6080830184612a77565b6000602082840312156130b357600080fd5b8151801515811461136057600080fd5b6000602082840312156130d557600080fd5b5051919050565b600082516130ee818460208701612a53565b9190910192915050565b6020815260006113606020830184612a7756fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220810d23d35ce2983364f8a9cb243f6811fc6bb12125e83af85de3225f44d97ef364736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AnyAddressDisallowedForWhoAndWhere";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IPermissionCondition";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "ConditionInterfaceNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IPermissionCondition";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "ConditionNotAContract";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyReleaseMetadata";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GrantWithConditionNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPluginSetupInterface";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "latestRelease";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "newRelease";
            readonly type: "uint8";
        }];
        readonly name: "InvalidReleaseIncrement";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "currentCondition";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "newCondition";
            readonly type: "address";
        }];
        readonly name: "PermissionAlreadyGrantedForDifferentCondition";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PermissionsForAnyAddressDisallowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "release";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint16";
            readonly name: "build";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "pluginSetup";
            readonly type: "address";
        }];
        readonly name: "PluginSetupAlreadyInPreviousRelease";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ReleaseDoesNotExist";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ReleaseZeroNotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "Unauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "versionHash";
            readonly type: "bytes32";
        }];
        readonly name: "VersionHashDoesNotExist";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "here";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "Granted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "release";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "releaseMetadata";
            readonly type: "bytes";
        }];
        readonly name: "ReleaseMetadataUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "here";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }];
        readonly name: "Revoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "release";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "build";
            readonly type: "uint16";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "pluginSetup";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "buildMetadata";
            readonly type: "bytes";
        }];
        readonly name: "VersionCreated";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAINTAINER_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "ROOT_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_REPO_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "_items";
            readonly type: "tuple[]";
        }];
        readonly name: "applyMultiTargetPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.SingleTargetPermission[]";
            readonly name: "items";
            readonly type: "tuple[]";
        }];
        readonly name: "applySingleTargetPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_release";
            readonly type: "uint8";
        }];
        readonly name: "buildCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_release";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "_pluginSetup";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_buildMetadata";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_releaseMetadata";
            readonly type: "bytes";
        }];
        readonly name: "createVersion";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_pluginSetup";
            readonly type: "address";
        }];
        readonly name: "getLatestVersion";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint8";
                    readonly name: "release";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint16";
                    readonly name: "build";
                    readonly type: "uint16";
                }];
                readonly internalType: "struct PluginRepo.Tag";
                readonly name: "tag";
                readonly type: "tuple";
            }, {
                readonly internalType: "address";
                readonly name: "pluginSetup";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "buildMetadata";
                readonly type: "bytes";
            }];
            readonly internalType: "struct PluginRepo.Version";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_release";
            readonly type: "uint8";
        }];
        readonly name: "getLatestVersion";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint8";
                    readonly name: "release";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint16";
                    readonly name: "build";
                    readonly type: "uint16";
                }];
                readonly internalType: "struct PluginRepo.Tag";
                readonly name: "tag";
                readonly type: "tuple";
            }, {
                readonly internalType: "address";
                readonly name: "pluginSetup";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "buildMetadata";
                readonly type: "bytes";
            }];
            readonly internalType: "struct PluginRepo.Version";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_tagHash";
            readonly type: "bytes32";
        }];
        readonly name: "getVersion";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint8";
                    readonly name: "release";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint16";
                    readonly name: "build";
                    readonly type: "uint16";
                }];
                readonly internalType: "struct PluginRepo.Tag";
                readonly name: "tag";
                readonly type: "tuple";
            }, {
                readonly internalType: "address";
                readonly name: "pluginSetup";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "buildMetadata";
                readonly type: "bytes";
            }];
            readonly internalType: "struct PluginRepo.Version";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "release";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint16";
                readonly name: "build";
                readonly type: "uint16";
            }];
            readonly internalType: "struct PluginRepo.Tag";
            readonly name: "_tag";
            readonly type: "tuple";
        }];
        readonly name: "getVersion";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint8";
                    readonly name: "release";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint16";
                    readonly name: "build";
                    readonly type: "uint16";
                }];
                readonly internalType: "struct PluginRepo.Tag";
                readonly name: "tag";
                readonly type: "tuple";
            }, {
                readonly internalType: "address";
                readonly name: "pluginSetup";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "buildMetadata";
                readonly type: "bytes";
            }];
            readonly internalType: "struct PluginRepo.Version";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "grant";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "contract IPermissionCondition";
            readonly name: "_condition";
            readonly type: "address";
        }];
        readonly name: "grantWithCondition";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "initialOwner";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "_previousProtocolVersion";
            readonly type: "uint8[3]";
        }, {
            readonly internalType: "bytes";
            readonly name: "_initData";
            readonly type: "bytes";
        }];
        readonly name: "initializeFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "isGranted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestRelease";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "revoke";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_release";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_releaseMetadata";
            readonly type: "bytes";
        }];
        readonly name: "updateReleaseMetadata";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): PluginRepoInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginRepo$3;
}

type PluginRepoFactoryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginRepoFactory__factory extends ContractFactory {
    constructor(...args: PluginRepoFactoryConstructorParams);
    deploy(_pluginRepoRegistry: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginRepoFactory>;
    getDeployTransaction(_pluginRepoRegistry: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginRepoFactory;
    connect(signer: Signer): PluginRepoFactory__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract PluginRepoRegistry";
            readonly name: "_pluginRepoRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_subdomain";
            readonly type: "string";
        }, {
            readonly internalType: "address";
            readonly name: "_initialOwner";
            readonly type: "address";
        }];
        readonly name: "createPluginRepo";
        readonly outputs: readonly [{
            readonly internalType: "contract PluginRepo";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_subdomain";
            readonly type: "string";
        }, {
            readonly internalType: "address";
            readonly name: "_pluginSetup";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_maintainer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_releaseMetadata";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_buildMetadata";
            readonly type: "bytes";
        }];
        readonly name: "createPluginRepoWithFirstVersion";
        readonly outputs: readonly [{
            readonly internalType: "contract PluginRepo";
            readonly name: "pluginRepo";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pluginRepoBase";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pluginRepoRegistry";
        readonly outputs: readonly [{
            readonly internalType: "contract PluginRepoRegistry";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginRepoFactoryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginRepoFactory;
}

type PluginRepoRegistryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginRepoRegistry__factory extends ContractFactory {
    constructor(...args: PluginRepoRegistryConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginRepoRegistry$1>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginRepoRegistry$1;
    connect(signer: Signer): PluginRepoRegistry__factory;
    static readonly bytecode = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e1565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100df576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516117ca61011860003960008181610307015281816103a201528181610617015281816106ad01526107a801526117ca6000f3fe6080604052600436106100c65760003560e01c80634f1ef28611610074578063ce091c861161004e578063ce091c861461023f578063f29ee12514610273578063fdb9df55146102b357600080fd5b80634f1ef286146101d557806352d1902d146101e857806374574eb71461020b57600080fd5b80634162169f116100a55780634162169f1461014c57806344162ef81461016a578063485cc955146101b557600080fd5b8062077393146100cb5780632ae9c600146101085780633659cfe61461012a575b600080fd5b3480156100d757600080fd5b5060fb546100eb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011457600080fd5b5061011d6102d3565b6040516100ff91906113b8565b34801561013657600080fd5b5061014a610145366004611401565b6102fd565b005b34801561015857600080fd5b506097546001600160a01b03166100eb565b34801561017657600080fd5b5060c9546101849060e01b81565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100ff565b3480156101c157600080fd5b5061014a6101d036600461141e565b61049f565b61014a6101e336600461146d565b61060d565b3480156101f457600080fd5b506101fd61079b565b6040519081526020016100ff565b34801561021757600080fd5b506101fd7f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293281565b34801561024b57600080fd5b506101fd7f055973dfb6d3b3cd890dde3a801f5427fa973864752b6d2a1ae61cbd5ae5dc0981565b34801561027f57600080fd5b506102a361028e366004611401565b60ca6020526000908152604090205460ff1681565b60405190151581526020016100ff565b3480156102bf57600080fd5b5061014a6102ce366004611531565b610860565b6102db61139a565b5060408051606081018252600181526004602082015260009181019190915290565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103a05760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103fb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104775760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610397565b61048081610a0e565b6040805160008082526020820190925261049c91839190610a47565b50565b600054610100900460ff16158080156104bf5750600054600160ff909116105b806104d95750303b1580156104d9575060005460ff166001145b61054b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610397565b6000805460ff19166001179055801561056e576000805461ff0019166101001790555b7fd4321b40000000000000000000000000000000000000000000000000000000006105998482610be7565b5060fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790558015610608576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106ab5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610397565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107067f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107825760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610397565b61078b82610a0e565b61079782826001610a47565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461083b5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610397565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6097547f055973dfb6d3b3cd890dde3a801f5427fa973864752b6d2a1ae61cbd5ae5dc099061089e906001600160a01b031630335b84600036610ca2565b82156109c45760fb546001600160a01b03166108e6576040517ff72f946a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108f08484610d90565b61092a5783836040517f5b7dee830000000000000000000000000000000000000000000000000000000081526004016103979291906115df565b6000848460405161093c9291906115f3565b60405190819003812060fb547f89bb4145000000000000000000000000000000000000000000000000000000008352600483018290526001600160a01b03868116602485015291935016906389bb414590604401600060405180830381600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b50505050505b6109cd82610e3d565b7f8cc06643d6cbee78b006d2df2db4d2487b69dd64bb2c96088280fb29dd93a0b2848484604051610a0093929190611603565b60405180910390a150505050565b6097547f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293290610797906001600160a01b03163033610895565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610a7a5761060883610f1a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610ad4575060408051601f3d908101601f19168201909252610ad191810190611630565b60015b610b465760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610397565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610bdb5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610397565b50610608838383610fe5565b600054610100900460ff16610c645760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610397565b610c6d82611010565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e09290921c91909117905550565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610cef9088908890889088908890600401611649565b602060405180830381865afa158015610d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d30919061167c565b610d88576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610397565b505050505050565b6000828280835b81811015610e2e576000848483818110610db357610db361169e565b919091013560f81c915050606081118015610dd15750607b8160ff16105b15610ddc5750610e1c565b602f8160ff16118015610df25750603a8160ff16105b15610dfd5750610e1c565b8060ff16602d03610e0e5750610e1c565b600095505050505050610e37565b80610e26816116b4565b915050610d97565b50600193505050505b92915050565b6001600160a01b038116600090815260ca602052604090205460ff1615610e9b576040517ffdcce17f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610397565b60c954610eb5906001600160a01b0383169060e01b6110bc565b610ef6576040517f71023c8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610397565b6001600160a01b0316600090815260ca60205260409020805460ff19166001179055565b6001600160a01b0381163b610f975760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610397565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610fee836110df565b600082511180610ffb5750805b156106085761100a838361111f565b50505050565b600054610100900460ff1661108d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610397565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006110c783611144565b80156110d857506110d883836111a8565b9392505050565b6110e881610f1a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606110d8838360405180606001604052806027815260200161176e60279139611277565b6000611170827f01ffc9a7000000000000000000000000000000000000000000000000000000006111a8565b8015610e3757506111a1827fffffffff000000000000000000000000000000000000000000000000000000006111a8565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d91506000519050828015611260575060208210155b801561126c5750600081115b979650505050505050565b6060600080856001600160a01b031685604051611294919061171e565b600060405180830381855af49150503d80600081146112cf576040519150601f19603f3d011682016040523d82523d6000602084013e6112d4565b606091505b50915091506112e5868383876112ef565b9695505050505050565b6060831561135e578251600003611357576001600160a01b0385163b6113575760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610397565b5081611368565b6113688383611370565b949350505050565b8151156113805781518083602001fd5b8060405162461bcd60e51b8152600401610397919061173a565b60405180606001604052806003906020820280368337509192915050565b60608101818360005b60038110156113e357815160ff168352602092830192909101906001016113c1565b50505092915050565b6001600160a01b038116811461049c57600080fd5b60006020828403121561141357600080fd5b81356110d8816113ec565b6000806040838503121561143157600080fd5b823561143c816113ec565b9150602083013561144c816113ec565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561148057600080fd5b823561148b816113ec565b9150602083013567ffffffffffffffff808211156114a857600080fd5b818501915085601f8301126114bc57600080fd5b8135818111156114ce576114ce611457565b604051601f8201601f19908116603f011681019083821181831017156114f6576114f6611457565b8160405282815288602084870101111561150f57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060006040848603121561154657600080fd5b833567ffffffffffffffff8082111561155e57600080fd5b818601915086601f83011261157257600080fd5b81358181111561158157600080fd5b87602082850101111561159357600080fd5b602092830195509350508401356115a9816113ec565b809150509250925092565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6020815260006113686020830184866115b4565b8183823760009101908152919050565b6040815260006116176040830185876115b4565b90506001600160a01b0383166020830152949350505050565b60006020828403121561164257600080fd5b5051919050565b60006001600160a01b0380881683528087166020840152508460408301526080606083015261126c6080830184866115b4565b60006020828403121561168e57600080fd5b815180151581146110d857600080fd5b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116f357634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b838110156117155781810151838201526020016116fd565b50506000910152565b600082516117308184602087016116fa565b9190910192915050565b60208152600082518060208401526117598160408501602087016116fa565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220267cb3e8d3d5f1e44830a5cb694d978443ccdd5c5b78b2e286748227d51da63f64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractAlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractERC165SupportInvalid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractInterfaceInvalid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "DaoUnauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ENSNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "subdomain";
            readonly type: "string";
        }];
        readonly name: "InvalidPluginSubdomain";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "subdomain";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "pluginRepo";
            readonly type: "address";
        }];
        readonly name: "PluginRepoRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "REGISTER_PLUGIN_REPO_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_REGISTRY_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dao";
        readonly outputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "entries";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "contract ENSSubdomainRegistrar";
            readonly name: "_subdomainRegistrar";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "subdomain";
            readonly type: "string";
        }, {
            readonly internalType: "address";
            readonly name: "pluginRepo";
            readonly type: "address";
        }];
        readonly name: "registerPluginRepo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "subdomainRegistrar";
        readonly outputs: readonly [{
            readonly internalType: "contract ENSSubdomainRegistrar";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetInterfaceId";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): PluginRepoRegistryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginRepoRegistry$1;
}

type index$o_IPluginRepo__factory = IPluginRepo__factory;
declare const index$o_IPluginRepo__factory: typeof IPluginRepo__factory;
type index$o_PluginRepo__factory = PluginRepo__factory;
declare const index$o_PluginRepo__factory: typeof PluginRepo__factory;
type index$o_PluginRepoFactory__factory = PluginRepoFactory__factory;
declare const index$o_PluginRepoFactory__factory: typeof PluginRepoFactory__factory;
type index$o_PluginRepoRegistry__factory = PluginRepoRegistry__factory;
declare const index$o_PluginRepoRegistry__factory: typeof PluginRepoRegistry__factory;
declare namespace index$o {
  export {
    index$p as placeholder,
    index$o_IPluginRepo__factory as IPluginRepo__factory,
    index$o_PluginRepo__factory as PluginRepo__factory,
    index$o_PluginRepoFactory__factory as PluginRepoFactory__factory,
    index$o_PluginRepoRegistry__factory as PluginRepoRegistry__factory,
  };
}

type PluginSetupProcessorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginSetupProcessor__factory extends ContractFactory {
    constructor(...args: PluginSetupProcessorConstructorParams);
    deploy(_repoRegistry: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginSetupProcessor$2>;
    getDeployTransaction(_repoRegistry: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginSetupProcessor$2;
    connect(signer: Signer): PluginSetupProcessor__factory;
    static readonly bytecode = "0x60806040523480156200001157600080fd5b5060405162002ffc38038062002ffc83398101604081905262000034916200005a565b600180546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b612f60806200009c6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063851d11f81161008c578063d759812211610066578063d759812214610219578063fafc79da1461023a578063fbdc1ef11461024d578063fe6c34741461028957600080fd5b8063851d11f8146101b85780639665861a146101cb578063ca211f7f146101f257600080fd5b80633c8c01d1116100bd5780633c8c01d114610137578063483d209e14610158578063747e5ec11461018357600080fd5b806322e12c63146100e45780632ae9c600146100f95780632fb0433614610117575b600080fd5b6100f76100f2366004611dc5565b61029c565b005b6101016106be565b60405161010e9190611e1c565b60405180910390f35b61012a610125366004611e68565b6106e8565b60405161010e9190611f87565b61014a610145366004611e68565b6109ff565b60405161010e92919061202d565b60015461016b906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b6101aa7ff796b89427c6552c1ac705d833bfb7909f8eb5ce502c1db97f85fabc6ad8354881565b60405190815260200161010e565b6100f76101c6366004612057565b610d40565b6101aa7fb03cf3d518f6d49560b7f5bece1ccb8fd50ea7370f02f5e5210edba04be3c4f781565b6101aa7fbd4dbacf5ba6d9793f600403b3293d6ecd695fcc703a2b5edcf245f45fda6cfa81565b61022c6102273660046120b5565b610efd565b60405161010e92919061214b565b6100f7610248366004612179565b611587565b61027461025b36600461219b565b6000602081905290815260409020805460019091015482565b6040805192835260208301919091520161010e565b6100f76102973660046120b5565b6115e5565b817fb03cf3d518f6d49560b7f5bece1ccb8fd50ea7370f02f5e5210edba04be3c4f76102c88282611827565b60006102e0856102db60208701876121b4565b611927565b60008181526020818152604082209293506103bc90610307903689900389019089016122fb565b61036d61031760a08a018a61233f565b808060200260200160405190810160405280939291908181526020016000905b828210156103635761035460a08302860136819003810190612395565b81526020019060010190610337565b505050505061196a565b60c089013561037f60808b018b612426565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506002925061199a915050565b90506103c88382611587565b60006103e96103df36899003890160208a016122fb565b8860c001356119e2565b43845560018401819055905060006104076080890160608a016121b4565b604051639af3e90960e01b81526001600160a01b039190911690639af3e909906104389060208c019060040161249a565b600060405180830381865afa158015610455573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261047d9190810190612520565b9050600061048e60208a018a6121b4565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef91906125ea565b9050600082602001516001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610535573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055991906125ea565b9050806001600160a01b0316826001600160a01b0316146105cc576105cc61058460208c018c6121b4565b8261059260808e018e612426565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a2992505050565b60006105db60a08c018c61233f565b9050111561064f576001600160a01b038b1663e978afe56105ff60a08d018d61233f565b6040518363ffffffff1660e01b815260040161061c929190612607565b600060405180830381600087803b15801561063657600080fd5b505af115801561064a573d6000803e3d6000fd5b505050505b61065c60208b018b6121b4565b6001600160a01b03168b6001600160a01b03167f24565610ddf61ee73e8501d7f0454657c71f5944882f5c586d7246bf43e13cda87876040516106a9929190918252602082015260400190565b60405180910390a35050505050505050505050565b6106c6611d8f565b5060408051606081018252600181526004602082015260009181019190915290565b6060600061070a846106fc858501866126aa565b6102db9060208101906121b4565b600081815260208190526040812091925061078761072d368790038701876122fb565b61078261073d60608901896126aa565b61074b9060208101906126e8565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611bb292505050565b6119e2565b9050808260010154146107db5760018201546040517f73a4eaa00000000000000000000000000000000000000000000000000000000081526004810191909152602481018290526044015b60405180910390fd5b60006107ed60608701604088016121b4565b604051639af3e90960e01b81526001600160a01b039190911690639af3e9099061081b90899060040161249a565b600060405180830381865afa158015610838573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108609190810190612520565b60208101519091506001600160a01b0316639cb0a1248861088460608a018a6126aa565b6040518363ffffffff1660e01b81526004016108a1929190612876565b6000604051808303816000875af11580156108c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e89190810190612995565b9450600061093f6108fe368990038901896122fb565b6109078861196a565b6040805160208101909152600081527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390600361199a565b60008181526002860160205260409020548554919250111561097757604051630559b4b760e31b8152600481018290526024016107d2565b60008181526002850160205260409081902043905561099c90606089019089016121b4565b6001600160a01b03908116908916337f5fdcd271ff15db84cbc94365956df5504f6d756e111654144648433c11a44530848b6109db60608201826126aa565b8c6040516109ec94939291906129ca565b60405180910390a4505050505092915050565b6000610a1e604051806040016040528060608152602001606081525090565b6000610a3060608501604086016121b4565b6001546040517ff29ee1250000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015292935091169063f29ee12590602401602060405180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab99190612a02565b610aef576040517f0d4feab400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051639af3e90960e01b81526000906001600160a01b03831690639af3e90990610b1e90889060040161249a565b600060405180830381865afa158015610b3b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b639190810190612520565b60208101519091506001600160a01b031663f10832f187610b876060890189612426565b6040518463ffffffff1660e01b8152600401610ba593929190612a24565b6000604051808303816000875af1158015610bc4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bec9190810190612b26565b90945092506000610bfd8786611927565b90506000610c42610c13368990038901896122fb565b610c20876020015161196a565b8751610c2b90611bb2565b60405180602001604052806000815250600161199a565b600083815260208190526040902060018101549192509015610c90576040517fd2e44eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260028201602052604090205481541015610cc557604051630559b4b760e31b8152600481018390526024016107d2565b600082815260028201602052604090204390556001600160a01b03808616908a16337f8ea69cee01fd9fc24e6b9614ea0896c5a1eac8fd8aba383285248cd0e1d8503a858c610d176060820182612426565b8e8e604051610d2b96959493929190612b6d565b60405180910390a450505050505b9250929050565b817fbd4dbacf5ba6d9793f600403b3293d6ecd695fcc703a2b5edcf245f45fda6cfa610d6c8282611827565b6000610d7f856102db60208701876121b4565b6000818152602081815260408220929350610e0290610da6903689900389019089016122fb565b610907610db660808a018a61233f565b808060200260200160405190810160405280939291908181526020016000905b8282101561036357610df360a08302860136819003810190612395565b81526020019060010190610dd6565b9050610e0e8382611587565b438255600060018301819055610e27608088018861233f565b90501115610e9b576001600160a01b03871663e978afe5610e4b608089018961233f565b6040518363ffffffff1660e01b8152600401610e68929190612607565b600060405180830381600087803b158015610e8257600080fd5b505af1158015610e96573d6000803e3d6000fd5b505050505b610ea860208701876121b4565b6001600160a01b0316876001600160a01b03167fa0e5d4ce6420a0e7a5f0ac10c47b3a672fb661c11f5609bb21b68644d81e17aa83604051610eec91815260200190565b60405180910390a350505050505050565b6060610f1c604051806040016040528060608152602001606081525090565b610f2c6060840160408501612bb5565b60ff16610f3c6020850185612bb5565b60ff16141580610f725750610f576080840160608501612bd2565b61ffff16610f6b6040850160208601612bd2565b61ffff1610155b15610fb057604080517f80d4e9070000000000000000000000000000000000000000000000000000000081526107d291859190820190600401612bef565b6000610fc3856106fc60a08701876126aa565b6000818152602081905260408120919250610fe461073d60a08801886126aa565b9050600061103060405180604001604052808960000180360381019061100a9190612c0a565b815260200161101f60a08b0160808c016121b4565b6001600160a01b03169052836119e2565b90508083600101541461107f5760018301546040517f73a4eaa00000000000000000000000000000000000000000000000000000000081526004810191909152602481018290526044016107d2565b600061109160a0890160808a016121b4565b604051639af3e90960e01b81526001600160a01b039190911690639af3e909906110bf908b9060040161249a565b600060405180830381865afa1580156110dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111049190810190612520565b9050600061111860a08a0160808b016121b4565b6001600160a01b0316639af3e9098a6040016040518263ffffffff1660e01b8152600401611146919061249a565b600060405180830381865afa158015611163573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261118b9190810190612520565b9050600081602001516001600160a01b031683602001516001600160a01b0316036112825761122c60405180604001604052808c6040018036038101906111d29190612c0a565b81526020016111e760a08e0160808f016121b4565b6001600160a01b031690526040805160208101909152600081527f569e75fc77c1a856f6daaf9e69d8a9566ca34aa47f9133711ce065a571af0cfd908890600261199a565b905061123b60a08b018b6126aa565b6112499060208101906126e8565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505090895250611524565b6112d07f41de6830000000000000000000000000000000000000000000000000000000006112b360a08d018d6126aa565b6112c19060208101906121b4565b6001600160a01b031690611bc5565b61132d576112e160a08b018b6126aa565b6112ef9060208101906121b4565b6040517f8174ff550000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016107d2565b600061133c60a08c018c6126aa565b61134a9060208101906121b4565b6001600160a01b03166341de68306040518163ffffffff1660e01b8152600401602060405180830381865afa158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190612c26565b60028111156113bc576113bc611eb8565b1461141a576113ce60a08b018b6126aa565b6113dc9060208101906121b4565b6040517fe4356c940000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016107d2565b81602001516001600160a01b031663a8a9c29e8c8c60000160200160208101906114449190612bd2565b61145160a08f018f6126aa565b6040518463ffffffff1660e01b815260040161146f93929190612c43565b6000604051808303816000875af115801561148e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114b69190810190612c6f565b809950819a50505061152160405180604001604052808c6040018036038101906114e09190612c0a565b81526020016114f560a08e0160808f016121b4565b6001600160a01b031681525061150e8a6020015161196a565b8a5161151990611bb2565b8c600261199a565b90505b60008181526002870160205260409020548654101561155957604051630559b4b760e31b8152600481018290526024016107d2565b600081815260028701602052604090204390556115798b828c8b8d611be8565b505050505050509250929050565b60008281526020818152604080832084845260028101909252909120548154106115e0576040517f59730ce6000000000000000000000000000000000000000000000000000000008152600481018390526024016107d2565b505050565b817ff796b89427c6552c1ac705d833bfb7909f8eb5ce502c1db97f85fabc6ad835486116118282611827565b6000611627856102db60808701606088016121b4565b60008181526020819052604081209192506116c261164a368890038801886122fb565b6116a661165a60808a018a61233f565b808060200260200160405190810160405280939291908181526020016000905b828210156103635761169760a08302860136819003810190612395565b8152602001906001019061167a565b8860a0013560405180602001604052806000815250600161199a565b600183015490915015611701576040517fd2e44eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61170b8382611587565b600061172961171f368990038901896122fb565b8860a001356119e2565b6001840181905543845590506000611744608089018961233f565b905011156117b8576001600160a01b03881663e978afe561176860808a018a61233f565b6040518363ffffffff1660e01b8152600401611785929190612607565b600060405180830381600087803b15801561179f57600080fd5b505af11580156117b3573d6000803e3d6000fd5b505050505b6117c860808801606089016121b4565b6001600160a01b0316886001600160a01b03167f74e616c7264536b98a5ec234d051ae6ce1305bf05c85f9ddc112364440ccf1298484604051611815929190918252602082015260400190565b60405180910390a35050505050505050565b336001600160a01b038316148015906118d45750604080516020810182526000815290517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0384169163fdef91069161189191309133918791600401612cc9565b602060405180830381865afa1580156118ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d29190612a02565b155b15611923576040517f15d68ee00000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152336024820152604481018290526064016107d2565b5050565b604080516001600160a01b0380851660208301528316918101919091526000906060015b6040516020818303038152906040528051906020012090505b92915050565b60008160405160200161197d9190611f87565b604051602081830303815290604052805190602001209050919050565b84516020808701518451858301206040516000946119c1949093928a928a92899101612d05565b60405160208183030381529060405280519060200120905095945050505050565b815160208084015160408051845160ff1681850152929093015161ffff16928201929092526001600160a01b0390911660608201526080810182905260009060a00161194b565b805115611b6b576040517f4f1ef2860000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634f1ef28690611a779085908590600401612d60565b600060405180830381600087803b158015611a9157600080fd5b505af1925050508015611aa2575060015b6115e057611aae612d82565b806308c379a003611b015750611ac2612d9e565b80611acd5750611b03565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d29190612e46565b505b3d808015611b2d576040519150601f19603f3d011682016040523d82523d6000602084013e611b32565b606091505b508383836040517f96e9e31b0000000000000000000000000000000000000000000000000000000081526004016107d293929190612e59565b6040517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152841690633659cfe690602401611a77565b60008160405160200161197d9190612e85565b6000611bd083611c5c565b8015611be15750611be18383611cc0565b9392505050565b611bf860a08401608085016121b4565b6001600160a01b03908116908616337f3686138d92841c8549b2fe39fda23881fef6aa9b347352114c0869bf5af3e3f28760408801611c3a60a08a018a6126aa565b8888604051611c4d959493929190612ed2565b60405180910390a45050505050565b6000611c88827f01ffc9a700000000000000000000000000000000000000000000000000000000611cc0565b80156119645750611cb9827fffffffff00000000000000000000000000000000000000000000000000000000611cc0565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d91506000519050828015611d78575060208210155b8015611d845750600081115b979650505050505050565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b0381168114611dc257600080fd5b50565b60008060408385031215611dd857600080fd5b8235611de381611dad565b9150602083013567ffffffffffffffff811115611dff57600080fd5b830160e08186031215611e1157600080fd5b809150509250929050565b60608101818360005b6003811015611e4757815160ff16835260209283019290910190600101611e25565b50505092915050565b600060808284031215611e6257600080fd5b50919050565b60008060408385031215611e7b57600080fd5b8235611e8681611dad565b9150602083013567ffffffffffffffff811115611ea257600080fd5b611eae85828601611e50565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611ef757611ef7611eb8565b9052565b611f06828251611ee7565b6020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b600081518084526020808501945080840160005b83811015611f7c57611f6e878351611efb565b965090820190600101611f5b565b509495945050505050565b602081526000611be16020830184611f47565b805160408084528151908401819052600091602091908201906060860190845b81811015611fdf5783516001600160a01b031683529284019291840191600101611fba565b50508483015186820387850152805180835290840192506000918401905b8083101561202257612010828551611efb565b91508484019350600183019250611ffd565b509695505050505050565b6001600160a01b038316815260406020820152600061204f6040830184611f9a565b949350505050565b6000806040838503121561206a57600080fd5b823561207581611dad565b9150602083013567ffffffffffffffff81111561209157600080fd5b830160a08186031215611e1157600080fd5b600060c08284031215611e6257600080fd5b600080604083850312156120c857600080fd5b82356120d381611dad565b9150602083013567ffffffffffffffff8111156120ef57600080fd5b611eae858286016120a3565b60005b838110156121165781810151838201526020016120fe565b50506000910152565b600081518084526121378160208601602086016120fb565b601f01601f19169290920160200192915050565b60408152600061215e604083018561211f565b82810360208401526121708185611f9a565b95945050505050565b6000806040838503121561218c57600080fd5b50508035926020909101359150565b6000602082840312156121ad57600080fd5b5035919050565b6000602082840312156121c657600080fd5b8135611be181611dad565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810181811067ffffffffffffffff82111715612220576122206121d1565b60405250565b6060810181811067ffffffffffffffff82111715612220576122206121d1565b60a0810181811067ffffffffffffffff82111715612220576122206121d1565b601f19601f830116810181811067ffffffffffffffff8211171561228c5761228c6121d1565b6040525050565b60ff81168114611dc257600080fd5b61ffff81168114611dc257600080fd5b6000604082840312156122c457600080fd5b6040516122d081612200565b80915082356122de81612293565b815260208301356122ee816122a2565b6020919091015292915050565b60006060828403121561230d57600080fd5b60405161231981612200565b61232384846122b2565b8152604083013561233381611dad565b60208201529392505050565b6000808335601e1984360301811261235657600080fd5b83018035915067ffffffffffffffff82111561237157600080fd5b602001915060a081023603821315610d3957600080fd5b60038110611dc257600080fd5b600060a082840312156123a757600080fd5b60405160a0810181811067ffffffffffffffff821117156123ca576123ca6121d1565b60405282356123d881612388565b815260208301356123e881611dad565b602082015260408301356123fb81611dad565b6040820152606083013561240e81611dad565b60608201526080928301359281019290925250919050565b6000808335601e1984360301811261243d57600080fd5b83018035915067ffffffffffffffff82111561245857600080fd5b602001915036819003821315610d3957600080fd5b803561247881612293565b60ff168252602081013561248b816122a2565b61ffff81166020840152505050565b60408101611964828461246d565b80516124b381611dad565b919050565b600082601f8301126124c957600080fd5b815167ffffffffffffffff8111156124e3576124e36121d1565b6040516124fa6020601f19601f8501160182612266565b81815284602083860101111561250f57600080fd5b61204f8260208301602087016120fb565b60006020828403121561253257600080fd5b815167ffffffffffffffff8082111561254a57600080fd5b90830190818503608081121561255f57600080fd5b60405161256b81612226565b604082121561257957600080fd5b604051915061258782612200565b835161259281612293565b825260208401516125a2816122a2565b60208301528181526125b6604085016124a8565b602082015260608401519150828211156125cf57600080fd5b6125db878386016124b8565b60408201529695505050505050565b6000602082840312156125fc57600080fd5b8151611be181611dad565b6020808252818101839052600090604080840186845b8781101561269d57813561263081612388565b61263a8482611ee7565b508482013561264881611dad565b6001600160a01b0390811684870152828501359061266582611dad565b908116848601526060908382013561267c81611dad565b16908401526080828101359084015260a0928301929091019060010161261d565b5090979650505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126126de57600080fd5b9190910192915050565b6000808335601e198436030181126126ff57600080fd5b83018035915067ffffffffffffffff82111561271a57600080fd5b6020019150600581901b3603821315610d3957600080fd5b6000808335601e1984360301811261274957600080fd5b830160208101925035905067ffffffffffffffff81111561276957600080fd5b803603821315610d3957600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006060830182356127b481611dad565b6001600160a01b0380821686526020915081850135601e198636030181126127db57600080fd5b8501828101903567ffffffffffffffff8111156127f757600080fd5b8060051b360382131561280957600080fd5b6060888501529384905292600090608088015b8183101561284557853561282f81611dad565b841681529484019460019290920191840161281c565b6128526040890189612732565b9650945088810360408a0152612869818787612778565b9998505050505050505050565b6001600160a01b038316815260406020820152600061204f60408301846127a3565b600067ffffffffffffffff8211156128b2576128b26121d1565b5060051b60200190565b600082601f8301126128cd57600080fd5b815160206128da82612898565b604080516128e88382612266565b84815260a0948502870184019484820193508886111561290757600080fd5b8488015b868110156129875781818b0312156129235760008081fd5b835161292e81612246565b815161293981612388565b81528187015161294881611dad565b818801528185015161295981611dad565b8186015260608281015161296c81611dad565b9082015260808281015190820152855293850193810161290b565b509098975050505050505050565b6000602082840312156129a757600080fd5b815167ffffffffffffffff8111156129be57600080fd5b61204f848285016128bc565b8481526129da602082018561246d565b60a0606082015260006129f060a08301856127a3565b8281036080840152611d848185611f47565b600060208284031215612a1457600080fd5b81518015158114611be157600080fd5b6001600160a01b0384168152604060208201526000612170604083018486612778565b600060408284031215612a5957600080fd5b604051612a6581612200565b809150825167ffffffffffffffff80821115612a8057600080fd5b818501915085601f830112612a9457600080fd5b81516020612aa182612898565b604051612aae8282612266565b83815260059390931b8501820192828101915089841115612ace57600080fd5b948201945b83861015612af5578551612ae681611dad565b82529482019490820190612ad3565b86525086810151935082841115612b0b57600080fd5b612b17888589016128bc565b81860152505050505092915050565b60008060408385031215612b3957600080fd5b8251612b4481611dad565b602084015190925067ffffffffffffffff811115612b6157600080fd5b611eae85828601612a47565b868152612b7d602082018761246d565b60c060608201526000612b9460c083018688612778565b6001600160a01b038516608084015282810360a08401526128698185611f9a565b600060208284031215612bc757600080fd5b8135611be181612293565b600060208284031215612be457600080fd5b8135611be1816122a2565b60808101612bfd828561246d565b611be1604083018461246d565b600060408284031215612c1c57600080fd5b611be183836122b2565b600060208284031215612c3857600080fd5b8151611be181612388565b6001600160a01b038416815261ffff8316602082015260606040820152600061217060608301846127a3565b60008060408385031215612c8257600080fd5b825167ffffffffffffffff80821115612c9a57600080fd5b612ca6868387016124b8565b93506020850151915080821115612cbc57600080fd5b50611eae85828601612a47565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612cfb608083018461211f565b9695505050505050565b865160ff16815260208088015161ffff169082015260e081016001600160a01b03871660408301528560608301528460808301528360a083015260048310612d4f57612d4f611eb8565b8260c0830152979650505050505050565b6001600160a01b038316815260406020820152600061204f604083018461211f565b600060033d1115612d9b5760046000803e5060005160e01c5b90565b600060443d1015612dac5790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715612dfa57505050505090565b8285019150815181811115612e125750505050505090565b843d8701016020828501011115612e2c5750505050505090565b612e3b60208286010187612266565b509095945050505050565b602081526000611be1602083018461211f565b60006001600160a01b03808616835280851660208401525060606040830152612170606083018461211f565b6020808252825182820181905260009190848201906040850190845b81811015612ec65783516001600160a01b031683529284019291840191600101612ea1565b50909695505050505050565b858152612ee2602082018661246d565b60c060608201526000612ef860c08301866127a3565b8281036080840152612f0a8186611f9a565b905082810360a0840152612f1e818561211f565b9897505050505050505056fea2646970667358221220032ffe92286c595cc939d300c1c9f0f03a2cfa9e4de1929c44cb17635831d2b864736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract PluginRepoRegistry";
            readonly name: "_repoRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }];
        readonly name: "IPluginNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "currentAppliedSetupId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "appliedSetupId";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidAppliedSetupId";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "release";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint16";
                readonly name: "build";
                readonly type: "uint16";
            }];
            readonly internalType: "struct PluginRepo.Tag";
            readonly name: "currentVersionTag";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "release";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint16";
                readonly name: "build";
                readonly type: "uint16";
            }];
            readonly internalType: "struct PluginRepo.Tag";
            readonly name: "newVersionTag";
            readonly type: "tuple";
        }];
        readonly name: "InvalidUpdateVersion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PluginAlreadyInstalled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }];
        readonly name: "PluginNonupgradeable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "proxy";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "initData";
            readonly type: "bytes";
        }];
        readonly name: "PluginProxyUpgradeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PluginRepoNonexistent";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "preparedSetupId";
            readonly type: "bytes32";
        }];
        readonly name: "SetupAlreadyPrepared";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "SetupApplicationUnauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "preparedSetupId";
            readonly type: "bytes32";
        }];
        readonly name: "SetupNotApplicable";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "preparedSetupId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "appliedSetupId";
            readonly type: "bytes32";
        }];
        readonly name: "InstallationApplied";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "preparedSetupId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "contract PluginRepo";
            readonly name: "pluginSetupRepo";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "release";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint16";
                readonly name: "build";
                readonly type: "uint16";
            }];
            readonly indexed: false;
            readonly internalType: "struct PluginRepo.Tag";
            readonly name: "versionTag";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly name: "InstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "preparedSetupId";
            readonly type: "bytes32";
        }];
        readonly name: "UninstallationApplied";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "preparedSetupId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "contract PluginRepo";
            readonly name: "pluginSetupRepo";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "release";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint16";
                readonly name: "build";
                readonly type: "uint16";
            }];
            readonly indexed: false;
            readonly internalType: "struct PluginRepo.Tag";
            readonly name: "versionTag";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "setupPayload";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "permissions";
            readonly type: "tuple[]";
        }];
        readonly name: "UninstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "preparedSetupId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "appliedSetupId";
            readonly type: "bytes32";
        }];
        readonly name: "UpdateApplied";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "preparedSetupId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "contract PluginRepo";
            readonly name: "pluginSetupRepo";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "release";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint16";
                readonly name: "build";
                readonly type: "uint16";
            }];
            readonly indexed: false;
            readonly internalType: "struct PluginRepo.Tag";
            readonly name: "versionTag";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "setupPayload";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "initData";
            readonly type: "bytes";
        }];
        readonly name: "UpdatePrepared";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "APPLY_INSTALLATION_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "APPLY_UNINSTALLATION_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "APPLY_UPDATE_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint8";
                        readonly name: "release";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "uint16";
                        readonly name: "build";
                        readonly type: "uint16";
                    }];
                    readonly internalType: "struct PluginRepo.Tag";
                    readonly name: "versionTag";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "contract PluginRepo";
                    readonly name: "pluginSetupRepo";
                    readonly type: "address";
                }];
                readonly internalType: "struct PluginSetupRef";
                readonly name: "pluginSetupRef";
                readonly type: "tuple";
            }, {
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "bytes32";
                readonly name: "helpersHash";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PluginSetupProcessor.ApplyInstallationParams";
            readonly name: "_params";
            readonly type: "tuple";
        }];
        readonly name: "applyInstallation";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint8";
                        readonly name: "release";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "uint16";
                        readonly name: "build";
                        readonly type: "uint16";
                    }];
                    readonly internalType: "struct PluginRepo.Tag";
                    readonly name: "versionTag";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "contract PluginRepo";
                    readonly name: "pluginSetupRepo";
                    readonly type: "address";
                }];
                readonly internalType: "struct PluginSetupRef";
                readonly name: "pluginSetupRef";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct PluginSetupProcessor.ApplyUninstallationParams";
            readonly name: "_params";
            readonly type: "tuple";
        }];
        readonly name: "applyUninstallation";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint8";
                        readonly name: "release";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "uint16";
                        readonly name: "build";
                        readonly type: "uint16";
                    }];
                    readonly internalType: "struct PluginRepo.Tag";
                    readonly name: "versionTag";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "contract PluginRepo";
                    readonly name: "pluginSetupRepo";
                    readonly type: "address";
                }];
                readonly internalType: "struct PluginSetupRef";
                readonly name: "pluginSetupRef";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes";
                readonly name: "initData";
                readonly type: "bytes";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "bytes32";
                readonly name: "helpersHash";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PluginSetupProcessor.ApplyUpdateParams";
            readonly name: "_params";
            readonly type: "tuple";
        }];
        readonly name: "applyUpdate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint8";
                        readonly name: "release";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "uint16";
                        readonly name: "build";
                        readonly type: "uint16";
                    }];
                    readonly internalType: "struct PluginRepo.Tag";
                    readonly name: "versionTag";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "contract PluginRepo";
                    readonly name: "pluginSetupRepo";
                    readonly type: "address";
                }];
                readonly internalType: "struct PluginSetupRef";
                readonly name: "pluginSetupRef";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct PluginSetupProcessor.PrepareInstallationParams";
            readonly name: "_params";
            readonly type: "tuple";
        }];
        readonly name: "prepareInstallation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint8";
                        readonly name: "release";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "uint16";
                        readonly name: "build";
                        readonly type: "uint16";
                    }];
                    readonly internalType: "struct PluginRepo.Tag";
                    readonly name: "versionTag";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "contract PluginRepo";
                    readonly name: "pluginSetupRepo";
                    readonly type: "address";
                }];
                readonly internalType: "struct PluginSetupRef";
                readonly name: "pluginSetupRef";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "plugin";
                    readonly type: "address";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "currentHelpers";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "data";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct IPluginSetup.SetupPayload";
                readonly name: "setupPayload";
                readonly type: "tuple";
            }];
            readonly internalType: "struct PluginSetupProcessor.PrepareUninstallationParams";
            readonly name: "_params";
            readonly type: "tuple";
        }];
        readonly name: "prepareUninstallation";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "permissions";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint8";
                    readonly name: "release";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint16";
                    readonly name: "build";
                    readonly type: "uint16";
                }];
                readonly internalType: "struct PluginRepo.Tag";
                readonly name: "currentVersionTag";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint8";
                    readonly name: "release";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint16";
                    readonly name: "build";
                    readonly type: "uint16";
                }];
                readonly internalType: "struct PluginRepo.Tag";
                readonly name: "newVersionTag";
                readonly type: "tuple";
            }, {
                readonly internalType: "contract PluginRepo";
                readonly name: "pluginSetupRepo";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "plugin";
                    readonly type: "address";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "currentHelpers";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "data";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct IPluginSetup.SetupPayload";
                readonly name: "setupPayload";
                readonly type: "tuple";
            }];
            readonly internalType: "struct PluginSetupProcessor.PrepareUpdateParams";
            readonly name: "_params";
            readonly type: "tuple";
        }];
        readonly name: "prepareUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "initData";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "repoRegistry";
        readonly outputs: readonly [{
            readonly internalType: "contract PluginRepoRegistry";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "states";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "blockNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "currentAppliedSetupId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "pluginInstallationId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "preparedSetupId";
            readonly type: "bytes32";
        }];
        readonly name: "validatePreparedSetupId";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginSetupProcessorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginSetupProcessor$2;
}

type index$n_PluginSetupProcessor__factory = PluginSetupProcessor__factory;
declare const index$n_PluginSetupProcessor__factory: typeof PluginSetupProcessor__factory;
declare namespace index$n {
  export {
    index$n_PluginSetupProcessor__factory as PluginSetupProcessor__factory,
  };
}

declare namespace index$m {
  export {
    index$o as repo,
    index$n as setup,
  };
}

type ENSSubdomainRegistrarConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ENSSubdomainRegistrar__factory extends ContractFactory {
    constructor(...args: ENSSubdomainRegistrarConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ENSSubdomainRegistrar>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ENSSubdomainRegistrar;
    connect(signer: Signer): ENSSubdomainRegistrar__factory;
    static readonly bytecode = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e1565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100df576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611647610118600039600081816102de015281816103790152818161048001528181610516015261061101526116476000f3fe6080604052600436106100d25760003560e01c806352d1902d1161007f5780639848ba51116100595780639848ba511461020c578063af7b2fed14610240578063c66485b214610274578063d70754ec1461029457600080fd5b806352d1902d146101a95780636133f985146101cc57806389bb4145146101ec57600080fd5b80633f15457f116100b05780633f15457f146101585780634162169f146101785780634f1ef2861461019657600080fd5b806304f3bcec146100d75780632ae9c600146101145780633659cfe614610136575b600080fd5b3480156100e357600080fd5b5060cb546100f7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012057600080fd5b506101296102aa565b60405161010b9190611301565b34801561014257600080fd5b5061015661015136600461134a565b6102d4565b005b34801561016457600080fd5b5060c9546100f7906001600160a01b031681565b34801561018457600080fd5b506097546001600160a01b03166100f7565b6101566101a4366004611396565b610476565b3480156101b557600080fd5b506101be610604565b60405190815260200161010b565b3480156101d857600080fd5b506101566101e736600461145a565b6106c9565b3480156101f857600080fd5b5061015661020736600461149b565b610937565b34801561021857600080fd5b506101be7fbbdfd23f099d7ed9f535e0f97d2123efb1332b16e023b8359b3b879eaecd3c1481565b34801561024c57600080fd5b506101be7fa1fcba4efb1e94b7648f5e0504bfd39734aead5f17965d12705915d771c859ff81565b34801561028057600080fd5b5061015661028f36600461134a565b610c2d565b3480156102a057600080fd5b506101be60ca5481565b6102b26112e3565b5060408051606081018252600181526004602082015260009181019190915290565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103775760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103d27f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461044e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161036e565b61045781610cec565b6040805160008082526020820190925261047391839190610d25565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105145760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161036e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661056f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105eb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161036e565b6105f482610cec565b61060082826001610d25565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106a45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161036e565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600054610100900460ff16158080156106e95750600054600160ff909116105b806107035750303b158015610703575060005460ff166001145b6107755760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161036e565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156107b6576000805461ff0019166101001790555b6107bf84610eca565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851690811790915560ca8390556040517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810184905260009190630178b8bf90602401602060405180830381865afa158015610846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086a91906114cb565b90506001600160a01b0381166108be576040517f1ae12f8a000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b038216602482015260440161036e565b60cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790558015610931576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6097547fbbdfd23f099d7ed9f535e0f97d2123efb1332b16e023b8359b3b879eaecd3c1490610975906001600160a01b031630335b84600036610f76565b600060ca5484604051602001610995929190918252602082015260400190565b60408051808303601f1901815290829052805160209091012060c9547f02571be3000000000000000000000000000000000000000000000000000000008352600483018290529092506000916001600160a01b03909116906302571be390602401602060405180830381865afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3791906114cb565b90506001600160a01b03811615610a8c576040517f01f95aba000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b038216602482015260440161036e565b60c95460ca546040517f06ab59230000000000000000000000000000000000000000000000000000000081526004810191909152602481018790523060448201526001600160a01b03909116906306ab5923906064016020604051808303816000875af1158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2591906114e8565b5060c95460cb546040517f1896f70a000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b039182166024820152911690631896f70a90604401600060405180830381600087803b158015610b8f57600080fd5b505af1158015610ba3573d6000803e3d6000fd5b505060cb546040517fd5fa2b00000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b038881166024830152909116925063d5fa2b009150604401600060405180830381600087803b158015610c0e57600080fd5b505af1158015610c22573d6000803e3d6000fd5b505050505050505050565b6097547fbbdfd23f099d7ed9f535e0f97d2123efb1332b16e023b8359b3b879eaecd3c1490610c66906001600160a01b0316303361096c565b6001600160a01b038216610cbc5760ca546040517f1ae12f8a00000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b038316602482015260440161036e565b5060cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6097547fa1fcba4efb1e94b7648f5e0504bfd39734aead5f17965d12705915d771c859ff90610600906001600160a01b0316303361096c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d5d57610d5883611064565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610db7575060408051601f3d908101601f19168201909252610db4918101906114e8565b60015b610e295760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161036e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610ebe5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161036e565b50610d5883838361112f565b600054610100900460ff16610f475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161036e565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610fc39088908890889088908890600401611501565b602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190611555565b61105c576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161036e565b505050505050565b6001600160a01b0381163b6110e15760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161036e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61113883611154565b6000825111806111455750805b15610d58576109318383611194565b61115d81611064565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606111b983836040518060600160405280602781526020016115eb602791396111c0565b9392505050565b6060600080856001600160a01b0316856040516111dd919061159b565b600060405180830381855af49150503d8060008114611218576040519150601f19603f3d011682016040523d82523d6000602084013e61121d565b606091505b509150915061122e86838387611238565b9695505050505050565b606083156112a75782516000036112a0576001600160a01b0385163b6112a05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161036e565b50816112b1565b6112b183836112b9565b949350505050565b8151156112c95781518083602001fd5b8060405162461bcd60e51b815260040161036e91906115b7565b60405180606001604052806003906020820280368337509192915050565b60608101818360005b600381101561132c57815160ff1683526020928301929091019060010161130a565b50505092915050565b6001600160a01b038116811461047357600080fd5b60006020828403121561135c57600080fd5b81356111b981611335565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156113a957600080fd5b82356113b481611335565b9150602083013567ffffffffffffffff808211156113d157600080fd5b818501915085601f8301126113e557600080fd5b8135818111156113f7576113f7611367565b604051601f8201601f19908116603f0116810190838211818310171561141f5761141f611367565b8160405282815288602084870101111561143857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060006060848603121561146f57600080fd5b833561147a81611335565b9250602084013561148a81611335565b929592945050506040919091013590565b600080604083850312156114ae57600080fd5b8235915060208301356114c081611335565b809150509250929050565b6000602082840312156114dd57600080fd5b81516111b981611335565b6000602082840312156114fa57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561156757600080fd5b815180151581146111b957600080fd5b60005b8381101561159257818101518382015260200161157a565b50506000910152565b600082516115ad818460208701611577565b9190910192915050565b60208152600082518060208401526115d6816040850160208701611577565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201c3f177e4101f25cb18c5d08ec25430c81cf564627ef41718af89244c81a42d264736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "subnode";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "nodeOwner";
            readonly type: "address";
        }];
        readonly name: "AlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "DaoUnauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "node";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "resolver";
            readonly type: "address";
        }];
        readonly name: "InvalidResolver";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "REGISTER_ENS_SUBDOMAIN_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_REGISTRAR_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dao";
        readonly outputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "ens";
        readonly outputs: readonly [{
            readonly internalType: "contract ENS";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "_managingDao";
            readonly type: "address";
        }, {
            readonly internalType: "contract ENS";
            readonly name: "_ens";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_node";
            readonly type: "bytes32";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "node";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_label";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_targetAddress";
            readonly type: "address";
        }];
        readonly name: "registerSubnode";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "resolver";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_resolver";
            readonly type: "address";
        }];
        readonly name: "setDefaultResolver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): ENSSubdomainRegistrarInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ENSSubdomainRegistrar;
}

type index$l_ENSSubdomainRegistrar__factory = ENSSubdomainRegistrar__factory;
declare const index$l_ENSSubdomainRegistrar__factory: typeof ENSSubdomainRegistrar__factory;
declare namespace index$l {
  export {
    index$l_ENSSubdomainRegistrar__factory as ENSSubdomainRegistrar__factory,
  };
}

declare class InterfaceBasedRegistry__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractAlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractERC165SupportInvalid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractInterfaceInvalid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "DaoUnauthorized";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_REGISTRY_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dao";
        readonly outputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "entries";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetInterfaceId";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): InterfaceBasedRegistryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): InterfaceBasedRegistry;
}

type index$k_InterfaceBasedRegistry__factory = InterfaceBasedRegistry__factory;
declare const index$k_InterfaceBasedRegistry__factory: typeof InterfaceBasedRegistry__factory;
declare namespace index$k {
  export {
    index$l as ens,
    index$k_InterfaceBasedRegistry__factory as InterfaceBasedRegistry__factory,
  };
}

declare namespace index$j {
  export {
    index$q as dao,
    index$m as plugin,
    index$k as utils,
  };
}

type CallbackHandlerMockHelperConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class CallbackHandlerMockHelper__factory extends ContractFactory {
    constructor(...args: CallbackHandlerMockHelperConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<CallbackHandlerMockHelper>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): CallbackHandlerMockHelper;
    connect(signer: Signer): CallbackHandlerMockHelper__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610408806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806373be85531461003b578063fd292c5e14610083575b600080fd5b61004e610049366004610271565b6100f4565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b6100f2610091366004610333565b7fffffffff000000000000000000000000000000000000000000000000000000008216600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001660e083901c1790555050565b005b6000806101018484610109565b949350505050565b7fffffffff00000000000000000000000000000000000000000000000000000000808316600090815260208190526040812054909160e09190911b9081166101ad576040517f4aa318c30000000000000000000000000000000000000000000000000000000081527fffffffff0000000000000000000000000000000000000000000000000000000080861660048301528216602482015260440160405180910390fd5b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f4792cb6e46e49876374bea490ba23274bacea6b84c216a64f47abab54027589b33856040516101fe929190610366565b60405180910390a29392505050565b80357fffffffff000000000000000000000000000000000000000000000000000000008116811461023d57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561028457600080fd5b61028d8361020d565b9150602083013567ffffffffffffffff808211156102aa57600080fd5b818501915085601f8301126102be57600080fd5b8135818111156102d0576102d0610242565b604051601f8201601f19908116603f011681019083821181831017156102f8576102f8610242565b8160405282815288602084870101111561031157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561034657600080fd5b61034f8361020d565b915061035d6020840161020d565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff8316815260006020604081840152835180604085015260005b818110156103b057858101830151858201606001528201610394565b506000606082860101526060601f19601f83011685010192505050939250505056fea26469706673582212200aecc273bee30ef4a6034f0ce5ecc5ae0d8af1291944f5a7c4a6d8b5e19ea4b664736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "callbackSelector";
            readonly type: "bytes4";
        }, {
            readonly internalType: "bytes4";
            readonly name: "magicNumber";
            readonly type: "bytes4";
        }];
        readonly name: "UnknownCallback";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes4";
            readonly name: "sig";
            readonly type: "bytes4";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "CallbackReceived";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "selector";
            readonly type: "bytes4";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "handleCallback";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "selector";
            readonly type: "bytes4";
        }, {
            readonly internalType: "bytes4";
            readonly name: "magicNumber";
            readonly type: "bytes4";
        }];
        readonly name: "registerCallback";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): CallbackHandlerMockHelperInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): CallbackHandlerMockHelper;
}

type index$i_CallbackHandlerMockHelper__factory = CallbackHandlerMockHelper__factory;
declare const index$i_CallbackHandlerMockHelper__factory: typeof CallbackHandlerMockHelper__factory;
declare namespace index$i {
  export {
    index$i_CallbackHandlerMockHelper__factory as CallbackHandlerMockHelper__factory,
  };
}

type GasConsumerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class GasConsumer__factory extends ContractFactory {
    constructor(...args: GasConsumerConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<GasConsumer>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): GasConsumer;
    connect(signer: Signer): GasConsumer__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610163806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636057361d1461003b578063a329e8de1461006d575b600080fd5b61005b6100493660046100b5565b60006020819052908152604090205481565b60405190815260200160405180910390f35b61008061007b3660046100b5565b610082565b005b60005b818110156100b157600081815260208190526040902060019055806100a9816100ce565b915050610085565b5050565b6000602082840312156100c757600080fd5b5035919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610126577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220322fd5941da66768ed0365ae56503edd38c6b3fe0e94744c7692d2853b1c52df64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "count";
            readonly type: "uint256";
        }];
        readonly name: "consumeGas";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "store";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): GasConsumerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): GasConsumer;
}

type index$h_GasConsumer__factory = GasConsumer__factory;
declare const index$h_GasConsumer__factory: typeof GasConsumer__factory;
declare namespace index$h {
  export {
    index$h_GasConsumer__factory as GasConsumer__factory,
  };
}

type ActionExecuteConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ActionExecute__factory extends ContractFactory {
    constructor(...args: ActionExecuteConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ActionExecute>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ActionExecute;
    connect(signer: Signer): ActionExecute__factory;
    static readonly bytecode = "0x6080604052600a60005534801561001557600080fd5b50610118806100256000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636ca1f933146037578063a9cc471814605c575b600080fd5b604a604236600460ca565b600081905590565b60405190815260200160405180910390f35b60626064565b005b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f416374696f6e457865637574653a526576657274000000000000000000000000604482015260640160405180910390fd5b60006020828403121560db57600080fd5b503591905056fea2646970667358221220b07ab94114889b4a50248c56c1ef3afeeba53a81eb3e8c369325f3de68d3598964736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "fail";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newNum";
            readonly type: "uint256";
        }];
        readonly name: "setTest";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ActionExecuteInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ActionExecute;
}

type index$g_ActionExecute__factory = ActionExecute__factory;
declare const index$g_ActionExecute__factory: typeof ActionExecute__factory;
declare namespace index$g {
  export {
    index$i as callbackHandlerHelperMockSol,
    index$h as gasConsumerHelperSol,
    index$g_ActionExecute__factory as ActionExecute__factory,
  };
}

type PermissionConditionMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PermissionConditionMock__factory extends ContractFactory {
    constructor(...args: PermissionConditionMockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PermissionConditionMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PermissionConditionMock;
    connect(signer: Signer): PermissionConditionMock__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506000805460ff191660011790556104678061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80632ae9c600116100505780632ae9c600146100b057806385bb7d69146100c5578063f01b7dd2146100d257600080fd5b806301ffc9a71461006c5780632675fdd014610094575b600080fd5b61007f61007a366004610240565b610113565b60405190151581526020015b60405180910390f35b61007f6100a23660046102e1565b60005460ff16949350505050565b6100b86101f8565b60405161008b91906103db565b60005461007f9060ff1681565b6101116100e036600461040f565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b005b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f2675fdd00000000000000000000000000000000000000000000000000000000014806101a657507fffffffff0000000000000000000000000000000000000000000000000000000082167f2ae9c60000000000000000000000000000000000000000000000000000000000145b806101f257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b610200610222565b5060408051606081018252600181526004602082015260009181019190915290565b60405180606001604052806003906020820280368337509192915050565b60006020828403121561025257600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461028257600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102ad57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156102f757600080fd5b61030085610289565b935061030e60208601610289565b925060408501359150606085013567ffffffffffffffff8082111561033257600080fd5b818701915087601f83011261034657600080fd5b813581811115610358576103586102b2565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561039e5761039e6102b2565b816040528281528a60208487010111156103b757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60608101818360005b600381101561040657815160ff168352602092830192909101906001016103e4565b50505092915050565b60006020828403121561042157600080fd5b8135801515811461028257600080fdfea264697066735822122013709a910f0e60694397d82f323bdd73bd4a6cf59d8882840cf27759da34a60364736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "answer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "isGranted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_answer";
            readonly type: "bool";
        }];
        readonly name: "setAnswer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PermissionConditionMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PermissionConditionMock;
}

type PermissionManagerTestConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PermissionManagerTest__factory extends ContractFactory {
    constructor(...args: PermissionManagerTestConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PermissionManagerTest>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PermissionManagerTest;
    connect(signer: Signer): PermissionManagerTest__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50611741806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a84d9ca21161008c578063d714ccc411610066578063d714ccc41461021c578063d96054c41461022f578063e978afe514610242578063fdef91061461025557600080fd5b8063a84d9ca2146101cf578063c9dbc2a4146101f6578063d68bad2c1461020957600080fd5b806322844d04116100c857806322844d04146101515780632675fdd0146101645780637f23781014610187578063a1b860d2146101a857600080fd5b806309cccd25146100ef57806309e56b141461011557806319ab453c1461013c575b600080fd5b6101026100fd36600461127f565b610268565b6040519081526020015b60405180910390f35b6101027f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b61014f61014a3660046112c0565b6102d1565b005b61014f61015f3660046112e4565b610430565b6101776101723660046113b3565b61054c565b604051901515815260200161010c565b6001600160a01b035b6040516001600160a01b03909116815260200161010c565b6101027f1feca900beeca1692fadadc353e0d151d6acd1aeb7ed5ae147065dcad6c121d981565b6101027f08c316d110e70b0d53b990aa7a80d0aef9103568f6768c8204c82cb3ddddd67f81565b61014f610204366004611477565b610744565b61014f61021736600461127f565b61077a565b61019061022a36600461127f565b6107b5565b61014f61023d36600461127f565b610848565b61014f6102503660046114ca565b61087d565b6101776102633660046113b3565b6109c9565b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000905b949350505050565b600054610100900460ff16158080156102f15750600054600160ff909116105b8061030b5750303b15801561030b575060005460ff166001145b61039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156103dd576000805461ff0019166101001790555b6103e6826109e0565b801561042c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361045a81610a83565b60005b828110156105455760008484838181106104795761047961153f565b90506060020180360381019061048f9190611569565b90506000815160028111156104a6576104a66115d2565b036104c3576104be8682602001518360400151610b0b565b61053c565b6001815160028111156104d8576104d86115d2565b036104f0576104be8682602001518360400151610cd7565b600281516002811115610505576105056115d2565b0361053c576040517fd4d3bef700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060010161045d565b5050505050565b600080600160006105be888888604051692822a926a4a9a9a4a7a760b11b60208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b0316905060011981016105ed5760019150506102c9565b6001600160a01b03811615610611576106098187878787610dcb565b9150506102c9565b5060408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19602a8301819052606089901b16603e830152605280830187905283518084039091018152607290920183528151918101919091206000908152600190915220546001600160a01b031660011981016106975760019150506102c9565b6001600160a01b038116156106b3576106098187878787610dcb565b5060408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606088901b8116602a840152603e830152605280830187905283518084039091018152607290920183528151918101919091206000908152600190915220546001600160a01b03168015610738576106098187878787610dcb565b50600095945050505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361076e81610a83565b61054585858585610e74565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336107a481610a83565b6107af848484610b0b565b50505050565b600060016000610826868686604051692822a926a4a9a9a4a7a760b11b60208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b0316949350505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361087281610a83565b6107af848484610cd7565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336108a781610a83565b60005b828110156107af5760008484838181106108c6576108c661153f565b905060a002018036038101906108dc91906115e8565b90506000815160028111156108f3576108f36115d2565b036109595760608101516001600160a01b03161561093d576040517fd4d3bef700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610954816020015182604001518360800151610b0b565b6109c0565b60018151600281111561096e5761096e6115d2565b0361098a57610954816020015182604001518360800151610cd7565b60028151600281111561099f5761099f6115d2565b036109c0576109c08160200151826040015183608001518460600151610e74565b506001016108aa565b60006109d78585858561054c565b95945050505050565b600054610100900460ff16610a77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610393565b610a80816111ea565b50565b610ac63033836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061054c92505050565b610a80576040517f1e09743f00000000000000000000000000000000000000000000000000000000815230600482015233602482015260448101829052606401610393565b7fffffffffffffffffffffffff00000000000000000000000000000000000000016001600160a01b03841601610b54576040516324159e5b60e01b815260040160405180910390fd5b7fffffffffffffffffffffffff00000000000000000000000000000000000000016001600160a01b03831601610bd4577f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33811480610bb65750610bb681611215565b15610bd4576040516324159e5b60e01b815260040160405180910390fd5b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000906000818152600160205260409020549091506001600160a01b03168061054557600082815260016020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916600290811790915582516001600160a01b0389811682529281019190915290861691339186917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a45050505050565b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000906000818152600160205260409020549091506001600160a01b0316156107af57600081815260016020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b6040517f2675fdd00000000000000000000000000000000000000000000000000000000081526000906001600160a01b03871690632675fdd090610e19908890889088908890600401611677565b602060405180830381865afa925050508015610e52575060408051601f3d908101601f19168201909252610e4f918101906116e9565b60015b15610738578015610e675760019150506109d7565b5050600095945050505050565b806001600160a01b0381163b610ec1576040517f48359af60000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610393565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f2675fdd00000000000000000000000000000000000000000000000000000000060048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6291906116e9565b610fa3576040517fdbb048620000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610393565b6001600160a01b03858116148015610fc357506001600160a01b03848116145b15610ffa576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03858116148061101957506001600160a01b03848116145b1561106e577f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33831480611050575061105083611215565b1561106e576040516324159e5b60e01b815260040160405180910390fd5b60408051692822a926a4a9a9a4a7a760b11b6020808301919091526bffffffffffffffffffffffff19606088811b8216602a85015289901b16603e830152605280830187905283518084039091018152607290920190925280519101206000906000818152600160205260409020549091506001600160a01b03168061116c57600082815260016020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925583518b8316815292830152881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a46111e1565b826001600160a01b0316816001600160a01b0316146111e1576040517f0b98789e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301526044820187905280831660648301528416608482015260a401610393565b50505050505050565b610a8030827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610b0b565b60007f08c316d110e70b0d53b990aa7a80d0aef9103568f6768c8204c82cb3ddddd67f82148061126457507f1feca900beeca1692fadadc353e0d151d6acd1aeb7ed5ae147065dcad6c121d982145b92915050565b6001600160a01b0381168114610a8057600080fd5b60008060006060848603121561129457600080fd5b833561129f8161126a565b925060208401356112af8161126a565b929592945050506040919091013590565b6000602082840312156112d257600080fd5b81356112dd8161126a565b9392505050565b6000806000604084860312156112f957600080fd5b83356113048161126a565b9250602084013567ffffffffffffffff8082111561132157600080fd5b818601915086601f83011261133557600080fd5b81358181111561134457600080fd5b87602060608302850101111561135957600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156113ab576113ab61136c565b604052919050565b600080600080608085870312156113c957600080fd5b84356113d48161126a565b93506020858101356113e58161126a565b935060408601359250606086013567ffffffffffffffff8082111561140957600080fd5b818801915088601f83011261141d57600080fd5b81358181111561142f5761142f61136c565b61144184601f19601f84011601611382565b9150808252898482850101111561145757600080fd5b808484018584013760008482840101525080935050505092959194509250565b6000806000806080858703121561148d57600080fd5b84356114988161126a565b935060208501356114a88161126a565b92506040850135915060608501356114bf8161126a565b939692955090935050565b600080602083850312156114dd57600080fd5b823567ffffffffffffffff808211156114f557600080fd5b818501915085601f83011261150957600080fd5b81358181111561151857600080fd5b86602060a08302850101111561152d57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052603260045260246000fd5b80356003811061156457600080fd5b919050565b60006060828403121561157b57600080fd5b6040516060810181811067ffffffffffffffff8211171561159e5761159e61136c565b6040526115aa83611555565b815260208301356115ba8161126a565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b600060a082840312156115fa57600080fd5b60405160a0810181811067ffffffffffffffff8211171561161d5761161d61136c565b60405261162983611555565b815260208301356116398161126a565b6020820152604083013561164c8161126a565b6040820152606083013561165f8161126a565b60608201526080928301359281019290925250919050565b60006001600160a01b038087168352602081871681850152856040850152608060608501528451915081608085015260005b828110156116c55785810182015185820160a0015281016116a9565b5050600060a0828501015260a0601f19601f83011684010191505095945050505050565b6000602082840312156116fb57600080fd5b815180151581146112dd57600080fdfea26469706673582212204975b96d2d091231c8781d15c461ff4cd73cd353f05d4cbb97a0f404f62e0ae164736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AnyAddressDisallowedForWhoAndWhere";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IPermissionCondition";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "ConditionInterfaceNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IPermissionCondition";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "ConditionNotAContract";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GrantWithConditionNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "currentCondition";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "newCondition";
            readonly type: "address";
        }];
        readonly name: "PermissionAlreadyGrantedForDifferentCondition";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PermissionsForAnyAddressDisallowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "Unauthorized";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "here";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "condition";
            readonly type: "address";
        }];
        readonly name: "Granted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "here";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }];
        readonly name: "Revoked";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "ROOT_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "TEST_PERMISSION_1_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "TEST_PERMISSION_2_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "_items";
            readonly type: "tuple[]";
        }];
        readonly name: "applyMultiTargetPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.SingleTargetPermission[]";
            readonly name: "items";
            readonly type: "tuple[]";
        }];
        readonly name: "applySingleTargetPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getAnyAddr";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "getAuthPermission";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "getPermissionHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "grant";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "contract IPermissionCondition";
            readonly name: "_condition";
            readonly type: "address";
        }];
        readonly name: "grantWithCondition";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "hasPermission";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }];
        readonly name: "init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "isGranted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "revoke";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): PermissionManagerTestInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PermissionManagerTest;
}

type index$f_PermissionConditionMock__factory = PermissionConditionMock__factory;
declare const index$f_PermissionConditionMock__factory: typeof PermissionConditionMock__factory;
type index$f_PermissionManagerTest__factory = PermissionManagerTest__factory;
declare const index$f_PermissionManagerTest__factory: typeof PermissionManagerTest__factory;
declare namespace index$f {
  export {
    index$f_PermissionConditionMock__factory as PermissionConditionMock__factory,
    index$f_PermissionManagerTest__factory as PermissionManagerTest__factory,
  };
}

type PluginCloneableV1MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginCloneableV1Mock__factory extends ContractFactory {
    constructor(...args: PluginCloneableV1MockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginCloneableV1Mock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginCloneableV1Mock;
    connect(signer: Signer): PluginCloneableV1Mock__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610c81806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638cb7505911610076578063c4d66de81161005b578063c4d66de81461017d578063c98425ee14610190578063dd63c06f146101a557600080fd5b80638cb7505914610141578063bb225da21461016857600080fd5b80634162169f116100a75780634162169f1461010057806341de68301461011b5780636accab8c1461012a57600080fd5b806301ffc9a7146100c35780632ae9c600146100eb575b600080fd5b6100d66100d1366004610a08565b6101ad565b60405190151581526020015b60405180910390f35b6100f3610265565b6040516100e29190610a32565b6065546040516001600160a01b0390911681526020016100e2565b60016040516100e29190610a95565b61013360985481565b6040519081526020016100e2565b6101337f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f781565b61017b610176366004610aaf565b61028f565b005b61017b61018b366004610adc565b6102e7565b610198610430565b6040516100e29190610af9565b6101986104a8565b60006001600160e01b031982167f41de683000000000000000000000000000000000000000000000000000000000148061021057506001600160e01b031982167f2ae9c60000000000000000000000000000000000000000000000000000000000145b8061024457506001600160e01b031982167fafc5b82300000000000000000000000000000000000000000000000000000000145b8061025f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61026d6109ea565b5060408051606081018252600181526004602082015260009181019190915290565b6065547f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f7906102cc906001600160a01b0316303384600036610569565b6102e36102de36849003840184610b2d565b610657565b5050565b600054610100900460ff16158080156103075750600054600160ff909116105b806103215750303b158015610321575060005460ff166001145b6103985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156103d9576000805461ff0019166101001790555b6103e2826107b6565b600160985580156102e3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b604080518082019091526000808252602082015260408051808201909152609780546001600160a01b0381168352602083019074010000000000000000000000000000000000000000900460ff16600181111561048f5761048f610a66565b60018111156104a0576104a0610a66565b905250919050565b604080518082019091526000808252602082015260408051808201909152609780546001600160a01b03811683526000929190602083019074010000000000000000000000000000000000000000900460ff16600181111561050c5761050c610a66565b600181111561051d5761051d610a66565b90525080519091506001600160a01b031661056457604051806040016040528061054f6065546001600160a01b031690565b6001600160a01b031681526020016000905290505b919050565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906105b69088908890889088908890600401610bb7565b602060405180830381865afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f79190610c29565b61064f576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380881660048301528087166024830152851660448201526064810184905260840161038f565b505050505050565b805161068c906001600160a01b03167f549ea75a0000000000000000000000000000000000000000000000000000000061083f565b80156106ad57506001816020015160018111156106ab576106ab610a66565b145b156106e657806040517f266d0fb900000000000000000000000000000000000000000000000000000000815260040161038f9190610af9565b8051609780546001600160a01b039092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560208401518493909183917fffffffffffffffffffffff00000000000000000000000000000000000000000016177401000000000000000000000000000000000000000083600181111561077457610774610a66565b02179055509050507f88e879ae0d71faf3aa708f2978daccb99b95243615dc104835b8c5a21c884ae6816040516107ab9190610af9565b60405180910390a150565b600054610100900460ff166108335760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161038f565b61083c81610862565b50565b600061084a83610919565b801561085b575061085b838361094c565b9392505050565b600054610100900460ff166108df5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161038f565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600061092c826301ffc9a760e01b61094c565b801561025f5750610945826001600160e01b031961094c565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156109d3575060208210155b80156109df5750600081115b979650505050505050565b60405180606001604052806003906020820280368337509192915050565b600060208284031215610a1a57600080fd5b81356001600160e01b03198116811461085b57600080fd5b60608101818360005b6003811015610a5d57815160ff16835260209283019290910190600101610a3b565b50505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310610aa957610aa9610a66565b91905290565b600060408284031215610ac157600080fd5b50919050565b6001600160a01b038116811461083c57600080fd5b600060208284031215610aee57600080fd5b813561085b81610ac7565b81516001600160a01b031681526020820151604082019060028110610b2057610b20610a66565b8060208401525092915050565b600060408284031215610b3f57600080fd5b6040516040810181811067ffffffffffffffff82111715610b89577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528235610b9781610ac7565b8152602083013560028110610bab57600080fd5b60208201529392505050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011683010190509695505050505050565b600060208284031215610c3b57600080fd5b8151801515811461085b57600080fdfea2646970667358221220c4015ee0de95e05dde334e2a8a8ababd0390d7b57ea9b4016b1a38b869700d9164736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "DaoUnauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DelegateCallFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "InvalidTargetConfig";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "newTargetConfig";
            readonly type: "tuple";
        }];
        readonly name: "TargetSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "SET_TARGET_CONFIG_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dao";
        readonly outputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCurrentTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "_dao";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pluginType";
        readonly outputs: readonly [{
            readonly internalType: "enum IPlugin.PluginType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "_targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "setTargetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state1";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginCloneableV1MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginCloneableV1Mock;
}

type PluginCloneableV1MockBadConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginCloneableV1MockBad__factory extends ContractFactory {
    constructor(...args: PluginCloneableV1MockBadConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginCloneableV1MockBad>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginCloneableV1MockBad;
    connect(signer: Signer): PluginCloneableV1MockBad__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5060d78061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636accab8c146037578063c4d66de8146051575b600080fd5b603f60005481565b60405190815260200160405180910390f35b6064605c3660046066565b506001600055565b005b600060208284031215607757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609a57600080fd5b939250505056fea26469706673582212206e6dbf7a6ad4bd4308cdb01b53e26233a643d360e0b9df33173716e0744ec91164736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "_dao";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state1";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginCloneableV1MockBadInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginCloneableV1MockBad;
}

type PluginCloneableV2MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginCloneableV2Mock__factory extends ContractFactory {
    constructor(...args: PluginCloneableV2MockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginCloneableV2Mock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginCloneableV2Mock;
    connect(signer: Signer): PluginCloneableV2Mock__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610c9a806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638cb7505911610081578063c98425ee1161005b578063c98425ee1461019b578063dd63c06f146101b0578063efe51cca146101b857600080fd5b80638cb750591461014c578063bb225da214610173578063c4d66de81461018857600080fd5b80634162169f116100b25780634162169f1461010b57806341de6830146101265780636accab8c1461013557600080fd5b806301ffc9a7146100ce5780632ae9c600146100f6575b600080fd5b6100e16100dc366004610a21565b6101c1565b60405190151581526020015b60405180910390f35b6100fe610279565b6040516100ed9190610a4b565b6065546040516001600160a01b0390911681526020016100ed565b60016040516100ed9190610aae565b61013e60985481565b6040519081526020016100ed565b61013e7f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f781565b610186610181366004610ac8565b6102a3565b005b610186610196366004610af5565b6102fb565b6101a3610449565b6040516100ed9190610b12565b6101a36104c1565b61013e60995481565b60006001600160e01b031982167f41de683000000000000000000000000000000000000000000000000000000000148061022457506001600160e01b031982167f2ae9c60000000000000000000000000000000000000000000000000000000000145b8061025857506001600160e01b031982167fafc5b82300000000000000000000000000000000000000000000000000000000145b8061027357506301ffc9a760e01b6001600160e01b03198316145b92915050565b610281610a03565b5060408051606081018252600181526004602082015260009181019190915290565b6065547f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f7906102e0906001600160a01b0316303384600036610582565b6102f76102f236849003840184610b46565b610670565b5050565b600054610100900460ff161580801561031b5750600054600160ff909116105b806103355750303b158015610335575060005460ff166001145b6103ac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156103ed576000805461ff0019166101001790555b6103f6826107cf565b6001609855600260995580156102f7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b604080518082019091526000808252602082015260408051808201909152609780546001600160a01b0381168352602083019074010000000000000000000000000000000000000000900460ff1660018111156104a8576104a8610a7f565b60018111156104b9576104b9610a7f565b905250919050565b604080518082019091526000808252602082015260408051808201909152609780546001600160a01b03811683526000929190602083019074010000000000000000000000000000000000000000900460ff16600181111561052557610525610a7f565b600181111561053657610536610a7f565b90525080519091506001600160a01b031661057d5760405180604001604052806105686065546001600160a01b031690565b6001600160a01b031681526020016000905290505b919050565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906105cf9088908890889088908890600401610bd0565b602060405180830381865afa1580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106109190610c42565b610668576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016103a3565b505050505050565b80516106a5906001600160a01b03167f549ea75a00000000000000000000000000000000000000000000000000000000610858565b80156106c657506001816020015160018111156106c4576106c4610a7f565b145b156106ff57806040517f266d0fb90000000000000000000000000000000000000000000000000000000081526004016103a39190610b12565b8051609780546001600160a01b039092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560208401518493909183917fffffffffffffffffffffff00000000000000000000000000000000000000000016177401000000000000000000000000000000000000000083600181111561078d5761078d610a7f565b02179055509050507f88e879ae0d71faf3aa708f2978daccb99b95243615dc104835b8c5a21c884ae6816040516107c49190610b12565b60405180910390a150565b600054610100900460ff1661084c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103a3565b6108558161087b565b50565b600061086383610932565b801561087457506108748383610965565b9392505050565b600054610100900460ff166108f85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103a3565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000610945826301ffc9a760e01b610965565b8015610273575061095e826001600160e01b0319610965565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156109ec575060208210155b80156109f85750600081115b979650505050505050565b60405180606001604052806003906020820280368337509192915050565b600060208284031215610a3357600080fd5b81356001600160e01b03198116811461087457600080fd5b60608101818360005b6003811015610a7657815160ff16835260209283019290910190600101610a54565b50505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310610ac257610ac2610a7f565b91905290565b600060408284031215610ada57600080fd5b50919050565b6001600160a01b038116811461085557600080fd5b600060208284031215610b0757600080fd5b813561087481610ae0565b81516001600160a01b031681526020820151604082019060028110610b3957610b39610a7f565b8060208401525092915050565b600060408284031215610b5857600080fd5b6040516040810181811067ffffffffffffffff82111715610ba2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528235610bb081610ae0565b8152602083013560028110610bc457600080fd5b60208201529392505050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011683010190509695505050505050565b600060208284031215610c5457600080fd5b8151801515811461087457600080fdfea26469706673582212207ca9d6f6ac59b7bf877dda59cce1d282bd3cebbbc93a5fd8dbf971a6d6a1998864736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "DaoUnauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DelegateCallFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "InvalidTargetConfig";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "newTargetConfig";
            readonly type: "tuple";
        }];
        readonly name: "TargetSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "SET_TARGET_CONFIG_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dao";
        readonly outputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCurrentTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "_dao";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pluginType";
        readonly outputs: readonly [{
            readonly internalType: "enum IPlugin.PluginType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "_targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "setTargetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state1";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state2";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginCloneableV2MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginCloneableV2Mock;
}

type index$e_PluginCloneableV1Mock__factory = PluginCloneableV1Mock__factory;
declare const index$e_PluginCloneableV1Mock__factory: typeof PluginCloneableV1Mock__factory;
type index$e_PluginCloneableV1MockBad__factory = PluginCloneableV1MockBad__factory;
declare const index$e_PluginCloneableV1MockBad__factory: typeof PluginCloneableV1MockBad__factory;
type index$e_PluginCloneableV2Mock__factory = PluginCloneableV2Mock__factory;
declare const index$e_PluginCloneableV2Mock__factory: typeof PluginCloneableV2Mock__factory;
declare namespace index$e {
  export {
    index$e_PluginCloneableV1Mock__factory as PluginCloneableV1Mock__factory,
    index$e_PluginCloneableV1MockBad__factory as PluginCloneableV1MockBad__factory,
    index$e_PluginCloneableV2Mock__factory as PluginCloneableV2Mock__factory,
  };
}

type PluginCloneableSetupV1MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginCloneableSetupV1Mock__factory extends ContractFactory {
    constructor(...args: PluginCloneableSetupV1MockConstructorParams);
    deploy(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginCloneableSetupV1Mock>;
    getDeployTransaction(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginCloneableSetupV1Mock;
    connect(signer: Signer): PluginCloneableSetupV1Mock__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b5060405161147b38038061147b83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516113ea6100916000396000818160d2015261031501526113ea6000f3fe60806040523480156200001157600080fd5b50600436106200007b5760003560e01c80639cb0a12411620000565780639cb0a12414620000fd578063a8a9c29e1462000123578063f10832f1146200014a57600080fd5b806301ffc9a714620000805780632ae9c60014620000ac5780635c60da1b14620000c5575b600080fd5b62000097620000913660046200070b565b62000171565b60405190151581526020015b60405180910390f35b620000b662000258565b604051620000a391906200074f565b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152602001620000a3565b620001146200010e366004620007b5565b62000284565b604051620000a3919062000886565b6200013a62000134366004620008d3565b6200029d565b604051620000a392919062000a22565b620001616200015b36600462000a6a565b620002ef565b604051620000a392919062000b38565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806200020557507fffffffff0000000000000000000000000000000000000000000000000000000082167f2ae9c60000000000000000000000000000000000000000000000000000000000145b806200025257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b62000262620006df565b5060408051606081018252600181526004602082015260009181019190915290565b60606200029660056006600162000369565b9392505050565b6060620002bd604051806040016040528060608152602001606081525090565b6040517fa112810100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006200030f604051806040016040528060608152602001606081525090565b6200033b7f00000000000000000000000000000000000000000000000000000000000000008562000539565b9150620003496001620005df565b81526200035b60056006600062000369565b602082015290939092509050565b6060826001600160a01b0316846001600160a01b03161115620003b8576040517fe9004f3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620003c4848462000b7a565b6001600160a01b031667ffffffffffffffff811115620003e857620003e862000a54565b6040519080825280602002602001820160405280156200046157816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620004075790505b509050835b836001600160a01b0316816001600160a01b0316101562000531576040518060a00160405280846002811115620004a157620004a162000809565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620004f4878462000b7a565b6001600160a01b03168151811062000510576200051062000ba4565b60200260200101819052508080620005289062000bba565b91505062000466565b509392505050565b6040516001600160a01b0382166024820152600090620002969084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152620006a3565b6060816001600160a01b031667ffffffffffffffff81111562000606576200060662000a54565b60405190808252806020026020018201604052801562000630578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b031610156200069d578082826001600160a01b03168151811062000670576200067062000ba4565b6001600160a01b039092166020928302919091019091015280620006948162000bba565b91505062000636565b50919050565b60008282604051620006b590620006fd565b620006c292919062000be3565b604051809103906000f08015801562000531573d6000803e3d6000fd5b60405180606001604052806003906020820280368337509192915050565b6107ad8062000c0883390190565b6000602082840312156200071e57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146200029657600080fd5b60608101818360005b60038110156200077c57815160ff1683526020928301929091019060010162000758565b50505092915050565b80356001600160a01b03811681146200079d57600080fd5b919050565b6000606082840312156200069d57600080fd5b60008060408385031215620007c957600080fd5b620007d48362000785565b9150602083013567ffffffffffffffff811115620007f157600080fd5b620007ff85828601620007a2565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60008151600381106200084257634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b81811015620008c757620008b88385516200081f565b938501939250600101620008a2565b50909695505050505050565b600080600060608486031215620008e957600080fd5b620008f48462000785565b9250602084013561ffff811681146200090c57600080fd5b9150604084013567ffffffffffffffff8111156200092957600080fd5b6200093786828701620007a2565b9150509250925092565b6000815180845260005b8181101562000969576020818501810151868301820152016200094b565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620009d05783516001600160a01b031683529284019291840191600101620009a9565b50508483015186820387850152805180835290840192506000918401905b8083101562000a175762000a048285516200081f565b91508484019350600183019250620009ee565b509695505050505050565b60408152600062000a37604083018562000941565b828103602084015262000a4b818562000989565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121562000a7e57600080fd5b62000a898362000785565b9150602083013567ffffffffffffffff8082111562000aa757600080fd5b818501915085601f83011262000abc57600080fd5b81358181111562000ad15762000ad162000a54565b604051601f8201601f19908116603f0116810190838211818310171562000afc5762000afc62000a54565b8160405282815288602084870101111562000b1657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b038316815260406020820152600062000b5c604083018462000989565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000b9d5762000b9d62000b64565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000bd95762000bd962000b64565b6001019392505050565b6001600160a01b038316815260406020820152600062000b5c60408301846200094156fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122015b2167515f4ace04b6d5f73baf181691326aab8bf1c62e731322916c13586ec64736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220928b3f496439d01214d855ed1cbb1dc673dae350939b54bd5015361a6f0b547864736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "ConflictingValues";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NonUpgradeablePlugin";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "prepareInstallation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUninstallation";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "permissions";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "_fromBuild";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginCloneableSetupV1MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginCloneableSetupV1Mock;
}

type PluginCloneableSetupV1MockBadConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginCloneableSetupV1MockBad__factory extends ContractFactory {
    constructor(...args: PluginCloneableSetupV1MockBadConstructorParams);
    deploy(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginCloneableSetupV1MockBad>;
    getDeployTransaction(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginCloneableSetupV1MockBad;
    connect(signer: Signer): PluginCloneableSetupV1MockBad__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b5060405161147b38038061147b83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516113ea6100916000396000818160d2015261031501526113ea6000f3fe60806040523480156200001157600080fd5b50600436106200007b5760003560e01c80639cb0a12411620000565780639cb0a12414620000fd578063a8a9c29e1462000123578063f10832f1146200014a57600080fd5b806301ffc9a714620000805780632ae9c60014620000ac5780635c60da1b14620000c5575b600080fd5b62000097620000913660046200070b565b62000171565b60405190151581526020015b60405180910390f35b620000b662000258565b604051620000a391906200074f565b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152602001620000a3565b620001146200010e366004620007b5565b62000284565b604051620000a3919062000886565b6200013a62000134366004620008d3565b6200029d565b604051620000a392919062000a22565b620001616200015b36600462000a6a565b620002ef565b604051620000a392919062000b38565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806200020557507fffffffff0000000000000000000000000000000000000000000000000000000082167f2ae9c60000000000000000000000000000000000000000000000000000000000145b806200025257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b62000262620006df565b5060408051606081018252600181526004602082015260009181019190915290565b60606200029660056006600162000369565b9392505050565b6060620002bd604051806040016040528060608152602001606081525090565b6040517fa112810100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006200030f604051806040016040528060608152602001606081525090565b6200033b7f00000000000000000000000000000000000000000000000000000000000000008562000539565b9150620003496001620005df565b81526200035b60056006600062000369565b602082015290939092509050565b6060826001600160a01b0316846001600160a01b03161115620003b8576040517fe9004f3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620003c4848462000b7a565b6001600160a01b031667ffffffffffffffff811115620003e857620003e862000a54565b6040519080825280602002602001820160405280156200046157816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620004075790505b509050835b836001600160a01b0316816001600160a01b0316101562000531576040518060a00160405280846002811115620004a157620004a162000809565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620004f4878462000b7a565b6001600160a01b03168151811062000510576200051062000ba4565b60200260200101819052508080620005289062000bba565b91505062000466565b509392505050565b6040516001600160a01b0382166024820152600090620002969084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152620006a3565b6060816001600160a01b031667ffffffffffffffff81111562000606576200060662000a54565b60405190808252806020026020018201604052801562000630578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b031610156200069d578082826001600160a01b03168151811062000670576200067062000ba4565b6001600160a01b039092166020928302919091019091015280620006948162000bba565b91505062000636565b50919050565b60008282604051620006b590620006fd565b620006c292919062000be3565b604051809103906000f08015801562000531573d6000803e3d6000fd5b60405180606001604052806003906020820280368337509192915050565b6107ad8062000c0883390190565b6000602082840312156200071e57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146200029657600080fd5b60608101818360005b60038110156200077c57815160ff1683526020928301929091019060010162000758565b50505092915050565b80356001600160a01b03811681146200079d57600080fd5b919050565b6000606082840312156200069d57600080fd5b60008060408385031215620007c957600080fd5b620007d48362000785565b9150602083013567ffffffffffffffff811115620007f157600080fd5b620007ff85828601620007a2565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60008151600381106200084257634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b81811015620008c757620008b88385516200081f565b938501939250600101620008a2565b50909695505050505050565b600080600060608486031215620008e957600080fd5b620008f48462000785565b9250602084013561ffff811681146200090c57600080fd5b9150604084013567ffffffffffffffff8111156200092957600080fd5b6200093786828701620007a2565b9150509250925092565b6000815180845260005b8181101562000969576020818501810151868301820152016200094b565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620009d05783516001600160a01b031683529284019291840191600101620009a9565b50508483015186820387850152805180835290840192506000918401905b8083101562000a175762000a048285516200081f565b91508484019350600183019250620009ee565b509695505050505050565b60408152600062000a37604083018562000941565b828103602084015262000a4b818562000989565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121562000a7e57600080fd5b62000a898362000785565b9150602083013567ffffffffffffffff8082111562000aa757600080fd5b818501915085601f83011262000abc57600080fd5b81358181111562000ad15762000ad162000a54565b604051601f8201601f19908116603f0116810190838211818310171562000afc5762000afc62000a54565b8160405282815288602084870101111562000b1657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b038316815260406020820152600062000b5c604083018462000989565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000b9d5762000b9d62000b64565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000bd95762000bd962000b64565b6001019392505050565b6001600160a01b038316815260406020820152600062000b5c60408301846200094156fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122015b2167515f4ace04b6d5f73baf181691326aab8bf1c62e731322916c13586ec64736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204edcd770040a5a04e35e9ed17a64d1caaf44cc6f1540e4b014db7b384572d7a664736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "ConflictingValues";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NonUpgradeablePlugin";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "prepareInstallation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUninstallation";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "permissions";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "_fromBuild";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginCloneableSetupV1MockBadInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginCloneableSetupV1MockBad;
}

type PluginCloneableSetupV2MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginCloneableSetupV2Mock__factory extends ContractFactory {
    constructor(...args: PluginCloneableSetupV2MockConstructorParams);
    deploy(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginCloneableSetupV2Mock>;
    getDeployTransaction(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginCloneableSetupV2Mock;
    connect(signer: Signer): PluginCloneableSetupV2Mock__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b5060405161147b38038061147b83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516113ea6100916000396000818160d2015261031501526113ea6000f3fe60806040523480156200001157600080fd5b50600436106200007b5760003560e01c80639cb0a12411620000565780639cb0a12414620000fd578063a8a9c29e1462000123578063f10832f1146200014a57600080fd5b806301ffc9a714620000805780632ae9c60014620000ac5780635c60da1b14620000c5575b600080fd5b62000097620000913660046200070b565b62000171565b60405190151581526020015b60405180910390f35b620000b662000258565b604051620000a391906200074f565b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152602001620000a3565b620001146200010e366004620007b5565b62000284565b604051620000a3919062000886565b6200013a62000134366004620008d3565b6200029d565b604051620000a392919062000a22565b620001616200015b36600462000a6a565b620002ef565b604051620000a392919062000b38565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806200020557507fffffffff0000000000000000000000000000000000000000000000000000000082167f2ae9c60000000000000000000000000000000000000000000000000000000000145b806200025257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b62000262620006df565b5060408051606081018252600181526004602082015260009181019190915290565b60606200029660056007600162000369565b9392505050565b6060620002bd604051806040016040528060608152602001606081525090565b6040517fa112810100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006200030f604051806040016040528060608152602001606081525090565b6200033b7f00000000000000000000000000000000000000000000000000000000000000008562000539565b9150620003496001620005df565b81526200035b60056007600062000369565b602082015290939092509050565b6060826001600160a01b0316846001600160a01b03161115620003b8576040517fe9004f3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620003c4848462000b7a565b6001600160a01b031667ffffffffffffffff811115620003e857620003e862000a54565b6040519080825280602002602001820160405280156200046157816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620004075790505b509050835b836001600160a01b0316816001600160a01b0316101562000531576040518060a00160405280846002811115620004a157620004a162000809565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef60809091015282620004f4878462000b7a565b6001600160a01b03168151811062000510576200051062000ba4565b60200260200101819052508080620005289062000bba565b91505062000466565b509392505050565b6040516001600160a01b0382166024820152600090620002969084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152620006a3565b6060816001600160a01b031667ffffffffffffffff81111562000606576200060662000a54565b60405190808252806020026020018201604052801562000630578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b031610156200069d578082826001600160a01b03168151811062000670576200067062000ba4565b6001600160a01b039092166020928302919091019091015280620006948162000bba565b91505062000636565b50919050565b60008282604051620006b590620006fd565b620006c292919062000be3565b604051809103906000f08015801562000531573d6000803e3d6000fd5b60405180606001604052806003906020820280368337509192915050565b6107ad8062000c0883390190565b6000602082840312156200071e57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146200029657600080fd5b60608101818360005b60038110156200077c57815160ff1683526020928301929091019060010162000758565b50505092915050565b80356001600160a01b03811681146200079d57600080fd5b919050565b6000606082840312156200069d57600080fd5b60008060408385031215620007c957600080fd5b620007d48362000785565b9150602083013567ffffffffffffffff811115620007f157600080fd5b620007ff85828601620007a2565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60008151600381106200084257634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b81811015620008c757620008b88385516200081f565b938501939250600101620008a2565b50909695505050505050565b600080600060608486031215620008e957600080fd5b620008f48462000785565b9250602084013561ffff811681146200090c57600080fd5b9150604084013567ffffffffffffffff8111156200092957600080fd5b6200093786828701620007a2565b9150509250925092565b6000815180845260005b8181101562000969576020818501810151868301820152016200094b565b506000602082860101526020601f19601f83011685010191505092915050565b805160408084528151908401819052600091602091908201906060860190845b81811015620009d05783516001600160a01b031683529284019291840191600101620009a9565b50508483015186820387850152805180835290840192506000918401905b8083101562000a175762000a048285516200081f565b91508484019350600183019250620009ee565b509695505050505050565b60408152600062000a37604083018562000941565b828103602084015262000a4b818562000989565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121562000a7e57600080fd5b62000a898362000785565b9150602083013567ffffffffffffffff8082111562000aa757600080fd5b818501915085601f83011262000abc57600080fd5b81358181111562000ad15762000ad162000a54565b604051601f8201601f19908116603f0116810190838211818310171562000afc5762000afc62000a54565b8160405282815288602084870101111562000b1657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b038316815260406020820152600062000b5c604083018462000989565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821603908082111562000b9d5762000b9d62000b64565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362000bd95762000bd962000b64565b6001019392505050565b6001600160a01b038316815260406020820152600062000b5c60408301846200094156fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122015b2167515f4ace04b6d5f73baf181691326aab8bf1c62e731322916c13586ec64736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122038ff9664eddaa6b37dad76020c3ff88c7619d3d9472dfe2a310b0d020a9face964736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "ConflictingValues";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NonUpgradeablePlugin";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "prepareInstallation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUninstallation";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "permissions";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "_fromBuild";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginCloneableSetupV2MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginCloneableSetupV2Mock;
}

type index$d_PluginCloneableSetupV1Mock__factory = PluginCloneableSetupV1Mock__factory;
declare const index$d_PluginCloneableSetupV1Mock__factory: typeof PluginCloneableSetupV1Mock__factory;
type index$d_PluginCloneableSetupV1MockBad__factory = PluginCloneableSetupV1MockBad__factory;
declare const index$d_PluginCloneableSetupV1MockBad__factory: typeof PluginCloneableSetupV1MockBad__factory;
type index$d_PluginCloneableSetupV2Mock__factory = PluginCloneableSetupV2Mock__factory;
declare const index$d_PluginCloneableSetupV2Mock__factory: typeof PluginCloneableSetupV2Mock__factory;
declare namespace index$d {
  export {
    index$d_PluginCloneableSetupV1Mock__factory as PluginCloneableSetupV1Mock__factory,
    index$d_PluginCloneableSetupV1MockBad__factory as PluginCloneableSetupV1MockBad__factory,
    index$d_PluginCloneableSetupV2Mock__factory as PluginCloneableSetupV2Mock__factory,
  };
}

declare namespace index$c {
  export {
    index$e as pluginCloneableMockSol,
    index$d as pluginCloneableSetupMockSol,
  };
}

type PluginV1MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginV1Mock__factory extends ContractFactory {
    constructor(...args: PluginV1MockConstructorParams);
    deploy(_dao: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginV1Mock>;
    getDeployTransaction(_dao: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginV1Mock;
    connect(signer: Signer): PluginV1Mock__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b50604051610a89380380610a8983398101604081905261002f91610044565b6001600160a01b031660805260018055610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b6080516109ed61009c6000396000818160f2015281816102a301526103fa01526109ed6000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80636accab8c11610076578063bb225da21161005b578063bb225da214610169578063c98425ee1461017e578063dd63c06f1461019357600080fd5b80636accab8c1461012b5780638cb750591461014257600080fd5b806301ffc9a7146100a85780632ae9c600146100d05780634162169f146100e557806341de68301461011c575b600080fd5b6100bb6100b636600461079a565b61019b565b60405190151581526020015b60405180910390f35b6100d8610253565b6040516100c791906107c4565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020016100c7565b60026040516100c79190610827565b61013460015481565b6040519081526020016100c7565b6101347f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f781565b61017c610177366004610841565b61027d565b005b6101866102e8565b6040516100c79190610859565b610186610360565b60006001600160e01b031982167f41de68300000000000000000000000000000000000000000000000000000000014806101fe57506001600160e01b031982167f2ae9c60000000000000000000000000000000000000000000000000000000000145b8061023257506001600160e01b031982167fafc5b82300000000000000000000000000000000000000000000000000000000145b8061024d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61025b61077c565b5060408051606081018252600181526004602082015260009181019190915290565b7f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f76102cd7f0000000000000000000000000000000000000000000000000000000000000000303384600036610436565b6102e46102df3684900384018461088d565b610529565b5050565b604080518082019091526000808252602082015260408051808201909152600080546001600160a01b0381168352602083019074010000000000000000000000000000000000000000900460ff166001811115610347576103476107f8565b6001811115610358576103586107f8565b905250919050565b604080518082019091526000808252602082015260408051808201909152600080546001600160a01b03811683529091908290602083019074010000000000000000000000000000000000000000900460ff1660018111156103c4576103c46107f8565b60018111156103d5576103d56107f8565b90525080519091506001600160a01b031661043157604051806040016040528061041c7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b031681526020016000905290505b919050565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906104839088908890889088908890600401610923565b602060405180830381865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610995565b610521576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084015b60405180910390fd5b505050505050565b805161055e906001600160a01b03167f549ea75a00000000000000000000000000000000000000000000000000000000610688565b801561057f575060018160200151600181111561057d5761057d6107f8565b145b156105b857806040517f266d0fb90000000000000000000000000000000000000000000000000000000081526004016105189190610859565b8051600080546001600160a01b039092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560208401518493909183917fffffffffffffffffffffff000000000000000000000000000000000000000000161774010000000000000000000000000000000000000000836001811115610646576106466107f8565b02179055509050507f88e879ae0d71faf3aa708f2978daccb99b95243615dc104835b8c5a21c884ae68160405161067d9190610859565b60405180910390a150565b6000610693836106ab565b80156106a457506106a483836106de565b9392505050565b60006106be826301ffc9a760e01b6106de565b801561024d57506106d7826001600160e01b03196106de565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015610765575060208210155b80156107715750600081115b979650505050505050565b60405180606001604052806003906020820280368337509192915050565b6000602082840312156107ac57600080fd5b81356001600160e01b0319811681146106a457600080fd5b60608101818360005b60038110156107ef57815160ff168352602092830192909101906001016107cd565b50505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b602081016003831061083b5761083b6107f8565b91905290565b60006040828403121561085357600080fd5b50919050565b81516001600160a01b031681526020820151604082019060028110610880576108806107f8565b8060208401525092915050565b60006040828403121561089f57600080fd5b6040516040810181811067ffffffffffffffff821117156108e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405282356001600160a01b038116811461090357600080fd5b815260208301356002811061091757600080fd5b60208201529392505050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011683010190509695505050505050565b6000602082840312156109a757600080fd5b815180151581146106a457600080fdfea2646970667358221220c0c5431efa904c0f174b292a3725cf0246a4ef3a3c02988ac349ce48b66dc7f864736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "_dao";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "DaoUnauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DelegateCallFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "InvalidTargetConfig";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "newTargetConfig";
            readonly type: "tuple";
        }];
        readonly name: "TargetSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "SET_TARGET_CONFIG_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dao";
        readonly outputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCurrentTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pluginType";
        readonly outputs: readonly [{
            readonly internalType: "enum IPlugin.PluginType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "_targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "setTargetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state1";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginV1MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginV1Mock;
}

type index$b_PluginV1Mock__factory = PluginV1Mock__factory;
declare const index$b_PluginV1Mock__factory: typeof PluginV1Mock__factory;
declare namespace index$b {
  export {
    index$b_PluginV1Mock__factory as PluginV1Mock__factory,
  };
}

declare namespace index$a {
  export {
    index$b as pluginMockSol,
  };
}

type PluginUUPSUpgradeableV1MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginUUPSUpgradeableV1Mock__factory extends ContractFactory {
    constructor(...args: PluginUUPSUpgradeableV1MockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginUUPSUpgradeableV1Mock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginUUPSUpgradeableV1Mock;
    connect(signer: Signer): PluginUUPSUpgradeableV1Mock__factory;
    static readonly bytecode = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e1565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100df576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516117dc61011860003960008181610415015281816104b0015281816105b70152818161064d015261074801526117dc6000f3fe6080604052600436106100e85760003560e01c80635c60da1b1161008a578063c4d66de811610059578063c4d66de81461026a578063c98425ee1461028a578063c9c4bfca146102ac578063dd63c06f146102e057600080fd5b80635c60da1b146101ea5780636accab8c146101ff5780638cb7505914610216578063bb225da21461024a57600080fd5b80634162169f116100c65780634162169f1461016657806341de6830146101985780634f1ef286146101b457806352d1902d146101c757600080fd5b806301ffc9a7146100ed5780632ae9c600146101225780633659cfe614610144575b600080fd5b3480156100f957600080fd5b5061010d6101083660046113ed565b6102f5565b60405190151581526020015b60405180910390f35b34801561012e57600080fd5b506101376103e1565b6040516101199190611417565b34801561015057600080fd5b5061016461015f366004611460565b61040b565b005b34801561017257600080fd5b5060c9546001600160a01b03165b6040516001600160a01b039091168152602001610119565b3480156101a457600080fd5b50600060405161011991906114ac565b6101646101c2366004611526565b6105ad565b3480156101d357600080fd5b506101dc61073b565b604051908152602001610119565b3480156101f657600080fd5b50610180610800565b34801561020b57600080fd5b506101dc61012d5481565b34801561022257600080fd5b506101dc7f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f781565b34801561025657600080fd5b506101646102653660046115ce565b610838565b34801561027657600080fd5b50610164610285366004611460565b61088d565b34801561029657600080fd5b5061029f6109d2565b60405161011991906115e6565b3480156102b857600080fd5b506101dc7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b3480156102ec57600080fd5b5061029f610a4a565b60006001600160e01b031982167f41de683000000000000000000000000000000000000000000000000000000000148061035857506001600160e01b031982167f2ae9c60000000000000000000000000000000000000000000000000000000000145b8061038c57506001600160e01b031982167f52d1902d00000000000000000000000000000000000000000000000000000000145b806103c057506001600160e01b031982167fafc5b82300000000000000000000000000000000000000000000000000000000145b806103db57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6103e96113cf565b5060408051606081018252600181526004602082015260009181019190915290565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104ae5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105097f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105855760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016104a5565b61058e81610b0b565b604080516000808252602082019092526105aa91839190610b44565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361064b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016104a5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106a67f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107225760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016104a5565b61072b82610b0b565b61073782826001610b44565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107db5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016104a5565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006108337f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60c9547f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f790610876906001600160a01b031630335b84600036610ce9565b6107376108883684900384018461161a565b610dd7565b600054610100900460ff16158080156108ad5750600054600160ff909116105b806108c75750303b1580156108c7575060005460ff166001145b6109395760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104a5565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561097a576000805461ff0019166101001790555b61098382610f2b565b600161012d558015610737576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60408051808201909152600080825260208201526040805180820190915260fb80546001600160a01b0381168352602083019074010000000000000000000000000000000000000000900460ff166001811115610a3157610a3161147d565b6001811115610a4257610a4261147d565b905250919050565b60408051808201909152600080825260208201526040805180820190915260fb80546001600160a01b03811683526000929190602083019074010000000000000000000000000000000000000000900460ff166001811115610aae57610aae61147d565b6001811115610abf57610abf61147d565b90525080519091506001600160a01b0316610b06576040518060400160405280610af160c9546001600160a01b031690565b6001600160a01b031681526020016000905290505b919050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610737906001600160a01b0316303361086d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b7c57610b7783610fb1565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610bd6575060408051601f3d908101601f19168201909252610bd39181019061167d565b60015b610c485760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016104a5565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610cdd5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016104a5565b50610b7783838361107c565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610d369088908890889088908890600401611696565b602060405180830381865afa158015610d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7791906116ea565b610dcf576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016104a5565b505050505050565b8051610e0c906001600160a01b03167f549ea75a000000000000000000000000000000000000000000000000000000006110a7565b8015610e2d5750600181602001516001811115610e2b57610e2b61147d565b145b15610e6657806040517f266d0fb90000000000000000000000000000000000000000000000000000000081526004016104a591906115e6565b805160fb80546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1983168117825560208401518493909183917fffffffffffffffffffffff000000000000000000000000000000000000000000161774010000000000000000000000000000000000000000836001811115610ee957610ee961147d565b02179055509050507f88e879ae0d71faf3aa708f2978daccb99b95243615dc104835b8c5a21c884ae681604051610f2091906115e6565b60405180910390a150565b600054610100900460ff16610fa85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104a5565b6105aa816110ca565b6001600160a01b0381163b61102e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016104a5565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61108583611176565b6000825111806110925750805b15610b77576110a183836111b6565b50505050565b60006110b2836111db565b80156110c357506110c3838361120e565b9392505050565b600054610100900460ff166111475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104a5565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61117f81610fb1565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606110c38383604051806060016040528060278152602001611780602791396112ac565b60006111ee826301ffc9a760e01b61120e565b80156103db5750611207826001600160e01b031961120e565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015611295575060208210155b80156112a15750600081115b979650505050505050565b6060600080856001600160a01b0316856040516112c99190611730565b600060405180830381855af49150503d8060008114611304576040519150601f19603f3d011682016040523d82523d6000602084013e611309565b606091505b509150915061131a86838387611324565b9695505050505050565b6060831561139357825160000361138c576001600160a01b0385163b61138c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a5565b508161139d565b61139d83836113a5565b949350505050565b8151156113b55781518083602001fd5b8060405162461bcd60e51b81526004016104a5919061174c565b60405180606001604052806003906020820280368337509192915050565b6000602082840312156113ff57600080fd5b81356001600160e01b0319811681146110c357600080fd5b60608101818360005b600381101561144257815160ff16835260209283019290910190600101611420565b50505092915050565b6001600160a01b03811681146105aa57600080fd5b60006020828403121561147257600080fd5b81356110c38161144b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600383106114c0576114c061147d565b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561151e5761151e6114c6565b604052919050565b6000806040838503121561153957600080fd5b82356115448161144b565b915060208381013567ffffffffffffffff8082111561156257600080fd5b818601915086601f83011261157657600080fd5b813581811115611588576115886114c6565b61159a84601f19601f840116016114f5565b915080825287848285010111156115b057600080fd5b80848401858401376000848284010152508093505050509250929050565b6000604082840312156115e057600080fd5b50919050565b81516001600160a01b03168152602082015160408201906002811061160d5761160d61147d565b8060208401525092915050565b60006040828403121561162c57600080fd5b6040516040810181811067ffffffffffffffff8211171561164f5761164f6114c6565b604052823561165d8161144b565b815260208301356002811061167157600080fd5b60208201529392505050565b60006020828403121561168f57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6000602082840312156116fc57600080fd5b815180151581146110c357600080fd5b60005b8381101561172757818101518382015260200161170f565b50506000910152565b6000825161174281846020870161170c565b9190910192915050565b602081526000825180602084015261176b81604085016020870161170c565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220883ea157d35dab5b40e2f036bca2d1f2eff0c6a871031b43c694b5bee9cbdea464736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "DaoUnauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DelegateCallFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "InvalidTargetConfig";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "newTargetConfig";
            readonly type: "tuple";
        }];
        readonly name: "TargetSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "SET_TARGET_CONFIG_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_PLUGIN_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dao";
        readonly outputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCurrentTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "_dao";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pluginType";
        readonly outputs: readonly [{
            readonly internalType: "enum IPlugin.PluginType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "_targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "setTargetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state1";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): PluginUUPSUpgradeableV1MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginUUPSUpgradeableV1Mock;
}

type PluginUUPSUpgradeableV2MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginUUPSUpgradeableV2Mock__factory extends ContractFactory {
    constructor(...args: PluginUUPSUpgradeableV2MockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginUUPSUpgradeableV2Mock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginUUPSUpgradeableV2Mock;
    connect(signer: Signer): PluginUUPSUpgradeableV2Mock__factory;
    static readonly bytecode = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e1565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100df576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516118cd6101186000396000818161046701528181610502015281816106090152818161069f015261079a01526118cd6000f3fe60806040526004361061010e5760003560e01c80636accab8c116100a5578063c98425ee11610074578063dd63c06f11610059578063dd63c06f14610306578063e27e9a4e1461031b578063efe51cca1461033057600080fd5b8063c98425ee146102b0578063c9c4bfca146102d257600080fd5b80636accab8c146102255780638cb750591461023c578063bb225da214610270578063c4d66de81461029057600080fd5b806341de6830116100e157806341de6830146101be5780634f1ef286146101da57806352d1902d146101ed5780635c60da1b1461021057600080fd5b806301ffc9a7146101135780632ae9c600146101485780633659cfe61461016a5780634162169f1461018c575b600080fd5b34801561011f57600080fd5b5061013361012e3660046114de565b610347565b60405190151581526020015b60405180910390f35b34801561015457600080fd5b5061015d610433565b60405161013f9190611508565b34801561017657600080fd5b5061018a610185366004611551565b61045d565b005b34801561019857600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161013f565b3480156101ca57600080fd5b50600060405161013f919061159d565b61018a6101e8366004611617565b6105ff565b3480156101f957600080fd5b5061020261078d565b60405190815260200161013f565b34801561021c57600080fd5b506101a6610852565b34801561023157600080fd5b5061020261012d5481565b34801561024857600080fd5b506102027f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f781565b34801561027c57600080fd5b5061018a61028b3660046116bf565b61088a565b34801561029c57600080fd5b5061018a6102ab366004611551565b6108df565b3480156102bc57600080fd5b506102c56109e1565b60405161013f91906116d7565b3480156102de57600080fd5b506102027f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561031257600080fd5b506102c5610a59565b34801561032757600080fd5b5061018a610b1a565b34801561033c57600080fd5b5061020261012e5481565b60006001600160e01b031982167f41de68300000000000000000000000000000000000000000000000000000000014806103aa57506001600160e01b031982167f2ae9c60000000000000000000000000000000000000000000000000000000000145b806103de57506001600160e01b031982167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061041257506001600160e01b031982167fafc5b82300000000000000000000000000000000000000000000000000000000145b8061042d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61043b6114c0565b5060408051606081018252600181526004602082015260009181019190915290565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105005760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661055b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146105d75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016104f7565b6105e081610c07565b604080516000808252602082019092526105fc91839190610c40565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361069d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016104f7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106f87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107745760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016104f7565b61077d82610c07565b61078982826001610c40565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461082d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016104f7565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006108857f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60c9547f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f7906108c8906001600160a01b031630335b84600036610de5565b6107896108da3684900384018461170b565b610ed3565b600054600290610100900460ff16158015610901575060005460ff8083169116105b6109735760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f7565b6000805461ffff191660ff8316176101001790556109908261101c565b600161012d55600261012e556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60408051808201909152600080825260208201526040805180820190915260fb80546001600160a01b0381168352602083019074010000000000000000000000000000000000000000900460ff166001811115610a4057610a4061156e565b6001811115610a5157610a5161156e565b905250919050565b60408051808201909152600080825260208201526040805180820190915260fb80546001600160a01b03811683526000929190602083019074010000000000000000000000000000000000000000900460ff166001811115610abd57610abd61156e565b6001811115610ace57610ace61156e565b90525080519091506001600160a01b0316610b15576040518060400160405280610b0060c9546001600160a01b031690565b6001600160a01b031681526020016000905290505b919050565b600054600290610100900460ff16158015610b3c575060005460ff8083169116105b610bae5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f7565b60008054600261012e5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610789906001600160a01b031630336108bf565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610c7857610c73836110a2565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610cd2575060408051601f3d908101601f19168201909252610ccf9181019061176e565b60015b610d445760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016104f7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610dd95760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016104f7565b50610c7383838361116d565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610e329088908890889088908890600401611787565b602060405180830381865afa158015610e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7391906117db565b610ecb576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483015285166044820152606481018490526084016104f7565b505050505050565b8051610f08906001600160a01b03167f549ea75a00000000000000000000000000000000000000000000000000000000611198565b8015610f295750600181602001516001811115610f2757610f2761156e565b145b15610f6257806040517f266d0fb90000000000000000000000000000000000000000000000000000000081526004016104f791906116d7565b805160fb80546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1983168117825560208401518493909183917fffffffffffffffffffffff000000000000000000000000000000000000000000161774010000000000000000000000000000000000000000836001811115610fe557610fe561156e565b02179055509050507f88e879ae0d71faf3aa708f2978daccb99b95243615dc104835b8c5a21c884ae681604051610bfc91906116d7565b600054610100900460ff166110995760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104f7565b6105fc816111bb565b6001600160a01b0381163b61111f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016104f7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61117683611267565b6000825111806111835750805b15610c735761119283836112a7565b50505050565b60006111a3836112cc565b80156111b457506111b483836112ff565b9392505050565b600054610100900460ff166112385760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104f7565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611270816110a2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606111b483836040518060600160405280602781526020016118716027913961139d565b60006112df826301ffc9a760e01b6112ff565b801561042d57506112f8826001600160e01b03196112ff565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015611386575060208210155b80156113925750600081115b979650505050505050565b6060600080856001600160a01b0316856040516113ba9190611821565b600060405180830381855af49150503d80600081146113f5576040519150601f19603f3d011682016040523d82523d6000602084013e6113fa565b606091505b509150915061140b86838387611415565b9695505050505050565b6060831561148457825160000361147d576001600160a01b0385163b61147d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f7565b508161148e565b61148e8383611496565b949350505050565b8151156114a65781518083602001fd5b8060405162461bcd60e51b81526004016104f7919061183d565b60405180606001604052806003906020820280368337509192915050565b6000602082840312156114f057600080fd5b81356001600160e01b0319811681146111b457600080fd5b60608101818360005b600381101561153357815160ff16835260209283019290910190600101611511565b50505092915050565b6001600160a01b03811681146105fc57600080fd5b60006020828403121561156357600080fd5b81356111b48161153c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600383106115b1576115b161156e565b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561160f5761160f6115b7565b604052919050565b6000806040838503121561162a57600080fd5b82356116358161153c565b915060208381013567ffffffffffffffff8082111561165357600080fd5b818601915086601f83011261166757600080fd5b813581811115611679576116796115b7565b61168b84601f19601f840116016115e6565b915080825287848285010111156116a157600080fd5b80848401858401376000848284010152508093505050509250929050565b6000604082840312156116d157600080fd5b50919050565b81516001600160a01b0316815260208201516040820190600281106116fe576116fe61156e565b8060208401525092915050565b60006040828403121561171d57600080fd5b6040516040810181811067ffffffffffffffff82111715611740576117406115b7565b604052823561174e8161153c565b815260208301356002811061176257600080fd5b60208201529392505050565b60006020828403121561178057600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6000602082840312156117ed57600080fd5b815180151581146111b457600080fd5b60005b83811015611818578181015183820152602001611800565b50506000910152565b600082516118338184602087016117fd565b9190910192915050565b602081526000825180602084015261185c8160408501602087016117fd565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200b721b3aed9239f40bc1fbdd3bf786e4a969cf3e848c125b64ed9171c1c0a25a64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "DaoUnauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DelegateCallFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "InvalidTargetConfig";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "newTargetConfig";
            readonly type: "tuple";
        }];
        readonly name: "TargetSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "SET_TARGET_CONFIG_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_PLUGIN_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dao";
        readonly outputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCurrentTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "_dao";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "initializeV1toV2";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pluginType";
        readonly outputs: readonly [{
            readonly internalType: "enum IPlugin.PluginType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "_targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "setTargetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state1";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state2";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): PluginUUPSUpgradeableV2MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginUUPSUpgradeableV2Mock;
}

type PluginUUPSUpgradeableV3MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginUUPSUpgradeableV3Mock__factory extends ContractFactory {
    constructor(...args: PluginUUPSUpgradeableV3MockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginUUPSUpgradeableV3Mock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginUUPSUpgradeableV3Mock;
    connect(signer: Signer): PluginUUPSUpgradeableV3Mock__factory;
    static readonly bytecode = "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e1565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100df576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611a21610118600039600081816105bb0152818161065101528181610758015281816107ee01526108e90152611a216000f3fe6080604052600436106101445760003560e01c80635c60da1b116100c0578063c4d66de811610074578063c9c4bfca11610059578063c9c4bfca14610349578063dd63c06f1461037d578063efe51cca1461039257600080fd5b8063c4d66de814610307578063c98425ee1461032757600080fd5b80637cef4695116100a55780637cef46951461029e5780638cb75059146102b3578063bb225da2146102e757600080fd5b80635c60da1b146102725780636accab8c1461028757600080fd5b80633659cfe61161011757806341de6830116100fc57806341de68301461022e5780634f1ef2861461024a57806352d1902d1461025d57600080fd5b80633659cfe6146101dc5780634162169f146101fc57600080fd5b806301ffc9a714610149578063140457681461017e5780632491118d146101955780632ae9c600146101ba575b600080fd5b34801561015557600080fd5b50610169610164366004611632565b6103a9565b60405190151581526020015b60405180910390f35b34801561018a57600080fd5b50610193610495565b005b3480156101a157600080fd5b506101ac61012f5481565b604051908152602001610175565b3480156101c657600080fd5b506101cf610587565b604051610175919061165c565b3480156101e857600080fd5b506101936101f73660046116a5565b6105b1565b34801561020857600080fd5b5060c9546001600160a01b03165b6040516001600160a01b039091168152602001610175565b34801561023a57600080fd5b50600060405161017591906116f1565b61019361025836600461176b565b61074e565b34801561026957600080fd5b506101ac6108dc565b34801561027e57600080fd5b506102166109a1565b34801561029357600080fd5b506101ac61012d5481565b3480156102aa57600080fd5b506101936109d9565b3480156102bf57600080fd5b506101ac7f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f781565b3480156102f357600080fd5b50610193610302366004611813565b610ac5565b34801561031357600080fd5b506101936103223660046116a5565b610b1a565b34801561033357600080fd5b5061033c610c22565b604051610175919061182b565b34801561035557600080fd5b506101ac7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561038957600080fd5b5061033c610c9a565b34801561039e57600080fd5b506101ac61012e5481565b60006001600160e01b031982167f41de683000000000000000000000000000000000000000000000000000000000148061040c57506001600160e01b031982167f2ae9c60000000000000000000000000000000000000000000000000000000000145b8061044057506001600160e01b031982167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061047457506001600160e01b031982167fafc5b82300000000000000000000000000000000000000000000000000000000145b8061048f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600054600390610100900460ff161580156104b7575060005460ff8083169116105b61052e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b60008054600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b61058f611614565b5060408051606081018252600181526004602082015260009181019190915290565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361064f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610525565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106aa7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146107265760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610525565b61072f81610d5b565b6040805160008082526020820190925261074b91839190610d94565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107ec5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610525565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108477f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146108c35760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610525565b6108cc82610d5b565b6108d882826001610d94565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461097c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610525565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006109d47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054600390610100900460ff161580156109fb575060005460ff8083169116105b610a6d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610525565b60008054600261012e55600361012f5561ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200161057c565b60c9547f568cc693d84eb1901f8bcecba154cbdef23ca3cf67efc0a0b698528a06c660f790610b03906001600160a01b031630335b84600036610f39565b6108d8610b153684900384018461185f565b611027565b600054600390610100900460ff16158015610b3c575060005460ff8083169116105b610bae5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610525565b6000805461ffff191660ff831617610100179055610bcb82611170565b600161012d55600261012e55600361012f556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60408051808201909152600080825260208201526040805180820190915260fb80546001600160a01b0381168352602083019074010000000000000000000000000000000000000000900460ff166001811115610c8157610c816116c2565b6001811115610c9257610c926116c2565b905250919050565b60408051808201909152600080825260208201526040805180820190915260fb80546001600160a01b03811683526000929190602083019074010000000000000000000000000000000000000000900460ff166001811115610cfe57610cfe6116c2565b6001811115610d0f57610d0f6116c2565b90525080519091506001600160a01b0316610d56576040518060400160405280610d4160c9546001600160a01b031690565b6001600160a01b031681526020016000905290505b919050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f5906108d8906001600160a01b03163033610afa565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610dcc57610dc7836111f6565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610e26575060408051601f3d908101601f19168201909252610e23918101906118c2565b60015b610e985760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610525565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610f2d5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610525565b50610dc78383836112c1565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610f8690889088908890889088906004016118db565b602060405180830381865afa158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc7919061192f565b61101f576040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610525565b505050505050565b805161105c906001600160a01b03167f549ea75a000000000000000000000000000000000000000000000000000000006112ec565b801561107d575060018160200151600181111561107b5761107b6116c2565b145b156110b657806040517f266d0fb9000000000000000000000000000000000000000000000000000000008152600401610525919061182b565b805160fb80546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1983168117825560208401518493909183917fffffffffffffffffffffff000000000000000000000000000000000000000000161774010000000000000000000000000000000000000000836001811115611139576111396116c2565b02179055509050507f88e879ae0d71faf3aa708f2978daccb99b95243615dc104835b8c5a21c884ae68160405161057c919061182b565b600054610100900460ff166111ed5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610525565b61074b8161130f565b6001600160a01b0381163b6112735760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610525565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6112ca836113bb565b6000825111806112d75750805b15610dc7576112e683836113fb565b50505050565b60006112f783611420565b801561130857506113088383611453565b9392505050565b600054610100900460ff1661138c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610525565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6113c4816111f6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061130883836040518060600160405280602781526020016119c5602791396114f1565b6000611433826301ffc9a760e01b611453565b801561048f575061144c826001600160e01b0319611453565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156114da575060208210155b80156114e65750600081115b979650505050505050565b6060600080856001600160a01b03168560405161150e9190611975565b600060405180830381855af49150503d8060008114611549576040519150601f19603f3d011682016040523d82523d6000602084013e61154e565b606091505b509150915061155f86838387611569565b9695505050505050565b606083156115d85782516000036115d1576001600160a01b0385163b6115d15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610525565b50816115e2565b6115e283836115ea565b949350505050565b8151156115fa5781518083602001fd5b8060405162461bcd60e51b81526004016105259190611991565b60405180606001604052806003906020820280368337509192915050565b60006020828403121561164457600080fd5b81356001600160e01b03198116811461130857600080fd5b60608101818360005b600381101561168757815160ff16835260209283019290910190600101611665565b50505092915050565b6001600160a01b038116811461074b57600080fd5b6000602082840312156116b757600080fd5b813561130881611690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310611705576117056116c2565b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156117635761176361170b565b604052919050565b6000806040838503121561177e57600080fd5b823561178981611690565b915060208381013567ffffffffffffffff808211156117a757600080fd5b818601915086601f8301126117bb57600080fd5b8135818111156117cd576117cd61170b565b6117df84601f19601f8401160161173a565b915080825287848285010111156117f557600080fd5b80848401858401376000848284010152508093505050509250929050565b60006040828403121561182557600080fd5b50919050565b81516001600160a01b031681526020820151604082019060028110611852576118526116c2565b8060208401525092915050565b60006040828403121561187157600080fd5b6040516040810181811067ffffffffffffffff821117156118945761189461170b565b60405282356118a281611690565b81526020830135600281106118b657600080fd5b60208201529392505050565b6000602082840312156118d457600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561194157600080fd5b8151801515811461130857600080fd5b60005b8381101561196c578181015183820152602001611954565b50506000910152565b60008251611987818460208701611951565b9190910192915050565b60208152600082518060208401526119b0816040850160208701611951565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208ca4018f7181c1f758e7f5de51657b7ebeb965cb7b686d03d9b50e9896398fb364736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "DaoUnauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DelegateCallFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "InvalidTargetConfig";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "newTargetConfig";
            readonly type: "tuple";
        }];
        readonly name: "TargetSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "SET_TARGET_CONFIG_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_PLUGIN_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dao";
        readonly outputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCurrentTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTargetConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "_dao";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "initializeV1toV3";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "initializeV2toV3";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pluginType";
        readonly outputs: readonly [{
            readonly internalType: "enum IPlugin.PluginType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "enum IPlugin.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }];
            readonly internalType: "struct IPlugin.TargetConfig";
            readonly name: "_targetConfig";
            readonly type: "tuple";
        }];
        readonly name: "setTargetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state1";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state2";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state3";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): PluginUUPSUpgradeableV3MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginUUPSUpgradeableV3Mock;
}

type index$9_PluginUUPSUpgradeableV1Mock__factory = PluginUUPSUpgradeableV1Mock__factory;
declare const index$9_PluginUUPSUpgradeableV1Mock__factory: typeof PluginUUPSUpgradeableV1Mock__factory;
type index$9_PluginUUPSUpgradeableV2Mock__factory = PluginUUPSUpgradeableV2Mock__factory;
declare const index$9_PluginUUPSUpgradeableV2Mock__factory: typeof PluginUUPSUpgradeableV2Mock__factory;
type index$9_PluginUUPSUpgradeableV3Mock__factory = PluginUUPSUpgradeableV3Mock__factory;
declare const index$9_PluginUUPSUpgradeableV3Mock__factory: typeof PluginUUPSUpgradeableV3Mock__factory;
declare namespace index$9 {
  export {
    index$9_PluginUUPSUpgradeableV1Mock__factory as PluginUUPSUpgradeableV1Mock__factory,
    index$9_PluginUUPSUpgradeableV2Mock__factory as PluginUUPSUpgradeableV2Mock__factory,
    index$9_PluginUUPSUpgradeableV3Mock__factory as PluginUUPSUpgradeableV3Mock__factory,
  };
}

declare class MockedHelper__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "InstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UninstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "build";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UpdatePrepared";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_helpersCount";
            readonly type: "uint160";
        }];
        readonly name: "mockHelperCount";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_lowerIndex";
            readonly type: "uint160";
        }, {
            readonly internalType: "uint160";
            readonly name: "_upperIndex";
            readonly type: "uint160";
        }];
        readonly name: "mockPermissionIndexes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "prepareInstallation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUninstallation";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "permissions";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "_fromBuild";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "initData";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "reset";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MockedHelperInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockedHelper;
}

type PluginUUPSUpgradeableSetupV1MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginUUPSUpgradeableSetupV1Mock__factory extends ContractFactory {
    constructor(...args: PluginUUPSUpgradeableSetupV1MockConstructorParams);
    deploy(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginUUPSUpgradeableSetupV1Mock>;
    getDeployTransaction(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginUUPSUpgradeableSetupV1Mock;
    connect(signer: Signer): PluginUUPSUpgradeableSetupV1Mock__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b506040516118c53803806118c583398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516118336100926000396000818161014901526103f501526118336000f3fe60806040523480156200001157600080fd5b5060043610620000b05760003560e01c80639cb0a124116200007f578063bc93bb2e1162000062578063bc93bb2e14620001c1578063d826f88f146200020d578063f10832f1146200024457600080fd5b80639cb0a1241462000174578063a8a9c29e146200019a57600080fd5b806301ffc9a714620000b55780632ae9c60014620000e157806346c2002414620000fa5780635c60da1b146200013c575b600080fd5b620000cc620000c636600462000909565b6200026b565b60405190151581526020015b60405180910390f35b620000eb62000352565b604051620000d891906200094d565b6200013a6200010b3660046200099c565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b005b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152602001620000d8565b6200018b62000185366004620009cf565b6200037e565b604051620000d8919062000aa2565b620001b1620001ab36600462000aef565b620003a7565b604051620000d892919062000c59565b6200013a620001d236600462000c8b565b600180546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560028054929093169116179055565b6200013a6001805473ffffffffffffffffffffffffffffffffffffffff199081169091556002805482169055600080549091169055565b6200025b6200025536600462000db6565b620003cf565b604051620000d892919062000e02565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620002ff57507fffffffff0000000000000000000000000000000000000000000000000000000082167f2ae9c60000000000000000000000000000000000000000000000000000000000145b806200034c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6200035c620008dd565b5060408051606081018252600181526004602082015260009181019190915290565b60606200038f600060018062000452565b90506200034c83620003a18462000e26565b620004b9565b6060620003c7604051806040016040528060608152602001606081525090565b935093915050565b6000620003ef604051806040016040528060608152602001606081525090565b6200041b7f000000000000000000000000000000000000000000000000000000000000000085620004f8565b9150620004296002620005a5565b81526200043a600060028162000452565b60208201526200044b8484620005da565b9250929050565b600154606090620004b1906001600160a01b031660000362000475578462000482565b6001546001600160a01b03165b6002546001600160a01b03166000036200049d5784620004aa565b6002546001600160a01b03165b846200060d565b949350505050565b7ffcfdc3b542b4ad36e57b00e7f79a3d4121a844f1b7fa32829e4914320236f4748282604051620004ec92919062000f2c565b60405180910390a15050565b6040516001600160a01b03821660248201526000906200059e9084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152620007dd565b9392505050565b600080546060916200034c916001600160a01b03169003620005c8578262000819565b6000546001600160a01b031662000819565b7f788f140d37f3ca802bffe7ec3134153ce98a1c58d10bbb00a4b6d449beca9ac88282604051620004ec92919062000fad565b6060826001600160a01b0316846001600160a01b031611156200065c576040517fe9004f3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62000668848462000fe7565b6001600160a01b031667ffffffffffffffff8111156200068c576200068c62000cc9565b6040519080825280602002602001820160405280156200070557816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620006ab5790505b509050835b836001600160a01b0316816001600160a01b03161015620007d5576040518060a0016040528084600281111562000745576200074562000a25565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef6080909101528262000798878462000fe7565b6001600160a01b031681518110620007b457620007b462001011565b60200260200101819052508080620007cc9062001027565b9150506200070a565b509392505050565b60008282604051620007ef90620008fb565b620007fc92919062000fad565b604051809103906000f080158015620007d5573d6000803e3d6000fd5b6060816001600160a01b031667ffffffffffffffff81111562000840576200084062000cc9565b6040519080825280602002602001820160405280156200086a578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b03161015620008d7578082826001600160a01b031681518110620008aa57620008aa62001011565b6001600160a01b039092166020928302919091019091015280620008ce8162001027565b91505062000870565b50919050565b60405180606001604052806003906020820280368337509192915050565b6107ad806200105183390190565b6000602082840312156200091c57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146200059e57600080fd5b60608101818360005b60038110156200097a57815160ff1683526020928301929091019060010162000956565b50505092915050565b6001600160a01b03811681146200099957600080fd5b50565b600060208284031215620009af57600080fd5b81356200059e8162000983565b600060608284031215620008d757600080fd5b60008060408385031215620009e357600080fd5b8235620009f08162000983565b9150602083013567ffffffffffffffff81111562000a0d57600080fd5b62000a1b85828601620009bc565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600081516003811062000a5e57634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101562000ae35762000ad483855162000a3b565b93850193925060010162000abe565b50909695505050505050565b60008060006060848603121562000b0557600080fd5b833562000b128162000983565b9250602084013561ffff8116811462000b2a57600080fd5b9150604084013567ffffffffffffffff81111562000b4757600080fd5b62000b5586828701620009bc565b9150509250925092565b6000815180845260005b8181101562000b875760208185018101518683018201520162000b69565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b8381101562000be25781516001600160a01b03168752958201959082019060010162000bbb565b509495945050505050565b600081516040845262000c04604085018262000ba7565b60208481015186830387830152805180845290820193509091600091908301905b8083101562000c4e5762000c3b82865162000a3b565b9150838501945060018301925062000c25565b509695505050505050565b60408152600062000c6e604083018562000b5f565b828103602084015262000c82818562000bed565b95945050505050565b6000806040838503121562000c9f57600080fd5b823562000cac8162000983565b9150602083013562000cbe8162000983565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171562000d055762000d0562000cc9565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171562000d375762000d3762000cc9565b604052919050565b600082601f83011262000d5157600080fd5b813567ffffffffffffffff81111562000d6e5762000d6e62000cc9565b62000d836020601f19601f8401160162000d0b565b81815284602083860101111562000d9957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121562000dca57600080fd5b823562000dd78162000983565b9150602083013567ffffffffffffffff81111562000df457600080fd5b62000a1b8582860162000d3f565b6001600160a01b0383168152604060208201526000620004b1604083018462000bed565b60006060823603121562000e3957600080fd5b62000e4362000cdf565b823562000e508162000983565b815260208381013567ffffffffffffffff8082111562000e6f57600080fd5b9085019036601f83011262000e8357600080fd5b81358181111562000e985762000e9862000cc9565b8060051b62000ea985820162000d0b565b918252838101850191858101903684111562000ec457600080fd5b948601945b8386101562000ef2578535925062000ee18362000983565b828252948601949086019062000ec9565b808789015250505050604086013592508083111562000f1057600080fd5b505062000f203682860162000d3f565b60408301525092915050565b60006001600160a01b0380851683526040602084015280845116604084015250602083015160608084015262000f6660a084018262000ba7565b905060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc084830301608085015262000fa3828262000b5f565b9695505050505050565b6001600160a01b0383168152604060208201526000620004b1604083018462000b5f565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038281168282160390808211156200100a576200100a62000fd1565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380831681810362001046576200104662000fd1565b600101939250505056fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122015b2167515f4ace04b6d5f73baf181691326aab8bf1c62e731322916c13586ec64736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220592b024db36840197ff4122674cb1003dbd8ddd81f1a4afac8d0977f223538b164736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "ConflictingValues";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "fromBuild";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "thisBuild";
            readonly type: "uint16";
        }];
        readonly name: "InvalidUpdatePath";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "InstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UninstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "build";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UpdatePrepared";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_helpersCount";
            readonly type: "uint160";
        }];
        readonly name: "mockHelperCount";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_lowerIndex";
            readonly type: "uint160";
        }, {
            readonly internalType: "uint160";
            readonly name: "_upperIndex";
            readonly type: "uint160";
        }];
        readonly name: "mockPermissionIndexes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "prepareInstallation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUninstallation";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "permissions";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "_fromBuild";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "reset";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginUUPSUpgradeableSetupV1MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginUUPSUpgradeableSetupV1Mock;
}

type PluginUUPSUpgradeableSetupV1MockBadConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginUUPSUpgradeableSetupV1MockBad__factory extends ContractFactory {
    constructor(...args: PluginUUPSUpgradeableSetupV1MockBadConstructorParams);
    deploy(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginUUPSUpgradeableSetupV1MockBad>;
    getDeployTransaction(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginUUPSUpgradeableSetupV1MockBad;
    connect(signer: Signer): PluginUUPSUpgradeableSetupV1MockBad__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b50604051610ef5380380610ef583398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610e6a61008b60003960006101310152610e6a6000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80639cb0a12411610076578063bc93bb2e1161005b578063bc93bb2e1461019c578063d826f88f146101e5578063f10832f11461021b57600080fd5b80639cb0a1241461015b578063a8a9c29e1461017b57600080fd5b806301ffc9a7146100a85780632ae9c600146100d057806346c20024146100e55780635c60da1b14610124575b600080fd5b6100bb6100b6366004610749565b61023c565b60405190151581526020015b60405180910390f35b6100d8610321565b6040516100c79190610792565b6101226100f33660046107de565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b005b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020016100c7565b61016e61016936600461080d565b61034b565b6040516100c791906108d9565b61018e610189366004610922565b61036e565b6040516100c7929190610a7b565b6101226101aa366004610aa9565b600180546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560028054929093169116179055565b6101226001805473ffffffffffffffffffffffffffffffffffffffff199081169091556002805482169055600080549091169055565b61022e610229366004610bc2565b610395565b6040516100c7929190610c08565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b500000000000000000000000000000000000000000000000000000000014806102cf57507fffffffff0000000000000000000000000000000000000000000000000000000082167f2ae9c60000000000000000000000000000000000000000000000000000000000145b8061031b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b61032961072b565b5060408051606081018252600181526004602082015260009181019190915290565b606061035a60006001806103e7565b905061031b8361036984610c2a565b610448565b606061038d604051806040016040528060608152602001606081525090565b935093915050565b60006103b4604051806040016040528060608152602001606081525090565b600091506103c26001610485565b81526103d160006001816103e7565b60208201526103e0848461053e565b9250929050565b600154606090610440906001600160a01b03166000036104075784610414565b6001546001600160a01b03165b6002546001600160a01b031660000361042d578461043a565b6002546001600160a01b03165b8461056f565b949350505050565b7ffcfdc3b542b4ad36e57b00e7f79a3d4121a844f1b7fa32829e4914320236f4748282604051610479929190610d1c565b60405180910390a15050565b6060816001600160a01b031667ffffffffffffffff8111156104a9576104a9610ae2565b6040519080825280602002602001820160405280156104d2578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b03161015610538578082826001600160a01b03168151811061050e5761050e610d99565b6001600160a01b03909216602092830291909101909101528061053081610dc5565b9150506104d8565b50919050565b7f788f140d37f3ca802bffe7ec3134153ce98a1c58d10bbb00a4b6d449beca9ac88282604051610479929190610deb565b6060826001600160a01b0316846001600160a01b031611156105bd576040517fe9004f3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105c78484610e0d565b6001600160a01b031667ffffffffffffffff8111156105e8576105e8610ae2565b60405190808252806020026020018201604052801561065f57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816106065790505b509050835b836001600160a01b0316816001600160a01b03161015610723576040518060a0016040528084600281111561069b5761069b61085d565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef608090910152826106ec8784610e0d565b6001600160a01b03168151811061070557610705610d99565b6020026020010181905250808061071b90610dc5565b915050610664565b509392505050565b60405180606001604052806003906020820280368337509192915050565b60006020828403121561075b57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461078b57600080fd5b9392505050565b60608101818360005b60038110156107bd57815160ff1683526020928301929091019060010161079b565b50505092915050565b6001600160a01b03811681146107db57600080fd5b50565b6000602082840312156107f057600080fd5b813561078b816107c6565b60006060828403121561053857600080fd5b6000806040838503121561082057600080fd5b823561082b816107c6565b9150602083013567ffffffffffffffff81111561084757600080fd5b610853858286016107fb565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600081516003811061089557634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101561091657610908838551610873565b9385019392506001016108f5565b50909695505050505050565b60008060006060848603121561093757600080fd5b8335610942816107c6565b9250602084013561ffff8116811461095957600080fd5b9150604084013567ffffffffffffffff81111561097557600080fd5b610981868287016107fb565b9150509250925092565b6000815180845260005b818110156109b157602081850181015186830182015201610995565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b83811015610a0a5781516001600160a01b0316875295820195908201906001016109e5565b509495945050505050565b6000815160408452610a2a60408501826109d1565b60208481015186830387830152805180845290820193509091600091908301905b80831015610a7057610a5e828651610873565b91508385019450600183019250610a4b565b509695505050505050565b604081526000610a8e604083018561098b565b8281036020840152610aa08185610a15565b95945050505050565b60008060408385031215610abc57600080fd5b8235610ac7816107c6565b91506020830135610ad7816107c6565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610b1b57610b1b610ae2565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b4a57610b4a610ae2565b604052919050565b600082601f830112610b6357600080fd5b813567ffffffffffffffff811115610b7d57610b7d610ae2565b610b906020601f19601f84011601610b21565b818152846020838601011115610ba557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215610bd557600080fd5b8235610be0816107c6565b9150602083013567ffffffffffffffff811115610bfc57600080fd5b61085385828601610b52565b6001600160a01b03831681526040602082015260006104406040830184610a15565b600060608236031215610c3c57600080fd5b610c44610af8565b8235610c4f816107c6565b815260208381013567ffffffffffffffff80821115610c6d57600080fd5b9085019036601f830112610c8057600080fd5b813581811115610c9257610c92610ae2565b8060051b610ca1858201610b21565b9182528381018501918581019036841115610cbb57600080fd5b948601945b83861015610ce55785359250610cd5836107c6565b8282529486019490860190610cc0565b8087890152505050506040860135925080831115610d0257600080fd5b5050610d1036828601610b52565b60408301525092915050565b60006001600160a01b03808516835260406020840152808451166040840152506020830151606080840152610d5460a08401826109d1565b905060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0848303016080850152610d8f828261098b565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160a01b03808316818103610de157610de1610daf565b6001019392505050565b6001600160a01b0383168152604060208201526000610440604083018461098b565b6001600160a01b03828116828216039080821115610e2d57610e2d610daf565b509291505056fea264697066735822122036c1b16bc5713b8e8b07b71fc5f3e3d20d280ad39359fbc19e3f316d69124f9464736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "ConflictingValues";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "fromBuild";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "thisBuild";
            readonly type: "uint16";
        }];
        readonly name: "InvalidUpdatePath";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "InstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UninstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "build";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UpdatePrepared";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_helpersCount";
            readonly type: "uint160";
        }];
        readonly name: "mockHelperCount";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_lowerIndex";
            readonly type: "uint160";
        }, {
            readonly internalType: "uint160";
            readonly name: "_upperIndex";
            readonly type: "uint160";
        }];
        readonly name: "mockPermissionIndexes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "prepareInstallation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUninstallation";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "permissions";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "_fromBuild";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "reset";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginUUPSUpgradeableSetupV1MockBadInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginUUPSUpgradeableSetupV1MockBad;
}

type PluginUUPSUpgradeableSetupV2MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginUUPSUpgradeableSetupV2Mock__factory extends ContractFactory {
    constructor(...args: PluginUUPSUpgradeableSetupV2MockConstructorParams);
    deploy(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginUUPSUpgradeableSetupV2Mock>;
    getDeployTransaction(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginUUPSUpgradeableSetupV2Mock;
    connect(signer: Signer): PluginUUPSUpgradeableSetupV2Mock__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b506040516119be3803806119be83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161192c610092600039600081816101490152610496015261192c6000f3fe60806040523480156200001157600080fd5b5060043610620000b05760003560e01c80639cb0a124116200007f578063bc93bb2e1162000062578063bc93bb2e14620001c1578063d826f88f146200020d578063f10832f1146200024457600080fd5b80639cb0a1241462000174578063a8a9c29e146200019a57600080fd5b806301ffc9a714620000b55780632ae9c60014620000e157806346c2002414620000fa5780635c60da1b146200013c575b600080fd5b620000cc620000c6366004620009ec565b6200026b565b60405190151581526020015b60405180910390f35b620000eb62000352565b604051620000d8919062000a30565b6200013a6200010b36600462000a7f565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b005b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152602001620000d8565b6200018b6200018536600462000ab2565b6200037e565b604051620000d8919062000b85565b620001b1620001ab36600462000bd2565b620003a7565b604051620000d892919062000d3c565b6200013a620001d236600462000d6e565b600180546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560028054929093169116179055565b6200013a6001805473ffffffffffffffffffffffffffffffffffffffff199081169091556002805482169055600080549091169055565b6200025b6200025536600462000e99565b62000470565b604051620000d892919062000ee5565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620002ff57507fffffffff0000000000000000000000000000000000000000000000000000000082167f2ae9c60000000000000000000000000000000000000000000000000000000000145b806200034c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6200035c620009c0565b5060408051606081018252600181526004602082015260009181019190915290565b60606200038f6000600180620004f3565b90506200034c83620003a18462000f09565b6200055a565b6060620003c7604051806040016040528060608152602001606081525090565b8361ffff166001036200045157620003e0600262000599565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe27e9a4e0000000000000000000000000000000000000000000000000000000017905291506200044b600160026000620004f3565b60208201525b620004688585620004628662000f09565b620005ce565b935093915050565b600062000490604051806040016040528060608152602001606081525090565b620004bc7f00000000000000000000000000000000000000000000000000000000000000008562000610565b9150620004ca600262000599565b8152620004db6000600281620004f3565b6020820152620004ec8484620006bd565b9250929050565b60015460609062000552906001600160a01b031660000362000516578462000523565b6001546001600160a01b03165b6002546001600160a01b03166000036200053e57846200054b565b6002546001600160a01b03165b84620006f0565b949350505050565b7ffcfdc3b542b4ad36e57b00e7f79a3d4121a844f1b7fa32829e4914320236f47482826040516200058d92919062001054565b60405180910390a15050565b600080546060916200034c916001600160a01b03169003620005bc5782620008c0565b6000546001600160a01b0316620008c0565b7fa7c20c270816878ef6c3ea21c83d577618b234443168362c35e7023422f6d04b838383604051620006039392919062001078565b60405180910390a1505050565b6040516001600160a01b0382166024820152600090620006b69084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915262000984565b9392505050565b7f788f140d37f3ca802bffe7ec3134153ce98a1c58d10bbb00a4b6d449beca9ac882826040516200058d929190620010a6565b6060826001600160a01b0316846001600160a01b031611156200073f576040517fe9004f3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6200074b8484620010e0565b6001600160a01b031667ffffffffffffffff8111156200076f576200076f62000dac565b604051908082528060200260200182016040528015620007e857816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816200078e5790505b509050835b836001600160a01b0316816001600160a01b03161015620008b8576040518060a0016040528084600281111562000828576200082862000b08565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef608090910152826200087b8784620010e0565b6001600160a01b0316815181106200089757620008976200110a565b60200260200101819052508080620008af9062001120565b915050620007ed565b509392505050565b6060816001600160a01b031667ffffffffffffffff811115620008e757620008e762000dac565b60405190808252806020026020018201604052801562000911578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b031610156200097e578082826001600160a01b0316815181106200095157620009516200110a565b6001600160a01b039092166020928302919091019091015280620009758162001120565b91505062000917565b50919050565b600082826040516200099690620009de565b620009a3929190620010a6565b604051809103906000f080158015620008b8573d6000803e3d6000fd5b60405180606001604052806003906020820280368337509192915050565b6107ad806200114a83390190565b600060208284031215620009ff57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114620006b657600080fd5b60608101818360005b600381101562000a5d57815160ff1683526020928301929091019060010162000a39565b50505092915050565b6001600160a01b038116811462000a7c57600080fd5b50565b60006020828403121562000a9257600080fd5b8135620006b68162000a66565b6000606082840312156200097e57600080fd5b6000806040838503121562000ac657600080fd5b823562000ad38162000a66565b9150602083013567ffffffffffffffff81111562000af057600080fd5b62000afe8582860162000a9f565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600081516003811062000b4157634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101562000bc65762000bb783855162000b1e565b93850193925060010162000ba1565b50909695505050505050565b60008060006060848603121562000be857600080fd5b833562000bf58162000a66565b9250602084013561ffff8116811462000c0d57600080fd5b9150604084013567ffffffffffffffff81111562000c2a57600080fd5b62000c388682870162000a9f565b9150509250925092565b6000815180845260005b8181101562000c6a5760208185018101518683018201520162000c4c565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b8381101562000cc55781516001600160a01b03168752958201959082019060010162000c9e565b509495945050505050565b600081516040845262000ce7604085018262000c8a565b60208481015186830387830152805180845290820193509091600091908301905b8083101562000d315762000d1e82865162000b1e565b9150838501945060018301925062000d08565b509695505050505050565b60408152600062000d51604083018562000c42565b828103602084015262000d65818562000cd0565b95945050505050565b6000806040838503121562000d8257600080fd5b823562000d8f8162000a66565b9150602083013562000da18162000a66565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171562000de85762000de862000dac565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171562000e1a5762000e1a62000dac565b604052919050565b600082601f83011262000e3457600080fd5b813567ffffffffffffffff81111562000e515762000e5162000dac565b62000e666020601f19601f8401160162000dee565b81815284602083860101111562000e7c57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121562000ead57600080fd5b823562000eba8162000a66565b9150602083013567ffffffffffffffff81111562000ed757600080fd5b62000afe8582860162000e22565b6001600160a01b038316815260406020820152600062000552604083018462000cd0565b60006060823603121562000f1c57600080fd5b62000f2662000dc2565b823562000f338162000a66565b815260208381013567ffffffffffffffff8082111562000f5257600080fd5b9085019036601f83011262000f6657600080fd5b81358181111562000f7b5762000f7b62000dac565b8060051b62000f8c85820162000dee565b918252838101850191858101903684111562000fa757600080fd5b948601945b8386101562000fd5578535925062000fc48362000a66565b828252948601949086019062000fac565b808789015250505050604086013592508083111562000ff357600080fd5b5050620010033682860162000e22565b60408301525092915050565b6001600160a01b038151168252600060208201516060602085015262001039606085018262000c8a565b90506040830151848203604086015262000d65828262000c42565b6001600160a01b03831681526040602082015260006200055260408301846200100f565b6001600160a01b038416815261ffff8316602082015260606040820152600062000d6560608301846200100f565b6001600160a01b038316815260406020820152600062000552604083018462000c42565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03828116828216039080821115620011035762001103620010ca565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b038083168181036200113f576200113f620010ca565b600101939250505056fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122015b2167515f4ace04b6d5f73baf181691326aab8bf1c62e731322916c13586ec64736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204f2dcb5a055425ca8dd37d528de85f0b69492915ccdcd54fb44c65e3b38c381264736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "ConflictingValues";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "fromBuild";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "thisBuild";
            readonly type: "uint16";
        }];
        readonly name: "InvalidUpdatePath";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "InstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UninstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "build";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UpdatePrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "k";
            readonly type: "uint256";
        }];
        readonly name: "amazing";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_helpersCount";
            readonly type: "uint160";
        }];
        readonly name: "mockHelperCount";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_lowerIndex";
            readonly type: "uint160";
        }, {
            readonly internalType: "uint160";
            readonly name: "_upperIndex";
            readonly type: "uint160";
        }];
        readonly name: "mockPermissionIndexes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "prepareInstallation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUninstallation";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "permissions";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "_currentBuild";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "initData";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "reset";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginUUPSUpgradeableSetupV2MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginUUPSUpgradeableSetupV2Mock;
}

type PluginUUPSUpgradeableSetupV3MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginUUPSUpgradeableSetupV3Mock__factory extends ContractFactory {
    constructor(...args: PluginUUPSUpgradeableSetupV3MockConstructorParams);
    deploy(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginUUPSUpgradeableSetupV3Mock>;
    getDeployTransaction(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginUUPSUpgradeableSetupV3Mock;
    connect(signer: Signer): PluginUUPSUpgradeableSetupV3Mock__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b50604051611a48380380611a4883398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516119b661009260003960008181610149015261052001526119b66000f3fe60806040523480156200001157600080fd5b5060043610620000b05760003560e01c80639cb0a124116200007f578063bc93bb2e1162000062578063bc93bb2e14620001c1578063d826f88f146200020d578063f10832f1146200024457600080fd5b80639cb0a1241462000174578063a8a9c29e146200019a57600080fd5b806301ffc9a714620000b55780632ae9c60014620000e157806346c2002414620000fa5780635c60da1b146200013c575b600080fd5b620000cc620000c636600462000a76565b6200026b565b60405190151581526020015b60405180910390f35b620000eb62000352565b604051620000d8919062000aba565b6200013a6200010b36600462000b09565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b005b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152602001620000d8565b6200018b6200018536600462000b3c565b6200037e565b604051620000d8919062000c0f565b620001b1620001ab36600462000c5c565b620003a7565b604051620000d892919062000dc6565b6200013a620001d236600462000df8565b600180546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560028054929093169116179055565b6200013a6001805473ffffffffffffffffffffffffffffffffffffffff199081169091556002805482169055600080549091169055565b6200025b6200025536600462000f23565b620004fa565b604051620000d892919062000f6f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620002ff57507fffffffff0000000000000000000000000000000000000000000000000000000082167f2ae9c60000000000000000000000000000000000000000000000000000000000145b806200034c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6200035c62000a4a565b5060408051606081018252600181526004602082015260009181019190915290565b60606200038f60006001806200057d565b90506200034c83620003a18462000f93565b620005e4565b6060620003c7604051806040016040528060608152602001606081525090565b8361ffff166001036200045157620003e0600362000623565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7cef46950000000000000000000000000000000000000000000000000000000017905291506200044b6001600360006200057d565b60208201525b8361ffff16600203620004db576200046a600362000623565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f14045768000000000000000000000000000000000000000000000000000000001790529150620004d56002600360006200057d565b60208201525b620004f28585620004ec8662000f93565b62000658565b935093915050565b60006200051a604051806040016040528060608152602001606081525090565b620005467f0000000000000000000000000000000000000000000000000000000000000000856200069a565b915062000554600362000623565b81526200056560006003816200057d565b602082015262000576848462000747565b9250929050565b600154606090620005dc906001600160a01b0316600003620005a05784620005ad565b6001546001600160a01b03165b6002546001600160a01b0316600003620005c85784620005d5565b6002546001600160a01b03165b846200077a565b949350505050565b7ffcfdc3b542b4ad36e57b00e7f79a3d4121a844f1b7fa32829e4914320236f474828260405162000617929190620010de565b60405180910390a15050565b600080546060916200034c916001600160a01b031690036200064657826200094a565b6000546001600160a01b03166200094a565b7fa7c20c270816878ef6c3ea21c83d577618b234443168362c35e7023422f6d04b8383836040516200068d9392919062001102565b60405180910390a1505050565b6040516001600160a01b0382166024820152600090620007409084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915262000a0e565b9392505050565b7f788f140d37f3ca802bffe7ec3134153ce98a1c58d10bbb00a4b6d449beca9ac882826040516200061792919062001130565b6060826001600160a01b0316846001600160a01b03161115620007c9576040517fe9004f3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620007d584846200116a565b6001600160a01b031667ffffffffffffffff811115620007f957620007f962000e36565b6040519080825280602002602001820160405280156200087257816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620008185790505b509050835b836001600160a01b0316816001600160a01b0316101562000942576040518060a00160405280846002811115620008b257620008b262000b92565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef608090910152826200090587846200116a565b6001600160a01b03168151811062000921576200092162001194565b602002602001018190525080806200093990620011aa565b91505062000877565b509392505050565b6060816001600160a01b031667ffffffffffffffff81111562000971576200097162000e36565b6040519080825280602002602001820160405280156200099b578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000a08578082826001600160a01b031681518110620009db57620009db62001194565b6001600160a01b039092166020928302919091019091015280620009ff81620011aa565b915050620009a1565b50919050565b6000828260405162000a209062000a68565b62000a2d92919062001130565b604051809103906000f08015801562000942573d6000803e3d6000fd5b60405180606001604052806003906020820280368337509192915050565b6107ad80620011d483390190565b60006020828403121562000a8957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146200074057600080fd5b60608101818360005b600381101562000ae757815160ff1683526020928301929091019060010162000ac3565b50505092915050565b6001600160a01b038116811462000b0657600080fd5b50565b60006020828403121562000b1c57600080fd5b8135620007408162000af0565b60006060828403121562000a0857600080fd5b6000806040838503121562000b5057600080fd5b823562000b5d8162000af0565b9150602083013567ffffffffffffffff81111562000b7a57600080fd5b62000b888582860162000b29565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600081516003811062000bcb57634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101562000c505762000c4183855162000ba8565b93850193925060010162000c2b565b50909695505050505050565b60008060006060848603121562000c7257600080fd5b833562000c7f8162000af0565b9250602084013561ffff8116811462000c9757600080fd5b9150604084013567ffffffffffffffff81111562000cb457600080fd5b62000cc28682870162000b29565b9150509250925092565b6000815180845260005b8181101562000cf45760208185018101518683018201520162000cd6565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b8381101562000d4f5781516001600160a01b03168752958201959082019060010162000d28565b509495945050505050565b600081516040845262000d71604085018262000d14565b60208481015186830387830152805180845290820193509091600091908301905b8083101562000dbb5762000da882865162000ba8565b9150838501945060018301925062000d92565b509695505050505050565b60408152600062000ddb604083018562000ccc565b828103602084015262000def818562000d5a565b95945050505050565b6000806040838503121562000e0c57600080fd5b823562000e198162000af0565b9150602083013562000e2b8162000af0565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171562000e725762000e7262000e36565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171562000ea45762000ea462000e36565b604052919050565b600082601f83011262000ebe57600080fd5b813567ffffffffffffffff81111562000edb5762000edb62000e36565b62000ef06020601f19601f8401160162000e78565b81815284602083860101111562000f0657600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121562000f3757600080fd5b823562000f448162000af0565b9150602083013567ffffffffffffffff81111562000f6157600080fd5b62000b888582860162000eac565b6001600160a01b0383168152604060208201526000620005dc604083018462000d5a565b60006060823603121562000fa657600080fd5b62000fb062000e4c565b823562000fbd8162000af0565b815260208381013567ffffffffffffffff8082111562000fdc57600080fd5b9085019036601f83011262000ff057600080fd5b81358181111562001005576200100562000e36565b8060051b6200101685820162000e78565b91825283810185019185810190368411156200103157600080fd5b948601945b838610156200105f57853592506200104e8362000af0565b828252948601949086019062001036565b80878901525050505060408601359250808311156200107d57600080fd5b50506200108d3682860162000eac565b60408301525092915050565b6001600160a01b0381511682526000602082015160606020850152620010c3606085018262000d14565b90506040830151848203604086015262000def828262000ccc565b6001600160a01b0383168152604060208201526000620005dc604083018462001099565b6001600160a01b038416815261ffff8316602082015260606040820152600062000def606083018462001099565b6001600160a01b0383168152604060208201526000620005dc604083018462000ccc565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038281168282160390808211156200118d576200118d62001154565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808316818103620011c957620011c962001154565b600101939250505056fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122015b2167515f4ace04b6d5f73baf181691326aab8bf1c62e731322916c13586ec64736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220cd555204280ba381fc405c138d5e6a60d56454824ef21d602a3ccb86199d354364736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "ConflictingValues";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "fromBuild";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "thisBuild";
            readonly type: "uint16";
        }];
        readonly name: "InvalidUpdatePath";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "InstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UninstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "build";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UpdatePrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "k";
            readonly type: "uint256";
        }];
        readonly name: "amazing";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_helpersCount";
            readonly type: "uint160";
        }];
        readonly name: "mockHelperCount";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_lowerIndex";
            readonly type: "uint160";
        }, {
            readonly internalType: "uint160";
            readonly name: "_upperIndex";
            readonly type: "uint160";
        }];
        readonly name: "mockPermissionIndexes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "prepareInstallation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUninstallation";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "permissions";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "_currentBuild";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "initData";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "reset";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginUUPSUpgradeableSetupV3MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginUUPSUpgradeableSetupV3Mock;
}

type PluginUUPSUpgradeableSetupV4MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PluginUUPSUpgradeableSetupV4Mock__factory extends ContractFactory {
    constructor(...args: PluginUUPSUpgradeableSetupV4MockConstructorParams);
    deploy(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PluginUUPSUpgradeableSetupV4Mock>;
    getDeployTransaction(implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PluginUUPSUpgradeableSetupV4Mock;
    connect(signer: Signer): PluginUUPSUpgradeableSetupV4Mock__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b50604051611ad0380380611ad083398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611a3e61009260003960008181610149015261047a0152611a3e6000f3fe60806040523480156200001157600080fd5b5060043610620000b05760003560e01c80639cb0a124116200007f578063bc93bb2e1162000062578063bc93bb2e14620001c1578063d826f88f146200020d578063f10832f1146200024457600080fd5b80639cb0a1241462000174578063a8a9c29e146200019a57600080fd5b806301ffc9a714620000b55780632ae9c60014620000e157806346c2002414620000fa5780635c60da1b146200013c575b600080fd5b620000cc620000c636600462000afe565b6200026b565b60405190151581526020015b60405180910390f35b620000eb62000352565b604051620000d8919062000b42565b6200013a6200010b36600462000b91565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b005b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152602001620000d8565b6200018b6200018536600462000bc4565b6200037e565b604051620000d8919062000c97565b620001b1620001ab36600462000ce4565b620003a7565b604051620000d892919062000e4e565b6200013a620001d236600462000e80565b600180546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560028054929093169116179055565b6200013a6001805473ffffffffffffffffffffffffffffffffffffffff199081169091556002805482169055600080549091169055565b6200025b6200025536600462000fab565b62000454565b604051620000d892919062000ff7565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f99718b50000000000000000000000000000000000000000000000000000000001480620002ff57507fffffffff0000000000000000000000000000000000000000000000000000000082167f2ae9c60000000000000000000000000000000000000000000000000000000000145b806200034c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6200035c62000ad2565b5060408051606081018252600181526004602082015260009181019190915290565b60606200038f6000600180620004d7565b90506200034c83620003a1846200101b565b6200053e565b6060620003c7604051806040016040528060608152602001606081525090565b8361ffff16600303620003ef57620003e4600360046000620004d7565b602082015262000435565b8361ffff16600114806200040757508361ffff166002145b1562000435576200041a8585856200057d565b90925090506200042f600460056000620004d7565b60208201525b6200044c858562000446866200101b565b620006ab565b935093915050565b600062000474604051806040016040528060608152602001606081525090565b620004a07f000000000000000000000000000000000000000000000000000000000000000085620006ed565b9150620004ae60036200079a565b8152620004bf6000600381620004d7565b6020820152620004d08484620007cf565b9250929050565b60015460609062000536906001600160a01b0316600003620004fa578462000507565b6001546001600160a01b03165b6002546001600160a01b03166000036200052257846200052f565b6002546001600160a01b03165b8462000802565b949350505050565b7ffcfdc3b542b4ad36e57b00e7f79a3d4121a844f1b7fa32829e4914320236f47482826040516200057192919062001166565b60405180910390a15050565b60606200059d604051806040016040528060608152602001606081525090565b8361ffff166001036200062757620005b660036200079a565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7cef469500000000000000000000000000000000000000000000000000000000179052915062000621600160036000620004d7565b60208201525b8361ffff1660020362000435576200064060036200079a565b81526040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f140457680000000000000000000000000000000000000000000000000000000017905291506200042f600260036000620004d7565b7fa7c20c270816878ef6c3ea21c83d577618b234443168362c35e7023422f6d04b838383604051620006e0939291906200118a565b60405180910390a1505050565b6040516001600160a01b0382166024820152600090620007939084907fc4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e59060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152620009d2565b9392505050565b600080546060916200034c916001600160a01b03169003620007bd578262000a0e565b6000546001600160a01b031662000a0e565b7f788f140d37f3ca802bffe7ec3134153ce98a1c58d10bbb00a4b6d449beca9ac8828260405162000571929190620011b8565b6060826001600160a01b0316846001600160a01b0316111562000851576040517fe9004f3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6200085d8484620011f2565b6001600160a01b031667ffffffffffffffff81111562000881576200088162000ebe565b604051908082528060200260200182016040528015620008fa57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181620008a05790505b509050835b836001600160a01b0316816001600160a01b03161015620009ca576040518060a001604052808460028111156200093a576200093a62000c1a565b81526001600160a01b038316602082018190526040820152600060608201527fa280eec51ab8e1bc4b6b0c1b7f1bde785761b787a49db404e3e9338ed9b016ef608090910152826200098d8784620011f2565b6001600160a01b031681518110620009a957620009a96200121c565b60200260200101819052508080620009c19062001232565b915050620008ff565b509392505050565b60008282604051620009e49062000af0565b620009f1929190620011b8565b604051809103906000f080158015620009ca573d6000803e3d6000fd5b6060816001600160a01b031667ffffffffffffffff81111562000a355762000a3562000ebe565b60405190808252806020026020018201604052801562000a5f578160200160208202803683370190505b50905060005b826001600160a01b0316816001600160a01b0316101562000acc578082826001600160a01b03168151811062000a9f5762000a9f6200121c565b6001600160a01b03909216602092830291909101909101528062000ac38162001232565b91505062000a65565b50919050565b60405180606001604052806003906020820280368337509192915050565b6107ad806200125c83390190565b60006020828403121562000b1157600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146200079357600080fd5b60608101818360005b600381101562000b6f57815160ff1683526020928301929091019060010162000b4b565b50505092915050565b6001600160a01b038116811462000b8e57600080fd5b50565b60006020828403121562000ba457600080fd5b8135620007938162000b78565b60006060828403121562000acc57600080fd5b6000806040838503121562000bd857600080fd5b823562000be58162000b78565b9150602083013567ffffffffffffffff81111562000c0257600080fd5b62000c108582860162000bb1565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600081516003811062000c5357634e487b7160e01b600052602160045260246000fd5b8352506020818101516001600160a01b0390811691840191909152604080830151821690840152606080830151909116908301526080908101519082015260a00190565b6020808252825182820181905260009190848201906040850190845b8181101562000cd85762000cc983855162000c30565b93850193925060010162000cb3565b50909695505050505050565b60008060006060848603121562000cfa57600080fd5b833562000d078162000b78565b9250602084013561ffff8116811462000d1f57600080fd5b9150604084013567ffffffffffffffff81111562000d3c57600080fd5b62000d4a8682870162000bb1565b9150509250925092565b6000815180845260005b8181101562000d7c5760208185018101518683018201520162000d5e565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b8381101562000dd75781516001600160a01b03168752958201959082019060010162000db0565b509495945050505050565b600081516040845262000df9604085018262000d9c565b60208481015186830387830152805180845290820193509091600091908301905b8083101562000e435762000e3082865162000c30565b9150838501945060018301925062000e1a565b509695505050505050565b60408152600062000e63604083018562000d54565b828103602084015262000e77818562000de2565b95945050505050565b6000806040838503121562000e9457600080fd5b823562000ea18162000b78565b9150602083013562000eb38162000b78565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171562000efa5762000efa62000ebe565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171562000f2c5762000f2c62000ebe565b604052919050565b600082601f83011262000f4657600080fd5b813567ffffffffffffffff81111562000f635762000f6362000ebe565b62000f786020601f19601f8401160162000f00565b81815284602083860101111562000f8e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121562000fbf57600080fd5b823562000fcc8162000b78565b9150602083013567ffffffffffffffff81111562000fe957600080fd5b62000c108582860162000f34565b6001600160a01b038316815260406020820152600062000536604083018462000de2565b6000606082360312156200102e57600080fd5b6200103862000ed4565b8235620010458162000b78565b815260208381013567ffffffffffffffff808211156200106457600080fd5b9085019036601f8301126200107857600080fd5b8135818111156200108d576200108d62000ebe565b8060051b6200109e85820162000f00565b9182528381018501918581019036841115620010b957600080fd5b948601945b83861015620010e75785359250620010d68362000b78565b8282529486019490860190620010be565b80878901525050505060408601359250808311156200110557600080fd5b5050620011153682860162000f34565b60408301525092915050565b6001600160a01b03815116825260006020820151606060208501526200114b606085018262000d9c565b90506040830151848203604086015262000e77828262000d54565b6001600160a01b038316815260406020820152600062000536604083018462001121565b6001600160a01b038416815261ffff8316602082015260606040820152600062000e77606083018462001121565b6001600160a01b038316815260406020820152600062000536604083018462000d54565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03828116828216039080821115620012155762001215620011dc565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808316818103620012515762001251620011dc565b600101939250505056fe60806040526040516107ad3803806107ad83398101604081905261002291610319565b61002e82826000610035565b5050610436565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610786602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103e7565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b81526004016101489190610403565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b50506000910152565b6000806040838503121561032c57600080fd5b82516001600160a01b038116811461034357600080fd5b60208401519092506001600160401b038082111561036057600080fd5b818501915085601f83011261037457600080fd5b815181811115610386576103866102df565b604051601f8201601f19908116603f011681019083821181831017156103ae576103ae6102df565b816040528281528860208487010111156103c757600080fd5b6103d88360208301602088016102f5565b80955050505050509250929050565b600082516103f98184602087016102f5565b9190910192915050565b60208152600082518060208401526104228160408501602087016102f5565b601f01601f19169190910160400192915050565b610341806104456000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102e5602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610277565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9190610293565b60005b8381101561026e578181015183820152602001610256565b50506000910152565b60008251610289818460208701610253565b9190910192915050565b60208152600082518060208401526102b2816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122015b2167515f4ace04b6d5f73baf181691326aab8bf1c62e731322916c13586ec64736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c402d75c8e26421823e1007e633a3eccb04903d49eb7bc292c0501e2ef365c7364736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "ConflictingValues";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "fromBuild";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "thisBuild";
            readonly type: "uint16";
        }];
        readonly name: "InvalidUpdatePath";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "InstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UninstallationPrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "build";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "payload";
            readonly type: "tuple";
        }];
        readonly name: "UpdatePrepared";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "k";
            readonly type: "uint256";
        }];
        readonly name: "amazing";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_helpersCount";
            readonly type: "uint160";
        }];
        readonly name: "mockHelperCount";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint160";
            readonly name: "_lowerIndex";
            readonly type: "uint160";
        }, {
            readonly internalType: "uint160";
            readonly name: "_upperIndex";
            readonly type: "uint160";
        }];
        readonly name: "mockPermissionIndexes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "prepareInstallation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "plugin";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUninstallation";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum PermissionLib.Operation";
                readonly name: "operation";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "where";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "who";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "condition";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "permissionId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
            readonly name: "permissions";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "_currentBuild";
            readonly type: "uint16";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "plugin";
                readonly type: "address";
            }, {
                readonly internalType: "address[]";
                readonly name: "currentHelpers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPluginSetup.SetupPayload";
            readonly name: "_payload";
            readonly type: "tuple";
        }];
        readonly name: "prepareUpdate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "initData";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "helpers";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "enum PermissionLib.Operation";
                    readonly name: "operation";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "where";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "who";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "condition";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "permissionId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct PermissionLib.MultiTargetPermission[]";
                readonly name: "permissions";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct IPluginSetup.PreparedSetupData";
            readonly name: "preparedSetupData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "reset";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PluginUUPSUpgradeableSetupV4MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PluginUUPSUpgradeableSetupV4Mock;
}

type index$8_MockedHelper__factory = MockedHelper__factory;
declare const index$8_MockedHelper__factory: typeof MockedHelper__factory;
type index$8_PluginUUPSUpgradeableSetupV1Mock__factory = PluginUUPSUpgradeableSetupV1Mock__factory;
declare const index$8_PluginUUPSUpgradeableSetupV1Mock__factory: typeof PluginUUPSUpgradeableSetupV1Mock__factory;
type index$8_PluginUUPSUpgradeableSetupV1MockBad__factory = PluginUUPSUpgradeableSetupV1MockBad__factory;
declare const index$8_PluginUUPSUpgradeableSetupV1MockBad__factory: typeof PluginUUPSUpgradeableSetupV1MockBad__factory;
type index$8_PluginUUPSUpgradeableSetupV2Mock__factory = PluginUUPSUpgradeableSetupV2Mock__factory;
declare const index$8_PluginUUPSUpgradeableSetupV2Mock__factory: typeof PluginUUPSUpgradeableSetupV2Mock__factory;
type index$8_PluginUUPSUpgradeableSetupV3Mock__factory = PluginUUPSUpgradeableSetupV3Mock__factory;
declare const index$8_PluginUUPSUpgradeableSetupV3Mock__factory: typeof PluginUUPSUpgradeableSetupV3Mock__factory;
type index$8_PluginUUPSUpgradeableSetupV4Mock__factory = PluginUUPSUpgradeableSetupV4Mock__factory;
declare const index$8_PluginUUPSUpgradeableSetupV4Mock__factory: typeof PluginUUPSUpgradeableSetupV4Mock__factory;
declare namespace index$8 {
  export {
    index$8_MockedHelper__factory as MockedHelper__factory,
    index$8_PluginUUPSUpgradeableSetupV1Mock__factory as PluginUUPSUpgradeableSetupV1Mock__factory,
    index$8_PluginUUPSUpgradeableSetupV1MockBad__factory as PluginUUPSUpgradeableSetupV1MockBad__factory,
    index$8_PluginUUPSUpgradeableSetupV2Mock__factory as PluginUUPSUpgradeableSetupV2Mock__factory,
    index$8_PluginUUPSUpgradeableSetupV3Mock__factory as PluginUUPSUpgradeableSetupV3Mock__factory,
    index$8_PluginUUPSUpgradeableSetupV4Mock__factory as PluginUUPSUpgradeableSetupV4Mock__factory,
  };
}

declare namespace index$7 {
  export {
    index$9 as pluginUupsUpgradeableMockSol,
    index$8 as pluginUupsUpgradeableSetupMockSol,
  };
}

declare namespace index$6 {
  export {
    index$c as cloneable,
    index$a as constructable,
    index$7 as uupsUpgradeable,
  };
}

type ERC1155MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ERC1155Mock__factory extends ContractFactory {
    constructor(...args: ERC1155MockConstructorParams);
    deploy(_uri: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ERC1155Mock>;
    getDeployTransaction(_uri: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ERC1155Mock;
    connect(signer: Signer): ERC1155Mock__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_uri";
            readonly type: "string";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "ApprovalForAll";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "ids";
            readonly type: "uint256[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }];
        readonly name: "TransferBatch";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "TransferSingle";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "value";
            readonly type: "string";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }];
        readonly name: "URI";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "accounts";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "ids";
            readonly type: "uint256[]";
        }];
        readonly name: "balanceOfBatch";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "mint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "ids";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "safeBatchTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "uri";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ERC1155MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ERC1155Mock;
}

type ERC20MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ERC20Mock__factory extends ContractFactory {
    constructor(...args: ERC20MockConstructorParams);
    deploy(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ERC20Mock>;
    getDeployTransaction(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ERC20Mock;
    connect(signer: Signer): ERC20Mock__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "_symbol";
            readonly type: "string";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals_";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "subtractedValue";
            readonly type: "uint256";
        }];
        readonly name: "decreaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "addedValue";
            readonly type: "uint256";
        }];
        readonly name: "increaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "setBalance";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_decimals";
            readonly type: "uint8";
        }];
        readonly name: "setDecimals";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ERC20MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ERC20Mock;
}

type ERC721MockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ERC721Mock__factory extends ContractFactory {
    constructor(...args: ERC721MockConstructorParams);
    deploy(name_: PromiseOrValue<string>, symbol_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ERC721Mock>;
    getDeployTransaction(name_: PromiseOrValue<string>, symbol_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ERC721Mock;
    connect(signer: Signer): ERC721Mock__factory;
    static readonly bytecode = "0x60806040523480156200001157600080fd5b506040516200196c3803806200196c833981016040819052620000349162000123565b818160006200004483826200021c565b5060016200005382826200021c565b5050505050620002e8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008657600080fd5b81516001600160401b0380821115620000a357620000a36200005e565b604051601f8301601f19908116603f01168101908282118183101715620000ce57620000ce6200005e565b81604052838152602092508683858801011115620000eb57600080fd5b600091505b838210156200010f5785820183015181830184015290820190620000f0565b600093810190920192909252949350505050565b600080604083850312156200013757600080fd5b82516001600160401b03808211156200014f57600080fd5b6200015d8683870162000074565b935060208501519150808211156200017457600080fd5b50620001838582860162000074565b9150509250929050565b600181811c90821680620001a257607f821691505b602082108103620001c357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021757600081815260208120601f850160051c81016020861015620001f25750805b601f850160051c820191505b818110156200021357828155600101620001fe565b5050505b505050565b81516001600160401b038111156200023857620002386200005e565b62000250816200024984546200018d565b84620001c9565b602080601f8311600181146200028857600084156200026f5750858301515b600019600386901b1c1916600185901b17855562000213565b600085815260208120601f198616915b82811015620002b95788860151825594840194600190910190840162000298565b5085821015620002d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61167480620002f86000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806342966c6811610097578063a22cb46511610066578063a22cb465146101ff578063b88d4fde14610212578063c87b56dd14610225578063e985e9c51461023857600080fd5b806342966c68146101b05780636352211e146101c357806370a08231146101d657806395d89b41146101f757600080fd5b8063095ea7b3116100d3578063095ea7b31461016257806323b872dd1461017757806340c10f191461018a57806342842e0e1461019d57600080fd5b806301ffc9a7146100fa57806306fdde0314610122578063081812fc14610137575b600080fd5b61010d6101083660046112b3565b610274565b60405190151581526020015b60405180910390f35b61012a610359565b6040516101199190611320565b61014a610145366004611333565b6103eb565b6040516001600160a01b039091168152602001610119565b610175610170366004611368565b610412565b005b610175610185366004611392565b610548565b610175610198366004611368565b6105cf565b6101756101ab366004611392565b6105dd565b6101756101be366004611333565b6105f8565b61014a6101d1366004611333565b610604565b6101e96101e43660046113ce565b610669565b604051908152602001610119565b61012a610703565b61017561020d3660046113e9565b610712565b610175610220366004611454565b61071d565b61012a610233366004611333565b6107ab565b61010d610246366004611530565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061030757507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061035357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60606000805461036890611563565b80601f016020809104026020016040519081016040528092919081815260200182805461039490611563565b80156103e15780601f106103b6576101008083540402835291602001916103e1565b820191906000526020600020905b8154815290600101906020018083116103c457829003601f168201915b5050505050905090565b60006103f68261081f565b506000908152600460205260409020546001600160a01b031690565b600061041d82610604565b9050806001600160a01b0316836001600160a01b0316036104ab5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806104c757506104c78133610246565b6105395760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104a2565b6105438383610883565b505050565b61055233826108fe565b6105c45760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016104a2565b61054383838361097d565b6105d98282610bb3565b5050565b6105438383836040518060200160405280600081525061071d565b61060181610d4b565b50565b6000818152600260205260408120546001600160a01b0316806103535760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104a2565b60006001600160a01b0382166106e75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016104a2565b506001600160a01b031660009081526003602052604090205490565b60606001805461036890611563565b6105d9338383610ded565b61072733836108fe565b6107995760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016104a2565b6107a584848484610ed9565b50505050565b60606107b68261081f565b60006107cd60408051602081019091526000815290565b905060008151116107ed5760405180602001604052806000815250610818565b806107f784610f62565b6040516020016108089291906115b6565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b03166106015760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104a2565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906108c582610604565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061090a83610604565b9050806001600160a01b0316846001600160a01b0316148061095157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806109755750836001600160a01b031661096a846103eb565b6001600160a01b0316145b949350505050565b826001600160a01b031661099082610604565b6001600160a01b031614610a0c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104a2565b6001600160a01b038216610a875760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104a2565b826001600160a01b0316610a9a82610604565b6001600160a01b031614610b165760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104a2565b6000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610c095760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104a2565b6000818152600260205260409020546001600160a01b031615610c6e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104a2565b6000818152600260205260409020546001600160a01b031615610cd35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104a2565b6001600160a01b0382166000818152600360209081526040808320805460010190558483526002909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610d5682610604565b9050610d6182610604565b6000838152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b031603610e4e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104a2565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610ee484848461097d565b610ef084848484611002565b6107a55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104a2565b60606000610f6f836111a3565b600101905060008167ffffffffffffffff811115610f8f57610f8f611425565b6040519080825280601f01601f191660200182016040528015610fb9576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610fc357509392505050565b60006001600160a01b0384163b15611198576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061105f9033908990889088906004016115e5565b6020604051808303816000875af192505050801561109a575060408051601f3d908101601f1916820190925261109791810190611621565b60015b61114d573d8080156110c8576040519150601f19603f3d011682016040523d82523d6000602084013e6110cd565b606091505b5080516000036111455760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104a2565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610975565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106111ec577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611218576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061123657662386f26fc10000830492506010015b6305f5e100831061124e576305f5e100830492506008015b612710831061126257612710830492506004015b60648310611274576064830492506002015b600a83106103535760010192915050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461060157600080fd5b6000602082840312156112c557600080fd5b813561081881611285565b60005b838110156112eb5781810151838201526020016112d3565b50506000910152565b6000815180845261130c8160208601602086016112d0565b601f01601f19169290920160200192915050565b60208152600061081860208301846112f4565b60006020828403121561134557600080fd5b5035919050565b80356001600160a01b038116811461136357600080fd5b919050565b6000806040838503121561137b57600080fd5b6113848361134c565b946020939093013593505050565b6000806000606084860312156113a757600080fd5b6113b08461134c565b92506113be6020850161134c565b9150604084013590509250925092565b6000602082840312156113e057600080fd5b6108188261134c565b600080604083850312156113fc57600080fd5b6114058361134c565b91506020830135801515811461141a57600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561146a57600080fd5b6114738561134c565b93506114816020860161134c565b925060408501359150606085013567ffffffffffffffff808211156114a557600080fd5b818701915087601f8301126114b957600080fd5b8135818111156114cb576114cb611425565b604051601f8201601f19908116603f011681019083821181831017156114f3576114f3611425565b816040528281528a602084870101111561150c57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561154357600080fd5b61154c8361134c565b915061155a6020840161134c565b90509250929050565b600181811c9082168061157757607f821691505b6020821081036115b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600083516115c88184602088016112d0565b8351908301906115dc8183602088016112d0565b01949350505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261161760808301846112f4565b9695505050505050565b60006020828403121561163357600080fd5b81516108188161128556fea26469706673582212200fe15a802f9a49d699c875130609f6317cd8714d95b8257a1bd71edd946f84c864736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "symbol_";
            readonly type: "string";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "approved";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "ApprovalForAll";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "getApproved";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "mint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "ownerOf";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "approved";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "tokenURI";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ERC721MockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ERC721Mock;
}

type index$5_ERC1155Mock__factory = ERC1155Mock__factory;
declare const index$5_ERC1155Mock__factory: typeof ERC1155Mock__factory;
type index$5_ERC20Mock__factory = ERC20Mock__factory;
declare const index$5_ERC20Mock__factory: typeof ERC20Mock__factory;
type index$5_ERC721Mock__factory = ERC721Mock__factory;
declare const index$5_ERC721Mock__factory: typeof ERC721Mock__factory;
declare namespace index$5 {
  export {
    index$5_ERC1155Mock__factory as ERC1155Mock__factory,
    index$5_ERC20Mock__factory as ERC20Mock__factory,
    index$5_ERC721Mock__factory as ERC721Mock__factory,
  };
}

type RegistryUtilsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class RegistryUtils__factory extends ContractFactory {
    constructor(...args: RegistryUtilsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<RegistryUtils>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): RegistryUtils;
    connect(signer: Signer): RegistryUtils__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061024d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a6fe91aa14610030575b600080fd5b61004361003e366004610117565b610057565b604051901515815260200160405180910390f35b6000610063838361006c565b90505b92915050565b6000828280835b8181101561010a57600084848381811061008f5761008f610189565b919091013560f81c9150506060811180156100ad5750607b8160ff16105b156100b857506100f8565b602f8160ff161180156100ce5750603a8160ff16105b156100d957506100f8565b8060ff16602d036100ea57506100f8565b600095505050505050610066565b80610102816101b8565b915050610073565b5060019695505050505050565b6000806020838503121561012a57600080fd5b823567ffffffffffffffff8082111561014257600080fd5b818501915085601f83011261015657600080fd5b81358181111561016557600080fd5b86602082850101111561017757600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610210577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220bc55a73313458fed48a20091891413973411950ccf075d0b2d7bc0c1b84b0bfd64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "subdomain";
            readonly type: "string";
        }];
        readonly name: "isSubdomainValid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): RegistryUtilsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): RegistryUtils;
}

type index$4_RegistryUtils__factory = RegistryUtils__factory;
declare const index$4_RegistryUtils__factory: typeof RegistryUtils__factory;
declare namespace index$4 {
  export {
    index$4_RegistryUtils__factory as RegistryUtils__factory,
  };
}

type InterfaceBasedRegistryMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class InterfaceBasedRegistryMock__factory extends ContractFactory {
    constructor(...args: InterfaceBasedRegistryMockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<InterfaceBasedRegistryMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): InterfaceBasedRegistryMock;
    connect(signer: Signer): InterfaceBasedRegistryMock__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractAlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractERC165SupportInvalid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "ContractInterfaceInvalid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dao";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "where";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "permissionId";
            readonly type: "bytes32";
        }];
        readonly name: "DaoUnauthorized";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "Registered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "REGISTER_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPGRADE_REGISTRY_PERMISSION_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "dao";
        readonly outputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "entries";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IDAO";
            readonly name: "_dao";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4";
            readonly name: "targetInterface";
            readonly type: "bytes4";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registrant";
            readonly type: "address";
        }];
        readonly name: "register";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetInterfaceId";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): InterfaceBasedRegistryMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): InterfaceBasedRegistryMock;
}

type index$3_InterfaceBasedRegistryMock__factory = InterfaceBasedRegistryMock__factory;
declare const index$3_InterfaceBasedRegistryMock__factory: typeof InterfaceBasedRegistryMock__factory;
declare namespace index$3 {
  export {
    index$4 as registryUtilsTestSol,
    index$3_InterfaceBasedRegistryMock__factory as InterfaceBasedRegistryMock__factory,
  };
}

type ProtocolVersionMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ProtocolVersionMock__factory extends ContractFactory {
    constructor(...args: ProtocolVersionMockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ProtocolVersionMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ProtocolVersionMock;
    connect(signer: Signer): ProtocolVersionMock__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5060f58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80632ae9c60014602d575b600080fd5b60336047565b604051603e9190608d565b60405180910390f35b604d606f565b5060408051606081018252600181526004602082015260009181019190915290565b60405180606001604052806003906020820280368337509192915050565b60608101818360005b600381101560b657815160ff168352602092830192909101906001016096565b5050509291505056fea2646970667358221220a6cee7d0fc73089a6311e7b42e106e06a8478f90a2093271c201c485bff7e06a64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "protocolVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8[3]";
            readonly name: "";
            readonly type: "uint8[3]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): ProtocolVersionMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ProtocolVersionMock;
}

type index$2_ProtocolVersionMock__factory = ProtocolVersionMock__factory;
declare const index$2_ProtocolVersionMock__factory: typeof ProtocolVersionMock__factory;
declare namespace index$2 {
  export {
    index$g as dao,
    index$f as permission,
    index$6 as plugin,
    index$5 as token,
    index$3 as utils,
    index$2_ProtocolVersionMock__factory as ProtocolVersionMock__factory,
  };
}

declare namespace index$1 {
  export {
    index$r as core,
    index$j as framework,
    index$2 as test,
  };
}

declare namespace index {
  export {
    index$v as ensdomains,
    index$1 as src,
  };
}

type EventName$4 = 'Granted' | 'Revoked' | 'Executed' | 'Upgraded' | 'Deposited' | 'Initialized' | 'MetadataSet' | 'AdminChanged' | 'BeaconUpgraded' | 'CallbackReceived' | 'TrustedForwarderSet' | 'NativeTokenDeposited' | 'SignatureValidatorSet' | 'StandardCallbackRegistered';

type DAO$1_ExecutedEvent = ExecutedEvent;
type DAO$1_DepositedEvent = DepositedEvent;
type DAO$1_MetadataSetEvent = MetadataSetEvent;
type DAO$1_TrustedForwarderSetEvent = TrustedForwarderSetEvent;
type DAO$1_NativeTokenDepositedEvent = NativeTokenDepositedEvent;
type DAO$1_StandardCallbackRegisteredEvent = StandardCallbackRegisteredEvent;
declare namespace DAO$1 {
  export {
    EventName$4 as EventName,
    GrantedEvent$3 as GrantedEvent,
    RevokedEvent$3 as RevokedEvent,
    DAO$1_ExecutedEvent as ExecutedEvent,
    UpgradedEvent$9 as UpgradedEvent,
    DAO$1_DepositedEvent as DepositedEvent,
    InitializedEvent$d as InitializedEvent,
    DAO$1_MetadataSetEvent as MetadataSetEvent,
    AdminChangedEvent$9 as AdminChangedEvent,
    BeaconUpgradedEvent$9 as BeaconUpgradedEvent,
    CallbackReceivedEvent$2 as CallbackReceivedEvent,
    DAO$1_TrustedForwarderSetEvent as TrustedForwarderSetEvent,
    DAO$1_NativeTokenDepositedEvent as NativeTokenDepositedEvent,
    DAO$1_StandardCallbackRegisteredEvent as StandardCallbackRegisteredEvent,
  };
}

type EventName$3 = 'Upgraded' | 'AdminChanged' | 'BeaconUpgraded' | 'DAORegistered' | 'Initialized';

type DAORegistry_DAORegisteredEvent = DAORegisteredEvent;
declare namespace DAORegistry {
  export {
    EventName$3 as EventName,
    UpgradedEvent$8 as UpgradedEvent,
    AdminChangedEvent$8 as AdminChangedEvent,
    BeaconUpgradedEvent$8 as BeaconUpgradedEvent,
    DAORegistry_DAORegisteredEvent as DAORegisteredEvent,
    InitializedEvent$b as InitializedEvent,
  };
}

type EventName$2 = 'Granted' | 'Revoked' | 'Upgraded' | 'Initialized' | 'AdminChanged' | 'BeaconUpgraded' | 'VersionCreated' | 'ReleaseMetadataUpdated';

type PluginRepo$1_VersionCreatedEvent = VersionCreatedEvent;
type PluginRepo$1_ReleaseMetadataUpdatedEvent = ReleaseMetadataUpdatedEvent;
declare namespace PluginRepo$1 {
  export {
    EventName$2 as EventName,
    GrantedEvent$1 as GrantedEvent,
    RevokedEvent$1 as RevokedEvent,
    UpgradedEvent$7 as UpgradedEvent,
    InitializedEvent$a as InitializedEvent,
    AdminChangedEvent$7 as AdminChangedEvent,
    BeaconUpgradedEvent$7 as BeaconUpgradedEvent,
    PluginRepo$1_VersionCreatedEvent as VersionCreatedEvent,
    PluginRepo$1_ReleaseMetadataUpdatedEvent as ReleaseMetadataUpdatedEvent,
  };
}

type EventName$1 = 'Upgraded' | 'Initialized' | 'AdminChanged' | 'BeaconUpgraded' | 'PluginRepoRegistered';

type PluginRepoRegistry_PluginRepoRegisteredEvent = PluginRepoRegisteredEvent;
declare namespace PluginRepoRegistry {
  export {
    EventName$1 as EventName,
    UpgradedEvent$6 as UpgradedEvent,
    InitializedEvent$9 as InitializedEvent,
    AdminChangedEvent$6 as AdminChangedEvent,
    BeaconUpgradedEvent$6 as BeaconUpgradedEvent,
    PluginRepoRegistry_PluginRepoRegisteredEvent as PluginRepoRegisteredEvent,
  };
}

type EventName = 'UpdateApplied' | 'UpdatePrepared' | 'InstallationApplied' | 'InstallationPrepared' | 'UninstallationApplied' | 'UninstallationPrepared';

type PluginSetupProcessor$1_EventName = EventName;
type PluginSetupProcessor$1_UpdateAppliedEvent = UpdateAppliedEvent;
type PluginSetupProcessor$1_InstallationAppliedEvent = InstallationAppliedEvent;
type PluginSetupProcessor$1_UninstallationAppliedEvent = UninstallationAppliedEvent;
declare namespace PluginSetupProcessor$1 {
  export {
    PluginSetupProcessor$1_EventName as EventName,
    PluginSetupProcessor$1_UpdateAppliedEvent as UpdateAppliedEvent,
    UpdatePreparedEvent$6 as UpdatePreparedEvent,
    PluginSetupProcessor$1_InstallationAppliedEvent as InstallationAppliedEvent,
    InstallationPreparedEvent$6 as InstallationPreparedEvent,
    PluginSetupProcessor$1_UninstallationAppliedEvent as UninstallationAppliedEvent,
    UninstallationPreparedEvent$6 as UninstallationPreparedEvent,
  };
}

type MultiTargetPermissionStruct = PermissionLib$f.MultiTargetPermissionStruct;
type SingleTargetPermissionStruct = PermissionLib$f.SingleTargetPermissionStruct;

type DAO_MultiTargetPermissionStruct = MultiTargetPermissionStruct;
type DAO_SingleTargetPermissionStruct = SingleTargetPermissionStruct;
type DAO_ActionStruct = ActionStruct;
declare namespace DAO {
  export {
    DAO_MultiTargetPermissionStruct as MultiTargetPermissionStruct,
    DAO_SingleTargetPermissionStruct as SingleTargetPermissionStruct,
    DAO_ActionStruct as ActionStruct,
  };
}

type DAOSettingsStruct = DAOFactory$1.DAOSettingsStruct;
type PluginSettingsStruct = DAOFactory$1.PluginSettingsStruct;

type DAOFactory_DAOSettingsStruct = DAOSettingsStruct;
type DAOFactory_PluginSettingsStruct = PluginSettingsStruct;
declare namespace DAOFactory {
  export {
    DAOFactory_DAOSettingsStruct as DAOSettingsStruct,
    DAOFactory_PluginSettingsStruct as PluginSettingsStruct,
  };
}

type TagStruct = PluginRepo$3.TagStruct;
type VersionStruct = PluginRepo$3.VersionStruct;

type PluginRepo_TagStruct = TagStruct;
type PluginRepo_VersionStruct = VersionStruct;
declare namespace PluginRepo {
  export {
    PluginRepo_TagStruct as TagStruct,
    PluginRepo_VersionStruct as VersionStruct,
  };
}

type ApplyInstallationParamsStruct = PluginSetupProcessor$2.ApplyInstallationParamsStruct;
type ApplyUninstallationParamsStruct = PluginSetupProcessor$2.ApplyUninstallationParamsStruct;
type ApplyUpdateParamsStruct = PluginSetupProcessor$2.ApplyUpdateParamsStruct;
type PrepareInstallationParamsStruct = PluginSetupProcessor$2.PrepareInstallationParamsStruct;
type PrepareUninstallationParamsStruct = PluginSetupProcessor$2.PrepareUninstallationParamsStruct;
type PrepareUpdateParamsStructOutput = PluginSetupProcessor$2.PrepareUpdateParamsStructOutput;
type PluginSetupRefStruct = PluginSetupRefStruct$1;
type PluginSetupRefStructOutput = PluginSetupRefStructOutput$1;

type PluginSetupProcessor_ApplyInstallationParamsStruct = ApplyInstallationParamsStruct;
type PluginSetupProcessor_ApplyUninstallationParamsStruct = ApplyUninstallationParamsStruct;
type PluginSetupProcessor_ApplyUpdateParamsStruct = ApplyUpdateParamsStruct;
type PluginSetupProcessor_PrepareInstallationParamsStruct = PrepareInstallationParamsStruct;
type PluginSetupProcessor_PrepareUninstallationParamsStruct = PrepareUninstallationParamsStruct;
type PluginSetupProcessor_PrepareUpdateParamsStructOutput = PrepareUpdateParamsStructOutput;
type PluginSetupProcessor_PluginSetupRefStruct = PluginSetupRefStruct;
type PluginSetupProcessor_PluginSetupRefStructOutput = PluginSetupRefStructOutput;
declare namespace PluginSetupProcessor {
  export {
    PluginSetupProcessor_ApplyInstallationParamsStruct as ApplyInstallationParamsStruct,
    PluginSetupProcessor_ApplyUninstallationParamsStruct as ApplyUninstallationParamsStruct,
    PluginSetupProcessor_ApplyUpdateParamsStruct as ApplyUpdateParamsStruct,
    PluginSetupProcessor_PrepareInstallationParamsStruct as PrepareInstallationParamsStruct,
    PluginSetupProcessor_PrepareUninstallationParamsStruct as PrepareUninstallationParamsStruct,
    PluginSetupProcessor_PrepareUpdateParamsStructOutput as PrepareUpdateParamsStructOutput,
    PluginSetupProcessor_PluginSetupRefStruct as PluginSetupRefStruct,
    PluginSetupProcessor_PluginSetupRefStructOutput as PluginSetupRefStructOutput,
  };
}

export { ABIResolver, ABIResolver__factory, ActionExecute, ActionExecute__factory, AddrResolver, AddrResolver__factory, CallbackHandler, CallbackHandlerMockHelper, CallbackHandlerMockHelper__factory, CallbackHandler__factory, ContentHashResolver, ContentHashResolver__factory, DAO$2 as DAO, DAO$1 as DAOEvents, DAOFactory$1 as DAOFactory, DAOFactory as DAOFactoryStructs, DAOFactory__factory, DAORegistry$1 as DAORegistry, DAORegistry as DAORegistryEvents, DAORegistry__factory, DAO as DAOStructs, DAO__factory, DNSResolver, DNSResolver__factory, ENS, ENSRegistry, ENSRegistry__factory, ENSSubdomainRegistrar, ENSSubdomainRegistrar__factory, ENS__factory, ERC1155Mock, ERC1155Mock__factory, ERC20Mock, ERC20Mock__factory, ERC721Mock, ERC721Mock__factory, GasConsumer, GasConsumer__factory, IABIResolver, IABIResolver__factory, IAddrResolver, IAddrResolver__factory, IAddressResolver, IAddressResolver__factory, IContentHashResolver, IContentHashResolver__factory, IDNSRecordResolver, IDNSRecordResolver__factory, IDNSZoneResolver, IDNSZoneResolver__factory, IEIP4824, IEIP4824__factory, IInterfaceResolver, IInterfaceResolver__factory, IMulticallable, IMulticallable__factory, INameResolver, INameResolver__factory, INameWrapper, INameWrapper__factory, IPluginRepo, IPluginRepo__factory, IPubkeyResolver, IPubkeyResolver__factory, ISupportsInterface, ISupportsInterface__factory, ITextResolver, ITextResolver__factory, InterfaceBasedRegistry, InterfaceBasedRegistryMock, InterfaceBasedRegistryMock__factory, InterfaceBasedRegistry__factory, InterfaceResolver, InterfaceResolver__factory, MockedHelper, MockedHelper__factory, Multicallable, Multicallable__factory, NameResolver, NameResolver__factory, PermissionConditionMock, PermissionConditionMock__factory, PermissionManager, PermissionManagerTest, PermissionManagerTest__factory, PermissionManager__factory, PlaceholderSetup, PlaceholderSetup__factory, PluginCloneableSetupV1Mock, PluginCloneableSetupV1MockBad, PluginCloneableSetupV1MockBad__factory, PluginCloneableSetupV1Mock__factory, PluginCloneableSetupV2Mock, PluginCloneableSetupV2Mock__factory, PluginCloneableV1Mock, PluginCloneableV1MockBad, PluginCloneableV1MockBad__factory, PluginCloneableV1Mock__factory, PluginCloneableV2Mock, PluginCloneableV2Mock__factory, PluginRepo$3 as PluginRepo, PluginRepo$1 as PluginRepoEvents, PluginRepoFactory, PluginRepoFactory__factory, PluginRepoRegistry$1 as PluginRepoRegistry, PluginRepoRegistry as PluginRepoRegistryEvents, PluginRepoRegistry__factory, PluginRepo as PluginRepoStructs, PluginRepo__factory, PluginSetupProcessor$2 as PluginSetupProcessor, PluginSetupProcessor$1 as PluginSetupProcessorEvents, PluginSetupProcessor as PluginSetupProcessorStructs, PluginSetupProcessor__factory, PluginUUPSUpgradeableSetupV1Mock, PluginUUPSUpgradeableSetupV1MockBad, PluginUUPSUpgradeableSetupV1MockBad__factory, PluginUUPSUpgradeableSetupV1Mock__factory, PluginUUPSUpgradeableSetupV2Mock, PluginUUPSUpgradeableSetupV2Mock__factory, PluginUUPSUpgradeableSetupV3Mock, PluginUUPSUpgradeableSetupV3Mock__factory, PluginUUPSUpgradeableSetupV4Mock, PluginUUPSUpgradeableSetupV4Mock__factory, PluginUUPSUpgradeableV1Mock, PluginUUPSUpgradeableV1Mock__factory, PluginUUPSUpgradeableV2Mock, PluginUUPSUpgradeableV2Mock__factory, PluginUUPSUpgradeableV3Mock, PluginUUPSUpgradeableV3Mock__factory, PluginV1Mock, PluginV1Mock__factory, ProtocolVersionMock, ProtocolVersionMock__factory, PubkeyResolver, PubkeyResolver__factory, PublicResolver, PublicResolver__factory, RegistryUtils, RegistryUtils__factory, Resolver, ResolverBase, ResolverBase__factory, Resolver__factory, SupportsInterface, SupportsInterface__factory, TextResolver, TextResolver__factory, index$14 as ensdomains, index as factories, index$C as src };
