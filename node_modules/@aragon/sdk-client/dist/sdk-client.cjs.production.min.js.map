{"version":3,"file":"sdk-client.cjs.production.min.js","sources":["../src/internal/graphql-queries/dao.ts","../src/types.ts","../src/internal/types.ts","../src/internal/graphql-queries/balances.ts","../src/internal/graphql-queries/transfer.ts","../src/internal/graphql-queries/plugin.ts","../src/internal/graphql-queries/proposal.ts","../src/internal/constants.ts","../src/internal/schemas.ts","../src/internal/utils.ts","../src/internal/client/methods.ts","../src/client-common/types/plugin.ts","../src/internal/client/encoding.ts","../src/internal/client/estimation.ts","../src/internal/client/decoding.ts","../src/client.ts","../src/client-common/internal/constants.ts","../src/client-common/types/common.ts","../src/client-common/utils.ts","../src/client-common/encoding.ts","../src/addresslistVoting/internal/graphql-queries/members.ts","../src/addresslistVoting/internal/graphql-queries/proposal.ts","../src/addresslistVoting/internal/graphql-queries/settings.ts","../src/addresslistVoting/internal/utils.ts","../src/addresslistVoting/internal/constants.ts","../src/tokenVoting/types.ts","../src/tokenVoting/internal/types.ts","../src/addresslistVoting/internal/client/methods.ts","../src/addresslistVoting/internal/client/encoding.ts","../src/addresslistVoting/internal/client/decoding.ts","../src/addresslistVoting/internal/client/estimation.ts","../src/addresslistVoting/client.ts","../src/tokenVoting/internal/graphql-queries/proposal.ts","../src/tokenVoting/internal/graphql-queries/settings.ts","../src/tokenVoting/internal/graphql-queries/token.ts","../src/tokenVoting/internal/graphql-queries/members.ts","../src/tokenVoting/internal/utils.ts","../src/tokenVoting/internal/constants.ts","../src/multisig/types.ts","../src/tokenVoting/internal/client/methods.ts","../src/tokenVoting/internal/client/encoding.ts","../src/tokenVoting/internal/client/decoding.ts","../src/tokenVoting/internal/client/estimation.ts","../src/tokenVoting/client.ts","../src/multisig/internal/graphql-queries/proposal.ts","../src/multisig/internal/graphql-queries/settings.ts","../src/multisig/internal/graphql-queries/members.ts","../src/multisig/internal/utils.ts","../src/multisig/internal/constants.ts","../src/multisig/internal/client/methods.ts","../src/multisig/internal/client/encoding.ts","../src/multisig/internal/client/decoding.ts","../src/multisig/internal/client/estimation.ts","../src/multisig/client.ts"],"sourcesContent":["import { gql } from \"graphql-request\";\n\nexport const QueryDao = gql`\n  query Dao($address: ID!) {\n    dao(id: $address){\n      id\n      subdomain\n      metadata\n      createdAt\n      plugins{\n        appliedPreparation {\n          pluginAddress\n        }\n        appliedPluginRepo {\n          subdomain\n        }\n        appliedVersion{\n          build\n          release {\n            release\n          }\n        }\n      }\n    }\n  }\n`;\nexport const QueryDaos = gql`\n  query Daos ($limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: Dao_orderBy!) {\n    daos(first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n      id\n      subdomain\n      metadata\n      plugins{\n        appliedPreparation {\n          pluginAddress\n        }\n        appliedPluginRepo {\n          subdomain\n        }\n        appliedVersion{\n          build\n          release {\n            release\n          }\n        }\n      }\n    }\n  }\n`;\n","import {\n  MetadataAbiInput,\n  MultiTargetPermission,\n  Pagination,\n  PluginInstallItem,\n  TokenType,\n} from \"@aragon/sdk-client-common\";\n\n/* DAO creation */\nexport type CreateDaoParams = {\n  metadataUri: string;\n  daoUri?: string;\n  ensSubdomain?: string;\n  trustedForwarder?: string;\n  plugins: PluginInstallItem[];\n};\n\nexport enum DaoCreationSteps {\n  CREATING = \"creating\",\n  DONE = \"done\",\n}\n\nexport type DaoCreationStepValue =\n  | { key: DaoCreationSteps.CREATING; txHash: string }\n  | { key: DaoCreationSteps.DONE; address: string; pluginAddresses: string[] };\n\n/* DAOs */\nexport type DaoResourceLink = { name: string; url: string };\nexport type DaoMetadata = {\n  name: string;\n  description: string;\n  avatar?: string;\n  links: DaoResourceLink[];\n};\nexport type DaoDetails = {\n  address: string;\n  ensDomain: string;\n  metadata: DaoMetadata;\n  metadataHash?: string;\n  creationDate: Date;\n  plugins: InstalledPluginListItem[];\n};\n\nexport type DaoListItem = {\n  address: string;\n  ensDomain: string;\n  metadata: {\n    name: string;\n    description: string;\n    avatar?: string;\n  };\n  metadataHash?: string;\n  plugins: InstalledPluginListItem[];\n};\n\nexport type DaoQueryParams = Pagination & {\n  sortBy?: DaoSortBy;\n};\n\nexport enum DaoSortBy {\n  CREATED_AT = \"createdAt\",\n  SUBDOMAIN = \"subdomain\",\n  // POPULARITY = \"totalProposals\", // currently defined as number of proposals\n}\n\n/* Plugins */\n\nexport type InstalledPluginListItem = {\n  id: string;\n  instanceAddress: string;\n  release: number;\n  build: number;\n};\n\nexport enum PluginSortBy {\n  SUBDOMAIN = \"subdomain\",\n}\n\nexport type PluginQueryParams = Pagination & {\n  sortBy?: PluginSortBy;\n  subdomain?: string;\n  includeMetadata?: boolean;\n};\n\n/* Plugin repos */\n\nexport type PluginRepoReleaseMetadata = {\n  name: string;\n  description: string;\n  images: Object; // TODO specify parameters\n};\n\nexport type PluginRepoBuildMetadata = {\n  ui: string;\n  change: string;\n  pluginSetup: {\n    prepareInstallation: string[];\n    prepareUpdate: {\n      [key: number]: {\n        description: string;\n        inputs: MetadataAbiInput[];\n      };\n    };\n    prepareUninstallation: string[];\n  };\n};\n\nexport type PluginRepoCurrent = {\n  build: {\n    number: number;\n    metadata: PluginRepoBuildMetadata;\n  };\n  release: {\n    number: number;\n    metadata: PluginRepoReleaseMetadata;\n  };\n};\n\ntype PluginRepoBase = {\n  address: string;\n  subdomain: string;\n  current: PluginRepoCurrent;\n  releases: PluginRepoRelease[];\n};\n\ntype PluginRepoRelease = {\n  release: number;\n  metadata: string;\n  builds: PluginRepoBuild[];\n};\n\ntype PluginRepoBuild = {\n  build: number;\n  metadata: string;\n};\nexport type PluginRepo = PluginRepoBase;\nexport type PluginRepoListItem = PluginRepoBase;\n\n/* Deposits */\ntype DepositBaseParams = {\n  daoAddressOrEns: string;\n};\n\nexport type DepositEthParams = DepositBaseParams & {\n  type: TokenType.NATIVE;\n  amount: bigint;\n};\nexport type DepositErc20Params = DepositBaseParams & {\n  type: TokenType.ERC20;\n  tokenAddress: string;\n  amount: bigint;\n};\nexport type DepositErc721Params = DepositBaseParams & {\n  type: TokenType.ERC721;\n  tokenAddress: string;\n  tokenId: bigint;\n};\n\nexport type DepositErc1155Params = DepositBaseParams & {\n  type: TokenType.ERC1155;\n  tokenAddress: string;\n  tokenIds: bigint[];\n  amounts: bigint[];\n};\n\nexport type DepositParams =\n  | DepositEthParams\n  | DepositErc20Params\n  | DepositErc721Params\n  | DepositErc1155Params;\n\nexport enum DaoDepositSteps {\n  CHECKED_ALLOWANCE = \"checkedAllowance\",\n  DEPOSITING = \"depositing\",\n  DONE = \"done\",\n}\n\nexport type DaoDepositStepValue =\n  | SetAllowanceStepValue\n  | { key: DaoDepositSteps.CHECKED_ALLOWANCE; allowance: bigint }\n  | { key: DaoDepositSteps.DEPOSITING; txHash: string }\n  | {\n    key: DaoDepositSteps.DONE;\n    amount?: bigint;\n    tokenId?: bigint;\n    tokenIds?: bigint[];\n    amounts?: bigint[];\n  };\n\n/* Withdrawals */\ntype WithdrawParamsBase = {\n  recipientAddressOrEns: string;\n};\n\ntype WithdrawEthParams = WithdrawParamsBase & {\n  type: TokenType.NATIVE;\n  amount: bigint;\n};\n\ntype WithdrawErc20Params = WithdrawParamsBase & {\n  type: TokenType.ERC20;\n  amount: bigint;\n  tokenAddress: string;\n};\n\ntype WithdrawErc721Params = WithdrawParamsBase & {\n  type: TokenType.ERC721;\n  tokenAddress: string;\n  tokenId: bigint;\n  daoAddressOrEns: string;\n};\n\ntype WithdrawErc1155Params = WithdrawParamsBase & {\n  type: TokenType.ERC1155;\n  daoAddressOrEns: string;\n  tokenAddress: string;\n  tokenIds: bigint[];\n  amounts: bigint[];\n};\n\nexport type WithdrawParams =\n  | WithdrawEthParams\n  | WithdrawErc20Params\n  | WithdrawErc721Params\n  | WithdrawErc1155Params;\n\n/* Balances */\ntype AssetBalanceBase = {\n  id: string;\n  address: string;\n  updateDate: Date;\n};\n\ntype NativeAssetBalance = {\n  id: string;\n  type: TokenType.NATIVE;\n  balance: bigint;\n  updateDate: Date;\n};\ntype Erc20AssetBalance = AssetBalanceBase & {\n  type: TokenType.ERC20;\n  balance: bigint;\n  decimals: number;\n  name: string;\n  symbol: string;\n};\ntype Erc721AssetBalance = AssetBalanceBase & {\n  type: TokenType.ERC721;\n  tokenIds: bigint[];\n  name: string;\n  symbol: string;\n};\n\ntype Erc1155AssetBalance = AssetBalanceBase & {\n  type: TokenType.ERC1155;\n  balances: {\n    id: string;\n    tokenId: bigint;\n    amount: bigint;\n  }[];\n  metadataUri: string;\n};\n\nexport type DaoBalancesQueryParams = Pagination & {\n  sortBy?: AssetBalanceSortBy;\n  daoAddressOrEns?: string;\n};\nexport enum AssetBalanceSortBy {\n  LAST_UPDATED = \"lastUpdated\",\n}\n\nexport type AssetBalance =\n  | NativeAssetBalance\n  | Erc20AssetBalance\n  | Erc721AssetBalance\n  | Erc1155AssetBalance;\n\n/* Transfers */\n\ntype TokenTransferBase = {\n  creationDate: Date;\n  transactionId: string;\n  to: string;\n  from: string;\n};\n\ntype TokenBase = {\n  address: string;\n  name: string;\n  symbol: string;\n};\n\ntype NativeTokenTransfer = TokenTransferBase & {\n  tokenType: TokenType.NATIVE;\n  amount: bigint;\n};\n\ntype Erc721TokenTransfer = TokenTransferBase & {\n  tokenType: TokenType.ERC721;\n  token: TokenBase;\n};\n\ntype Erc20TokenTransfer = TokenTransferBase & {\n  tokenType: TokenType.ERC20;\n  amount: bigint;\n  token: TokenBase & {\n    decimals: number;\n  };\n};\n\ntype Erc1155TokenTransfer = TokenTransferBase & {\n  tokenType: TokenType.ERC1155;\n  tokenId: bigint;\n  token: {\n    address: string;\n  };\n  amount: bigint;\n};\n\nexport enum TransferType {\n  DEPOSIT = \"deposit\",\n  WITHDRAW = \"withdraw\",\n}\n\nexport type Deposit =\n  & (\n    | NativeTokenTransfer\n    | Erc20TokenTransfer\n    | Erc721TokenTransfer\n    | Erc1155TokenTransfer\n  )\n  & {\n    type: TransferType.DEPOSIT;\n  };\n\nexport type Withdraw =\n  & (\n    | NativeTokenTransfer\n    | Erc20TokenTransfer\n    | Erc721TokenTransfer\n    | Erc1155TokenTransfer\n  )\n  & {\n    type: TransferType.WITHDRAW;\n    proposalId: string;\n  };\n\nexport type TransferQueryParams = Pagination & {\n  sortBy?: TransferSortBy;\n  type?: TransferType;\n  daoAddressOrEns?: string;\n};\nexport enum TransferSortBy {\n  CREATED_AT = \"createdAt\",\n}\n\nexport type Transfer = Deposit | Withdraw;\n\n/* Allowance */\nexport type SetAllowanceParams = {\n  spender: string;\n  amount: bigint;\n  tokenAddress: string;\n};\n\nexport enum SetAllowanceSteps {\n  SETTING_ALLOWANCE = \"settingAllowance\",\n  ALLOWANCE_SET = \"allowanceSet\",\n}\n\nexport type SetAllowanceStepValue =\n  | { key: SetAllowanceSteps.SETTING_ALLOWANCE; txHash: string }\n  | { key: SetAllowanceSteps.ALLOWANCE_SET; allowance: bigint };\n\n/* Permissions */\ntype PermissionParamsBase = {\n  where: string;\n  who: string;\n  permission: string;\n};\ntype PermissionDecodedParamsBase = PermissionParamsBase & {\n  permissionId: string;\n};\nexport type GrantPermissionParams = PermissionParamsBase;\nexport type RevokePermissionParams = PermissionParamsBase;\nexport type GrantPermissionDecodedParams = PermissionDecodedParamsBase;\nexport type RevokePermissionDecodedParams = PermissionDecodedParamsBase;\n\nexport type GrantPermissionWithConditionParams = PermissionParamsBase & {\n  condition: string;\n};\nexport type GrantPermissionWithConditionDecodedParams = PermissionParamsBase & {\n  condition: string;\n  permissionId: string;\n};\n\nexport type HasPermissionParams = PermissionParamsBase & {\n  daoAddressOrEns: string;\n  data?: Uint8Array;\n};\n\nexport type RegisterStandardCallbackParams = {\n  interfaceId: string;\n  callbackSelector: string;\n  magicNumber: string;\n};\n\nexport type UpgradeToAndCallParams = {\n  implementationAddress: string;\n  data: Uint8Array;\n};\n\nexport type InitializeFromParams = {\n  previousVersion: [number, number, number];\n  initData?: Uint8Array;\n};\nexport type DecodedInitializeFromParams = {\n  previousVersion: [number, number, number];\n  initData: Uint8Array;\n};\n\nexport type PluginUpdateProposalValidity = {\n  isValid: boolean;\n  actionErrorCauses: PluginUpdateProposalInValidityCause[][];\n  proposalSettingsErrorCauses: ProposalSettingsErrorCause[];\n};\n\nexport enum ProposalSettingsErrorCause {\n  NON_ZERO_ALLOW_FAILURE_MAP_VALUE = \"nonZeroAllowFailureMapValue\",\n  INVALID_ACTIONS = \"invalidActions\",\n  PROPOSAL_NOT_FOUND = \"proposalNotFound\",\n}\n\nexport enum PluginUpdateProposalInValidityCause {\n  // Grant UPDATE_PLUGIN_PERMISSION action\n  INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_WHO_ADDRESS =\n    \"invalidGrantUpgradePluginPermissionWhoAddress\",\n  INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_WHERE_ADDRESS =\n    \"invalidGrantUpgradePluginPermissionWhereAddress\",\n  INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_PERMISSION_NAME =\n    \"invalidGrantUpgradePluginPermissionPermissionName\",\n  NON_ZERO_GRANT_UPGRADE_PLUGIN_PERMISSION_CALL_VALUE =\n    \"nonZeroGrantUpgradePluginPermissionCallValue\",\n  INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_PERMISSION_ID =\n    \"invalidGrantUpgradePluginPermissionPermissionId\",\n  INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_TO_ADDRESS =\n    \"invalidGrantUpgradePluginPermissionToAddress\",\n\n  // Revoke UPDATE_PLUGIN_PERMISSION action\n  INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_WHO_ADDRESS =\n    \"invalidRevokeUpgradePluginPermissionWhoAddress\",\n  INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_WHERE_ADDRESS =\n    \"invalidRevokeUpgradePluginPermissionWhereAddress\",\n  INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_PERMISSION_NAME =\n    \"invalidRevokeUpgradePluginPermissionPermissionName\",\n  NON_ZERO_REVOKE_UPGRADE_PLUGIN_PERMISSION_CALL_VALUE =\n    \"nonZeroRevokeUpgradePluginPermissionCallValue\",\n  INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_PERMISSION_ID =\n    \"invalidRevokeUpgradePluginPermissionPermissionId\",\n  INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_TO_ADDRESS = \n    \"invalidRevokeUpdatePluginPermissionToAddress\",\n  \n  // Grant ROOT_PERMISSION action\n  INVALID_GRANT_ROOT_PERMISSION_WHO_ADDRESS =\n    \"invalidGrantRootPermissionWhoAddress\",\n  INVALID_GRANT_ROOT_PERMISSION_WHERE_ADDRESS =\n    \"invalidGrantRootPermissionWhereAddress\",\n  INVALID_GRANT_ROOT_PERMISSION_PERMISSION_NAME =\n    \"invalidGrantRootPermissionPermissionName\",\n  NON_ZERO_GRANT_ROOT_PERMISSION_CALL_VALUE =\n    \"nonZeroGrantRootPermissionCallValue\",\n  INVALID_GRANT_ROOT_PERMISSION_PERMISSION_ID =\n    \"invalidGrantRootPermissionPermissionId\",\n  INVALID_GRANT_ROOT_PERMISSION_TO_ADDRESS = \n    \"invalidGrantRootPermissionToAddress\",\n  // Revoke ROOT_PERMISSION action\n  INVALID_REVOKE_ROOT_PERMISSION_WHO_ADDRESS =\n    \"invalidRevokeRootPermissionWhoAddress\",\n  INVALID_REVOKE_ROOT_PERMISSION_WHERE_ADDRESS =\n    \"invalidRevokeRootPermissionWhereAddress\",\n  INVALID_REVOKE_ROOT_PERMISSION_PERMISSION_NAME =\n    \"invalidRevokeRootPermissionPermissionName\",\n  NON_ZERO_REVOKE_ROOT_PERMISSION_CALL_VALUE =\n    \"nonZeroRevokeRootPermissionCallValue\",\n  INVALID_REVOKE_ROOT_PERMISSION_PERMISSION_ID =\n    \"invalidRevokeRootPermissionPermissionId\",\n  INVALID_REVOKE_ROOT_PERMISSION_TO_ADDRESS = \n    \"invalidRevokeRootPermissionToAddress\",\n  // applyUpdate action\n  NON_ZERO_APPLY_UPDATE_CALL_VALUE = \"nonZeroApplyUpdateCallValue\",\n  PLUGIN_NOT_INSTALLED = \"pluginNotInstalled\",\n  NOT_ARAGON_PLUGIN_REPO = \"notAragonPluginRepo\",\n  MISSING_PLUGIN_REPO = \"missingPluginRepo\",\n  MISSING_PLUGIN_PREPARATION = \"missingPluginPreparation\",\n  UPDATE_TO_INCOMPATIBLE_RELEASE = \"updateToIncompatibleRelease\",\n  UPDATE_TO_OLDER_OR_SAME_BUILD = \"updateToOlderOrSameBuild\",\n  INVALID_DATA = \"invalidData\",\n  INVALID_PLUGIN_REPO_METADATA = \"invalidPluginRepoMetadata\",\n}\n\nexport enum DaoUpdateProposalInvalidityCause {\n  NON_ZERO_CALL_VALUE = \"nonZeroCallValue\",\n  INVALID_TO_ADDRESS = \"invalidToAddress\",\n  INVALID_UPGRADE_TO_IMPLEMENTATION_ADDRESS =\n    \"invalidUpgradeToImplementationAddress\",\n  INVALID_UPGRADE_TO_AND_CALL_DATA = \"invalidUpgradeToAndCallData\",\n  INVALID_UPGRADE_TO_AND_CALL_IMPLEMENTATION_ADDRESS =\n    \"invalidUpgradeToAndCallImplementationAddress\",\n  INVALID_UPGRADE_TO_AND_CALL_VERSION = \"invalidUpgradeToAndCallVersion\",\n}\n\nexport type DaoUpdateProposalValidity = {\n  isValid: boolean;\n  actionErrorCauses: DaoUpdateProposalInvalidityCause[];\n  proposalSettingsErrorCauses: ProposalSettingsErrorCause[];\n};\n\nexport type DaoUpdateParams = InitializeFromParams & {\n  daoFactoryAddress?: string;\n};\n\nexport type DaoUpdateDecodedParams = InitializeFromParams & {\n  implementationAddress: string;\n};\nexport type PluginPreparationQueryParams = Pagination & {\n  sortBy?: PluginPreparationSortBy;\n  type?: PluginPreparationType;\n  pluginAddress?: string;\n  pluginRepoAddress?: string;\n  daoAddressOrEns?: string;\n};\nexport enum PluginPreparationType {\n  INSTALLATION = \"Installation\",\n  UPDATE = \"Update\",\n  UNINSTALLATION = \"Uninstallation\",\n}\n\nexport enum PluginPreparationSortBy {\n  ID = \"id\",\n}\n\nexport type PluginPreparationListItem = {\n  id: string;\n  type: PluginPreparationType;\n  creator: string;\n  dao: string;\n  pluginRepo: {\n    id: string;\n    subdomain: string;\n  };\n  versionTag: {\n    build: number;\n    release: number;\n  };\n  pluginAddress: string;\n  permissions: MultiTargetPermission[];\n  helpers: string[];\n  data: Uint8Array;\n};\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { PluginPreparationType, TransferType } from \"../types\";\nimport { SubgraphAction } from \"../client-common\";\n\nexport type SubgraphPluginListItem = {\n  appliedPreparation: {\n    pluginAddress: string;\n  } | null;\n  appliedPluginRepo: {\n    subdomain: string;\n  } | null;\n  appliedVersion: {\n    build: number;\n    release: {\n      release: number;\n    };\n  } | null;\n};\n\ntype SubgraphDaoBase = {\n  id: string;\n  subdomain: string;\n  metadata: string;\n  plugins: SubgraphPluginListItem[];\n};\n\nexport type SubgraphDao = SubgraphDaoBase & {\n  createdAt: string;\n};\n\nexport type SubgraphDaoListItem = SubgraphDaoBase;\n\ntype SubgraphBalanceBase = {\n  id: string;\n  lastUpdated: string;\n  __typename: string;\n};\n\nexport type SubgraphErc20Balance = SubgraphBalanceBase & {\n  __typename: \"ERC20Balance\";\n  balance: string;\n  token: SubgraphErc20Token;\n};\n\nexport type SubgraphErc721Balance = SubgraphBalanceBase & {\n  __typename: \"ERC721Balance\";\n  token: SubgraphErc721Token;\n  tokenIds: string[];\n};\n\nexport type SubgraphNativeBalance = SubgraphBalanceBase & {\n  __typename: \"NativeBalance\";\n  balance: string;\n};\n\nexport type SubgraphErc1155Balance = SubgraphBalanceBase & {\n  __typename: \"ERC1155Balance\";\n  metadataUri: string;\n  token: SubgraphErc1155Token;\n  balances: {\n    amount: string;\n    id: string;\n    tokenId: string;\n  }[];\n};\n\nexport type SubgraphBalance =\n  | SubgraphErc20Balance\n  | SubgraphErc721Balance\n  | SubgraphNativeBalance\n  | SubgraphErc1155Balance;\n\nexport enum SubgraphTransferType {\n  DEPOSIT = \"Deposit\",\n  WITHDRAW = \"Withdraw\",\n}\n\ntype SubgraphTransferListItemBase = {\n  from: string;\n  to: string;\n  type: SubgraphTransferType;\n  createdAt: string;\n  txHash: string;\n  proposal: {\n    id: string | null;\n  };\n};\n\nexport type SubgraphErc20TransferListItem = SubgraphTransferListItemBase & {\n  __typename: \"ERC20Transfer\";\n  amount: string;\n  token: SubgraphErc20Token;\n};\n\nexport type SubgraphErc721TransferListItem = SubgraphTransferListItemBase & {\n  __typename: \"ERC721Transfer\";\n  token: SubgraphErc721Token;\n};\n\nexport type SubgraphNativeTransferListItem = SubgraphTransferListItemBase & {\n  __typename: \"NativeTransfer\";\n  amount: string;\n};\n\nexport type SubgraphErc1155TransferListItem = SubgraphTransferListItemBase & {\n  __typename: \"ERC1155Transfer\";\n  amount: string;\n  tokenId: string;\n  token: SubgraphErc1155Token;\n};\n\nexport type SubgraphTransferListItem =\n  | SubgraphErc20TransferListItem\n  | SubgraphErc721TransferListItem\n  | SubgraphNativeTransferListItem\n  | SubgraphErc1155TransferListItem;\n\ntype SubgraphTokenBase = {\n  id: string;\n};\n\nexport type SubgraphErc20Token = SubgraphTokenBase & {\n  name: string;\n  symbol: string;\n  decimals: number;\n};\n\nexport type SubgraphErc721Token = SubgraphTokenBase & {\n  name: string;\n  symbol: string;\n};\n\nexport type SubgraphErc1155Token = SubgraphTokenBase;\n\nexport const SubgraphTransferTypeMap: Map<\n  TransferType,\n  SubgraphTransferType\n> = new Map([\n  [TransferType.DEPOSIT, SubgraphTransferType.DEPOSIT],\n  [TransferType.WITHDRAW, SubgraphTransferType.WITHDRAW],\n]);\n\nexport type ContractPermissionParams = [string, string, string];\nexport type ContractPermissionWithConditionParams = [\n  string,\n  string,\n  string,\n  string,\n];\nexport type ContractWithdrawParams = [string, string, BigNumber, string];\n\nexport type SubgraphPluginRepo = {\n  id: string;\n  subdomain: string;\n  releases: SubgraphPluginRepoRelease[];\n};\n\nexport type SubgraphPluginRepoRelease = {\n  release: number;\n  metadata: string;\n  builds: SubgraphPluginRepoBuild[];\n};\n\nexport type SubgraphPluginRepoBuild = {\n  build: number;\n  metadata: string;\n};\n\nexport type SubgraphPluginRepoListItem = SubgraphPluginRepo;\n\nexport type SubgraphPluginVersion = {\n  release: {\n    release: number;\n  };\n  metadata: string;\n  build: number;\n};\n\nexport type SubgraphPluginPreparation = {\n  helpers: string[];\n  pluginRepo: {\n    id: string;\n  };\n};\n\nexport type SubgraphPluginInstallation = {\n  appliedVersion: SubgraphPluginVersion;\n  appliedPreparation: SubgraphPluginPreparation;\n};\n\nexport type SubgraphIProposal = {\n  dao: {\n    id: string;\n  };\n  allowFailureMap: string;\n  actions: SubgraphAction[];\n};\n\nexport type SubgraphPluginUpdatePreparation = {\n  data: string;\n};\n\nexport type SubgraphPluginPreparationListItem = {\n  id: string;\n  type: PluginPreparationType;\n  creator: string;\n  dao: {\n    id: string;\n  };\n  pluginRepo: {\n    id: string;\n    subdomain: string;\n  };\n  pluginVersion: {\n    build: number;\n    release: {\n      release: number;\n    };\n  };\n  pluginAddress: string;\n  permissions: SubgraphPluginPermission[];\n  helpers: string[];\n  data: string;\n};\n\nexport type SubgraphPluginPermission = {\n  id: string;\n  operation: SubgraphPluginPermissionOperation;\n  where: string;\n  who: string;\n  condition: string;\n  permissionId: string;\n};\n\nexport enum SubgraphPluginPermissionOperation {\n  GRANT = \"Grant\",\n  REVOKE = \"Revoke\",\n  GRANT_WITH_CONDITION = \"GrantWithCondition\",\n}\n\nexport enum ProposalActionTypes {\n  UPGRADE_TO = \"upgradeTo\",\n  UPGRADE_TO_AND_CALL = \"upgradeToAndCall\",\n  APPLY_UPDATE = \"applyUpdate\",\n  GRANT_PLUGIN_UPGRADE_PERMISSION = \"grantUpgradePluginPermission\",\n  REVOKE_PLUGIN_UPGRADE_PERMISSION = \"revokeUpgradePluginPermission\",\n  GRANT_ROOT_PERMISSION = \"grantRootPermission\",\n  REVOKE_ROOT_PERMISSION = \"revokeRootPermission\",\n  ACTION_NOT_ALLOWED = \"actionNotAllowed\",\n  UNKNOWN = \"unknown\",\n}\n\nexport type SubgraphPluginInstallationListItem = {\n  id: string;\n};\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenBalances = gql`\nquery TokenBalances($where: TokenBalance_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenBalance_orderBy!) {\n  tokenBalances (where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy) {\n    lastUpdated\n    __typename\n    ... on ERC20Balance {\n      balance\n      token {\n        name\n        decimals\n        symbol\n        id\n      }\n    }\n    ... on ERC721Balance {\n      token {\n        name\n        symbol\n        id\n      }\n      tokenIds\n    }\n    ... on NativeBalance {\n      balance\n    }\n    ... on ERC1155Balance {\n      metadataUri\n      token {\n        id\n      }\n      balances {\n        amount\n        id\n        tokenId\n      }\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenTransfers = gql`\nquery TokenTransfers($where: TokenTransfer_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenTransfer_orderBy!) {\n  tokenTransfers (where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy) {\n    from\n    to\n    type\n    createdAt\n    txHash\n    proposal{\n      id\n    }\n    __typename\n    ... on ERC20Transfer {\n      amount\n      token {\n        ...on ERC20Contract {\n          id\n          name\n          symbol\n          decimals\n        }\n      }\n    }\n    ... on ERC721Transfer {\n      token{\n      \tid\n        name\n        symbol\n      }\n      \n    }\n    ... on NativeTransfer {\n      amount\n    }\n    ...on ERC1155Transfer{\n      amount\n      tokenId\n      token {\n        id\n      }\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryPlugins = gql`\nquery Plugins($where: PluginRepo_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: PluginRepo_orderBy!) {\n  pluginRepos(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    subdomain\n    releases (orderBy: release, orderDirection: desc){\n      release\n      metadata\n      builds (orderBy: build, orderDirection: desc) {\n        build\n        metadata\n      }\n    }\n  }\n}\n`;\n\nexport const QueryPlugin = gql`\nquery Plugin($id: ID!) {\n  pluginRepo(id:$id){\n    id\n    subdomain\n    releases(orderBy: release, orderDirection: desc){\n      release\n      metadata\n      builds(orderBy: build, orderDirection: desc){\n        build\n        metadata\n      }\n    }\n  }\n}\n`;\n\nexport const QueryIPlugin = gql`\nquery IPlugin($address: ID!, $where: IPlugin_filter!) {\n\tiplugin(id:$address, where:$where){\n    installations(where:{state: Installed}) {\n      appliedPreparation{\n        helpers\n        pluginRepo {\n          id\n        }\n      }\n     \tappliedVersion {\n        metadata\n        build\n        release{\n          release\n        }\n      }\n    }   \n  }\n}\n`;\n\nexport const QueryPluginPreparations = gql`\nquery PluginPreparations($where: PluginPreparation_filter!) {\n  pluginPreparations(where: $where){\n    data\n  }\n}\n`;\n\nexport const QueryPluginPreparationsExtended = gql`\nquery PluginPreparations($where: PluginPreparation_filter!, $limit: Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: PluginPreparation_orderBy!) {\n  pluginPreparations(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    type\n    creator\n    dao {\n      id\n    }\n    pluginRepo {\n      id\n      subdomain\n    }\n    pluginVersion{\n      build\n      release{\n        release\n      }\n    }\n    pluginAddress\n    permissions {\n      id\n      operation\n      where\n      who\n      condition\n    }\n    helpers\n    data\n  }\n}\n`;\n\nexport const QueryPluginInstallations = gql`\n  query PluginInstallations($where: PluginInstallation_filter!) {\n    pluginInstallations(where: $where) {\n      id\n    }\n  }`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryIProposal = gql`\nquery IProposal($id: String!) {\n    iproposal(id: $id) {\n        dao {\n            id\n        }\n        allowFailureMap\n        actions {\n            to\n            value\n            data\n        }\n    }\n}\n`;\n","import {\n  DAO__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport {\n  DaoMetadata,\n  PluginRepoBuildMetadata,\n  PluginRepoReleaseMetadata,\n} from \"../types\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { abi as ERC20_ABI } from \"@openzeppelin/contracts/build/contracts/ERC20.json\";\nimport { abi as ERC721_ABI } from \"@openzeppelin/contracts/build/contracts/ERC721.json\";\nimport { ProposalActionTypes } from \"./types\";\n\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  new Contract(AddressZero, ERC20_ABI).interface.getFunction(\"transfer\")\n    .format(\"minimal\"),\n  new Contract(AddressZero, ERC721_ABI).interface.getFunction(\n    \"safeTransferFrom(address,address,uint256)\",\n  )\n    .format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"grant\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"grantWithCondition\").format(\n    \"minimal\",\n  ),\n  DAO__factory.createInterface().getFunction(\"revoke\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"setMetadata\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"setDaoURI\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"registerStandardCallback\").format(\n    \"minimal\",\n  ),\n  DAO__factory.createInterface().getFunction(\"setSignatureValidator\").format(\n    \"minimal\",\n  ),\n  DAO__factory.createInterface().getFunction(\"upgradeTo\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"upgradeToAndCall\").format(\n    \"minimal\",\n  ),\n];\n\nexport const UNSUPPORTED_DAO_METADATA_LINK: DaoMetadata = {\n  name: \"(unsupported metadata link)\",\n  description: \"(the metadata link is not supported)\",\n  links: [],\n};\nexport const EMPTY_DAO_METADATA_LINK: DaoMetadata = {\n  name: \"(the DAO has no metadata)\",\n  description: \"(the DAO did not define any content)\",\n  links: [],\n};\n\nexport const UNAVAILABLE_DAO_METADATA: DaoMetadata = {\n  name: \"(unavailable metadata)\",\n  description: \"(the DAO metadata is not available)\",\n  links: [],\n};\nexport const UNSUPPORTED_RELEASE_METADATA_LINK: PluginRepoReleaseMetadata = {\n  name: \"(unsupported metadata link)\",\n  description: \"(the metadata link is not supported)\",\n  images: {},\n};\nexport const EMPTY_RELEASE_METADATA_LINK: PluginRepoReleaseMetadata = {\n  name: \"(the release has no metadata)\",\n  description: \"(the release did not define any content)\",\n  images: {},\n};\n\nexport const UNAVAILABLE_RELEASE_METADATA: PluginRepoReleaseMetadata = {\n  name: \"(unavailable metadata)\",\n  description: \"(the release metadata is not available)\",\n  images: {},\n};\n\nexport const UNSUPPORTED_BUILD_METADATA_LINK: PluginRepoBuildMetadata = {\n  ui: \"\",\n  change: \"(unsupported metadata link)\",\n  pluginSetup: {\n    prepareInstallation: [],\n    prepareUninstallation: [],\n    prepareUpdate: [],\n  },\n};\nexport const EMPTY_BUILD_METADATA_LINK: PluginRepoBuildMetadata = {\n  ui: \"\",\n  change: \"(the build has no metadata)\",\n  pluginSetup: {\n    prepareInstallation: [],\n    prepareUninstallation: [],\n    prepareUpdate: [],\n  },\n};\n\nexport const UNAVAILABLE_BUILD_METADATA: PluginRepoBuildMetadata = {\n  ui: \"\",\n  change: \"(unavailable metadata)\",\n  pluginSetup: {\n    prepareInstallation: [],\n    prepareUninstallation: [],\n    prepareUpdate: [],\n  },\n};\n\nexport enum SupportedPluginRepo {\n  ADMIN = \"admin\",\n  MULTISIG = \"multisig\",\n  TOKEN_VOTING = \"token-voting\",\n  ADDRESS_LIST_VOTING = \"address-list-voting\",\n}\n\nexport const SupportedPluginRepoArray = Object.values(SupportedPluginRepo);\n\nexport const ZERO_BYTES_HASH = keccak256(\n  defaultAbiCoder.encode(\n    [\"bytes32\"],\n    [\"0x0000000000000000000000000000000000000000000000000000000000000000\"],\n  ),\n);\n\nexport enum PreparationType {\n  NONE = 0,\n  INSTALLATION = 1,\n  UPDATE = 2,\n  UNINSTALLATION = 3,\n}\n\nexport const UPDATE_PLUGIN_SIGNATURES: string[] = [\n  DAO__factory.createInterface().getFunction(\"grant\")\n    .format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"revoke\")\n    .format(\"minimal\"),\n  PluginSetupProcessor__factory.createInterface().getFunction(\n    \"applyUpdate\",\n  ).format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\n    \"upgradeTo\",\n  ).format(\"minimal\"),\n  DAO__factory.createInterface()\n    .getFunction(\"upgradeToAndCall\")\n    .format(\"minimal\"),\n];\n\nexport const PLUGIN_UPDATE_ACTION_PATTERN = [\n  ProposalActionTypes.GRANT_PLUGIN_UPGRADE_PERMISSION,\n  ProposalActionTypes.APPLY_UPDATE,\n  ProposalActionTypes.REVOKE_PLUGIN_UPGRADE_PERMISSION,\n];\nexport const PLUGIN_UPDATE_WITH_ROOT_ACTION_PATTERN = [\n  ProposalActionTypes.GRANT_PLUGIN_UPGRADE_PERMISSION,\n  ProposalActionTypes.GRANT_ROOT_PERMISSION,\n  ProposalActionTypes.APPLY_UPDATE,\n  ProposalActionTypes.REVOKE_ROOT_PERMISSION,\n  ProposalActionTypes.REVOKE_PLUGIN_UPGRADE_PERMISSION,\n];\n","import {\n  AddressOrEnsSchema,\n  BigintSchema,\n  IpfsUriSchema,\n  PaginationSchema,\n  PluginInstallItemSchema,\n  SizeMismatchError,\n  SubdomainSchema,\n  Uint8ArraySchema,\n} from \"@aragon/sdk-client-common\";\nimport { array, mixed, number, object, string } from \"yup\";\nimport { PluginPreparationSortBy, PluginPreparationType } from \"../types\";\n\nexport const CreateDaoSchema = object({\n  metadataUri: IpfsUriSchema.required(),\n  daoUri: string().url().notRequired(),\n  ensSubdomain: SubdomainSchema.notRequired(),\n  trustedForwarder: AddressOrEnsSchema.notRequired(),\n  plugins: array(PluginInstallItemSchema).min(1).required(),\n});\n\nexport const DaoMetadataSchema = object({\n  name: string().required(),\n  description: string().required(),\n  avatar: mixed().test((item) => {\n    return [IpfsUriSchema, string().url()].some((schema) =>\n      schema.strict().isValidSync(item)\n    );\n  }).notRequired(),\n  links: array(object({\n    name: string().required(),\n    url: string().required(),\n  })).required(),\n});\n\nexport const DepositEthSchema = object({\n  type: string().required().oneOf([\"native\"]),\n  daoAddressOrEns: AddressOrEnsSchema.required(),\n  amount: BigintSchema.required(),\n});\n\nexport const DepositErc20Schema = object({\n  type: string().required().oneOf([\"erc20\"]),\n  daoAddressOrEns: AddressOrEnsSchema.required(),\n  tokenAddress: AddressOrEnsSchema.required(),\n  amount: BigintSchema.required(),\n});\n\nexport const DepositErc721Schema = object({\n  type: string().required().oneOf([\"erc721\"]),\n  daoAddressOrEns: AddressOrEnsSchema.required(),\n  tokenAddress: AddressOrEnsSchema.required(),\n  tokenId: BigintSchema.required(),\n});\n\nexport const DepositErc1155Schema = object({\n  type: string().required().oneOf([\"erc1155\"]),\n  daoAddressOrEns: AddressOrEnsSchema.required(),\n  tokenAddress: AddressOrEnsSchema.required(),\n  tokenIds: array(BigintSchema).required().min(1),\n  amounts: array(BigintSchema).required().min(1),\n}).test(\n  \"isSameLength\",\n  new SizeMismatchError(\"tokenIds\", \"amounts\").message,\n  function (value) {\n    const v = value as any;\n    return v.tokenIds && v.amounts\n      ? v.tokenIds.length === v.amounts.length\n      : true;\n  },\n);\n\nexport const SetAllowanceSchema = object({\n  tokenAddress: AddressOrEnsSchema.required(),\n  amount: BigintSchema.required(),\n  spender: AddressOrEnsSchema.required(),\n});\n\nexport const HasPermissionSchema = object({\n  who: AddressOrEnsSchema.required(),\n  where: AddressOrEnsSchema.required(),\n  permission: string().required(),\n  daoAddressOrEns: AddressOrEnsSchema.required(),\n  data: Uint8ArraySchema.notRequired(),\n});\n\nexport const DaoQuerySchema = PaginationSchema.concat(object({\n  sortBy: string().notRequired().oneOf([\"createdAt\", \"subdomain\"]),\n}));\n\nexport const DaoBalancesQuerySchema = PaginationSchema.concat(object({\n  sortBy: string().notRequired().oneOf([\"lastUpdated\"]),\n  daoAddressOrEns: AddressOrEnsSchema.notRequired(),\n}));\n\nexport const PluginQuerySchema = PaginationSchema.concat(object({\n  sortBy: string().notRequired().oneOf([\"subdomain\"]),\n  subdomain: SubdomainSchema.notRequired(),\n}));\n\nexport const PermissionBaseSchema = object({\n  who: AddressOrEnsSchema.required(),\n  where: AddressOrEnsSchema.required(),\n  permission: string().required(),\n});\n\nexport const PermissionWithConditionSchema = PermissionBaseSchema.concat(\n  object({\n    condition: AddressOrEnsSchema.required(),\n  }),\n);\n\nexport const WithdrawEthSchema = object({\n  type: string().required().oneOf([\"native\"]),\n  recipientAddressOrEns: AddressOrEnsSchema.required(),\n  amount: BigintSchema.required(),\n});\n\nexport const WithdrawErc20Schema = object({\n  type: string().required().oneOf([\"erc20\"]),\n  recipientAddressOrEns: AddressOrEnsSchema.required(),\n  tokenAddress: AddressOrEnsSchema.required(),\n  amount: BigintSchema.required(),\n});\n\nexport const WithdrawErc721Schema = object({\n  type: string().required().oneOf([\"erc721\"]),\n  daoAddressOrEns: AddressOrEnsSchema.required(),\n  recipientAddressOrEns: AddressOrEnsSchema.required(),\n  tokenAddress: AddressOrEnsSchema.required(),\n  tokenId: BigintSchema.required(),\n});\n\nexport const WithdrawErc1155Schema = object({\n  type: string().required().oneOf([\"erc1155\"]),\n  daoAddressOrEns: AddressOrEnsSchema.required(),\n  recipientAddressOrEns: AddressOrEnsSchema.required(),\n  tokenAddress: AddressOrEnsSchema.required(),\n  tokenIds: array(BigintSchema).required().min(1),\n  amounts: array(BigintSchema).required().min(1),\n}).test(\n  \"isSameLength\",\n  new SizeMismatchError(\"tokenIds\", \"amounts\").message,\n  function (value) {\n    const v = value as any;\n    return v.tokenIds && v.amounts\n      ? v.tokenIds.length === v.amounts.length\n      : true;\n  },\n);\n\nexport const RegisterStandardCallbackSchema = object({\n  interfaceId: string().required(),\n  callbackSelector: string().required(),\n  magicNumber: string().required(),\n});\n\nexport const UpgradeToAndCallSchema = object({\n  implementationAddress: AddressOrEnsSchema.required(),\n  data: Uint8ArraySchema.required(),\n});\n\nexport const InitializeFromSchema = object({\n  previousVersion: array().of(number()).length(3).required(),\n  initData: Uint8ArraySchema.notRequired(),\n});\n\nexport const DaoUpdateSchema = object({\n  previousVersion: array().of(number()).length(3).required(),\n  initData: Uint8ArraySchema.notRequired(),\n  daoFactoryAddress: AddressOrEnsSchema.notRequired(),\n});\n\nexport const IsPluginUpdateProposalValidSchema = object({\n  actions: array().of(object({\n    to: AddressOrEnsSchema.required(),\n    value: BigintSchema.required(),\n    data: Uint8ArraySchema.required(),\n  })).required().min(1),\n  daoAddress: AddressOrEnsSchema.required(),\n});\nexport const IsDaoUpdateProposalValidSchema = object({\n  actions: array().of(object({\n    to: AddressOrEnsSchema.required(),\n    value: BigintSchema.required(),\n    data: Uint8ArraySchema.required(),\n  })).required().min(1),\n  daoAddress: AddressOrEnsSchema.required(),\n  version: array().of(number()).length(3).notRequired(),\n});\nexport const PluginPreparationQuerySchema = PaginationSchema.concat(object({\n  sortBy: string().notRequired().oneOf([PluginPreparationSortBy.ID]),\n  type: string().notRequired().oneOf([\n    PluginPreparationType.INSTALLATION,\n    PluginPreparationType.UPDATE,\n  ]),\n  daoAddressOrEns: AddressOrEnsSchema.notRequired(),\n  pluginAddress: AddressOrEnsSchema.notRequired(),\n  pluginRepoAddress: AddressOrEnsSchema.notRequired(),\n}));\n","import {\n  AssetBalance,\n  DaoDetails,\n  DaoListItem,\n  DaoMetadata,\n  DaoUpdateProposalInvalidityCause,\n  DaoUpdateProposalValidity,\n  DecodedInitializeFromParams,\n  DepositErc1155Params,\n  DepositErc20Params,\n  DepositErc721Params,\n  DepositEthParams,\n  GrantPermissionDecodedParams,\n  GrantPermissionParams,\n  GrantPermissionWithConditionDecodedParams,\n  GrantPermissionWithConditionParams,\n  InstalledPluginListItem,\n  PluginPreparationListItem,\n  PluginRepo,\n  PluginRepoBuildMetadata,\n  PluginRepoReleaseMetadata,\n  PluginUpdateProposalInValidityCause,\n  PluginUpdateProposalValidity,\n  ProposalSettingsErrorCause,\n  RevokePermissionDecodedParams,\n  RevokePermissionParams,\n  Transfer,\n  TransferType,\n  UpgradeToAndCallParams,\n  WithdrawParams,\n} from \"../types\";\nimport {\n  ContractPermissionParams,\n  ContractPermissionWithConditionParams,\n  ProposalActionTypes,\n  SubgraphBalance,\n  SubgraphDao,\n  SubgraphDaoListItem,\n  SubgraphErc1155Balance,\n  SubgraphErc1155TransferListItem,\n  SubgraphErc20Balance,\n  SubgraphErc20TransferListItem,\n  SubgraphErc721Balance,\n  SubgraphErc721TransferListItem,\n  SubgraphNativeBalance,\n  SubgraphNativeTransferListItem,\n  SubgraphPluginInstallationListItem,\n  SubgraphPluginListItem,\n  SubgraphPluginPermissionOperation,\n  SubgraphPluginPreparationListItem,\n  SubgraphPluginRepo,\n  SubgraphPluginRepoRelease,\n  SubgraphPluginUpdatePreparation,\n  SubgraphTransferListItem,\n  SubgraphTransferType,\n} from \"./types\";\nimport { defaultAbiCoder, Result } from \"@ethersproject/abi\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport {\n  DAO__factory,\n  PluginSetupProcessor,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  ApplyInstallationParams,\n  ApplyUninstallationParams,\n  ApplyUpdateParams,\n  bytesToHex,\n  DaoAction,\n  DecodedApplyInstallationParams,\n  DecodedApplyUpdateParams,\n  getFunctionFragment,\n  getNamedTypesFromMetadata,\n  hexToBytes,\n  InterfaceParams,\n  InvalidParameter,\n  InvalidPermissionOperationType,\n  MultiTargetPermission,\n  MultiUri,\n  NotImplementedError,\n  PermissionIds,\n  PermissionOperationType,\n  Permissions,\n  TokenType,\n} from \"@aragon/sdk-client-common\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { abi as ERC721_ABI } from \"@openzeppelin/contracts/build/contracts/ERC721.json\";\nimport { abi as ERC1155_ABI } from \"@openzeppelin/contracts/build/contracts/ERC1155.json\";\nimport { SubgraphAction } from \"../client-common\";\nimport {\n  PLUGIN_UPDATE_ACTION_PATTERN,\n  PLUGIN_UPDATE_WITH_ROOT_ACTION_PATTERN,\n  PreparationType,\n  SupportedPluginRepo,\n  SupportedPluginRepoArray,\n  UPDATE_PLUGIN_SIGNATURES,\n} from \"./constants\";\nimport {\n  DepositErc1155Schema,\n  DepositErc20Schema,\n  DepositErc721Schema,\n  DepositEthSchema,\n} from \"./schemas\";\nimport {\n  IClientGraphQLCore,\n  IClientIpfsCore,\n} from \"@aragon/sdk-client-common/dist/internal\";\nimport {\n  QueryDao,\n  QueryPlugin,\n  QueryPluginInstallations,\n  QueryPluginPreparations,\n} from \"./graphql-queries\";\n\nexport function unwrapDepositParams(\n  params: DepositEthParams | DepositErc20Params,\n): [string, bigint, string, string] {\n  return [\n    params.daoAddressOrEns,\n    params.amount,\n    (params as any)?.tokenAddress ?? AddressZero,\n    \"\",\n  ];\n}\n\nexport function toDaoDetails(\n  dao: SubgraphDao,\n  metadata: DaoMetadata,\n): DaoDetails {\n  return {\n    address: dao.id,\n    ensDomain: dao.subdomain + \".dao.eth\",\n    metadata: {\n      name: metadata.name,\n      description: metadata.description,\n      avatar: metadata.avatar || undefined,\n      links: metadata.links,\n    },\n    metadataHash: dao.metadata,\n    creationDate: new Date(parseInt(dao.createdAt) * 1000),\n    // TODO update when new subgraph schema is deployed\n    // filter out plugins that are not applied\n    plugins: dao.plugins.filter(\n      (plugin) =>\n        plugin.appliedPreparation && plugin.appliedVersion &&\n        plugin.appliedPluginRepo,\n    )\n      .map(\n        (\n          plugin: SubgraphPluginListItem,\n        ): InstalledPluginListItem => (\n          {\n            // we checked with the filter above that these are not null\n            id: `${plugin.appliedPluginRepo!.subdomain}.plugin.dao.eth`,\n            release: plugin.appliedVersion!.release.release,\n            build: plugin.appliedVersion!.build,\n            instanceAddress: plugin.appliedPreparation!.pluginAddress,\n          }\n        ),\n      ),\n  };\n}\n\nexport function toDaoListItem(\n  dao: SubgraphDaoListItem,\n  metadata: DaoMetadata,\n): DaoListItem {\n  return {\n    address: dao.id,\n    ensDomain: dao.subdomain + \".dao.eth\",\n    metadata: {\n      name: metadata.name,\n      description: metadata.description,\n      avatar: metadata.avatar || undefined,\n    },\n    metadataHash: dao.metadata,\n    plugins: dao.plugins.filter(\n      (plugin) =>\n        plugin.appliedPreparation && plugin.appliedVersion &&\n        plugin.appliedPluginRepo,\n    )\n      .map(\n        (\n          plugin: SubgraphPluginListItem,\n        ): InstalledPluginListItem => (\n          {\n            // we checked with the filter above that these are not null\n            id: `${plugin.appliedPluginRepo!.subdomain}.plugin.dao.eth`,\n            release: plugin.appliedVersion!.release.release,\n            build: plugin.appliedVersion!.build,\n            instanceAddress: plugin.appliedPreparation!.pluginAddress,\n          }\n        ),\n      ),\n  };\n}\n\nfunction toNativeBalance(balance: SubgraphNativeBalance): AssetBalance {\n  return {\n    id: balance.id,\n    type: TokenType.NATIVE,\n    balance: BigInt(balance.balance),\n    updateDate: new Date(parseInt(balance.lastUpdated) * 1000),\n  };\n}\n\nfunction toErc20Balance(balance: SubgraphErc20Balance): AssetBalance {\n  return {\n    id: balance.id,\n    type: TokenType.ERC20,\n    address: balance.token.id,\n    name: balance.token.name,\n    symbol: balance.token.symbol,\n    decimals: balance.token.decimals,\n    balance: BigInt(balance.balance),\n    updateDate: new Date(parseInt(balance.lastUpdated) * 1000),\n  };\n}\n\nfunction toErc721Balance(balance: SubgraphErc721Balance): AssetBalance {\n  return {\n    id: balance.id,\n    type: TokenType.ERC721,\n    address: balance.token.id,\n    name: balance.token.name,\n    symbol: balance.token.symbol,\n    updateDate: new Date(parseInt(balance.lastUpdated) * 1000),\n    tokenIds: balance.tokenIds.map((id) => BigInt(id)),\n  };\n}\nfunction toErc1155Balance(balance: SubgraphErc1155Balance): AssetBalance {\n  return {\n    id: balance.id,\n    type: TokenType.ERC1155,\n    address: balance.token.id,\n    metadataUri: balance.metadataUri,\n    updateDate: new Date(parseInt(balance.lastUpdated) * 1000),\n    balances: balance.balances.map((balance) => ({\n      tokenId: BigInt(balance.tokenId),\n      amount: BigInt(balance.amount),\n      id: balance.id,\n    })),\n  };\n}\n\nexport function toAssetBalance(balance: SubgraphBalance): AssetBalance {\n  switch (balance.__typename) {\n    case \"NativeBalance\":\n      return toNativeBalance(balance);\n    case \"ERC20Balance\":\n      return toErc20Balance(balance);\n    case \"ERC721Balance\":\n      return toErc721Balance(balance);\n    case \"ERC1155Balance\":\n      return toErc1155Balance(balance);\n    default:\n      throw new InvalidParameter(\"Token type not supported\");\n  }\n}\n\nfunction toErc20Transfer(\n  transfer: SubgraphErc20TransferListItem,\n): Transfer {\n  const creationDate = new Date(parseInt(transfer.createdAt) * 1000);\n  if (transfer.type === SubgraphTransferType.DEPOSIT) {\n    return {\n      type: TransferType.DEPOSIT,\n      tokenType: TokenType.ERC20,\n      token: {\n        address: transfer.token.id,\n        name: transfer.token.name,\n        symbol: transfer.token.symbol,\n        decimals: transfer.token.decimals,\n      },\n      amount: BigInt(transfer.amount),\n      creationDate,\n      transactionId: transfer.txHash,\n      from: transfer.from,\n      to: transfer.to,\n    };\n  }\n  return {\n    type: TransferType.WITHDRAW,\n    tokenType: TokenType.ERC20,\n    token: {\n      address: transfer.token.id,\n      name: transfer.token.name,\n      symbol: transfer.token.symbol,\n      decimals: transfer.token.decimals,\n    },\n    amount: BigInt(transfer.amount),\n    creationDate,\n    transactionId: transfer.txHash,\n    to: transfer.to,\n    from: transfer.from,\n    proposalId: transfer.proposal?.id || \"\",\n  };\n}\n\nfunction toErc721Transfer(\n  transfer: SubgraphErc721TransferListItem,\n): Transfer {\n  const creationDate = new Date(parseInt(transfer.createdAt) * 1000);\n  if (transfer.type === SubgraphTransferType.DEPOSIT) {\n    return {\n      type: TransferType.DEPOSIT,\n      tokenType: TokenType.ERC721,\n      token: {\n        address: transfer.token.id,\n        name: transfer.token.name,\n        symbol: transfer.token.symbol,\n      },\n      creationDate,\n      transactionId: transfer.txHash,\n      from: transfer.from,\n      to: transfer.to,\n    };\n  }\n  return {\n    type: TransferType.WITHDRAW,\n    tokenType: TokenType.ERC721,\n    token: {\n      address: transfer.token.id,\n      name: transfer.token.name,\n      symbol: transfer.token.symbol,\n    },\n    creationDate,\n    transactionId: transfer.txHash,\n    to: transfer.to,\n    from: transfer.from,\n    proposalId: transfer.proposal?.id || \"\",\n  };\n}\n\nfunction toErc1155Transfer(\n  transfer: SubgraphErc1155TransferListItem,\n): Transfer {\n  const creationDate = new Date(parseInt(transfer.createdAt) * 1000);\n  if (transfer.type === SubgraphTransferType.DEPOSIT) {\n    return {\n      type: TransferType.DEPOSIT,\n      tokenType: TokenType.ERC1155,\n      amount: BigInt(transfer.amount),\n      tokenId: BigInt(transfer.tokenId),\n      token: {\n        address: transfer.token.id,\n      },\n      creationDate,\n      transactionId: transfer.txHash,\n      from: transfer.from,\n      to: transfer.to,\n    };\n  }\n  return {\n    type: TransferType.WITHDRAW,\n    tokenType: TokenType.ERC1155,\n    amount: BigInt(transfer.amount),\n    tokenId: BigInt(transfer.tokenId),\n    token: {\n      address: transfer.token.id,\n    },\n    creationDate,\n    transactionId: transfer.txHash,\n    proposalId: transfer.proposal?.id || \"\",\n    to: transfer.to,\n    from: transfer.from,\n  };\n}\n\nfunction toNativeTransfer(\n  transfer: SubgraphNativeTransferListItem,\n): Transfer {\n  const creationDate = new Date(parseInt(transfer.createdAt) * 1000);\n  if (transfer.type === SubgraphTransferType.DEPOSIT) {\n    return {\n      type: TransferType.DEPOSIT,\n      tokenType: TokenType.NATIVE,\n      amount: BigInt(transfer.amount),\n      creationDate,\n      transactionId: transfer.txHash,\n      from: transfer.from,\n      to: transfer.to,\n    };\n  }\n  return {\n    type: TransferType.WITHDRAW,\n    tokenType: TokenType.NATIVE,\n    amount: BigInt(transfer.amount),\n    creationDate,\n    transactionId: transfer.txHash,\n    proposalId: transfer.proposal?.id || \"\",\n    to: transfer.to,\n    from: transfer.from,\n  };\n}\n\nexport function toTokenTransfer(transfer: SubgraphTransferListItem): Transfer {\n  switch (transfer.__typename) {\n    case \"ERC20Transfer\":\n      return toErc20Transfer(transfer);\n    case \"ERC721Transfer\":\n      return toErc721Transfer(transfer);\n    case \"NativeTransfer\":\n      return toNativeTransfer(transfer);\n    case \"ERC1155Transfer\":\n      return toErc1155Transfer(transfer);\n    default:\n      throw new InvalidParameter(\"Token type not supported\");\n  }\n}\n\nexport function toPluginRepo(\n  pluginRepo: SubgraphPluginRepo,\n  releaseMetadata: PluginRepoReleaseMetadata,\n  buildMetadata: PluginRepoBuildMetadata,\n): PluginRepo {\n  return {\n    address: pluginRepo.id,\n    subdomain: pluginRepo.subdomain,\n    releases: pluginRepo.releases.map((release) => ({\n      release: release.release,\n      metadata: release.metadata,\n      builds: release.builds.map((build) => ({\n        build: build.build,\n        metadata: build.metadata,\n      })),\n    })),\n    current: {\n      build: {\n        metadata: buildMetadata,\n        // the subgraph returns only one build ordered by build number\n        // in descending order, this means it's the latest build\n        number: pluginRepo.releases?.[0]?.builds?.[0]?.build,\n      },\n      release: {\n        metadata: releaseMetadata,\n        // the subgraph returns only one release ordered by release number\n        // in descending order, this means it's the latest release\n        number: pluginRepo.releases?.[0]?.release,\n      },\n    },\n  };\n}\n\nexport function applyInstallatonParamsToContract(\n  params: ApplyInstallationParams,\n): PluginSetupProcessor.ApplyInstallationParamsStruct {\n  return {\n    plugin: params.pluginAddress,\n    pluginSetupRef: {\n      pluginSetupRepo: params.pluginRepo,\n      versionTag: params.versionTag,\n    },\n    helpersHash: keccak256(\n      defaultAbiCoder.encode([\"address[]\"], [params.helpers]),\n    ),\n    permissions: params.permissions.map((permission) => {\n      return { ...permission, condition: permission.condition || AddressZero };\n    }),\n  };\n}\nexport function applyUninstallationParamsToContract(\n  params: ApplyUninstallationParams,\n): PluginSetupProcessor.ApplyUninstallationParamsStruct {\n  return {\n    plugin: params.pluginAddress,\n    pluginSetupRef: {\n      pluginSetupRepo: params.pluginRepo,\n      versionTag: params.versionTag,\n    },\n    permissions: params.permissions.map((permission) => {\n      return { ...permission, condition: permission.condition || AddressZero };\n    }),\n  };\n}\nexport function applyInstallatonParamsFromContract(\n  result: Result,\n): DecodedApplyInstallationParams {\n  const params = result[1];\n  return {\n    helpersHash: params.helpersHash,\n    permissions: params.permissions,\n    versionTag: params.pluginSetupRef.versionTag,\n    pluginAddress: params.plugin,\n    pluginRepo: params.pluginSetupRef.pluginSetupRepo,\n  };\n}\nexport function applyUpdateParamsToContract(\n  params: ApplyUpdateParams,\n): PluginSetupProcessor.ApplyUpdateParamsStruct {\n  return {\n    plugin: params.pluginAddress,\n    pluginSetupRef: {\n      pluginSetupRepo: params.pluginRepo,\n      versionTag: params.versionTag,\n    },\n    initData: params.initData,\n    helpersHash: keccak256(\n      defaultAbiCoder.encode([\"address[]\"], [params.helpers]),\n    ),\n    permissions: params.permissions.map((permission) => {\n      return { ...permission, condition: permission.condition || AddressZero };\n    }),\n  };\n}\nexport function applyUpdateParamsFromContract(\n  result: Result,\n): DecodedApplyUpdateParams {\n  const params = result[1];\n  return {\n    helpersHash: params.helpersHash,\n    permissions: params.permissions,\n    versionTag: params.pluginSetupRef.versionTag,\n    pluginAddress: params.plugin,\n    pluginRepo: params.pluginSetupRef.pluginSetupRepo,\n    initData: hexToBytes(params.initData),\n  };\n}\n\nexport function permissionParamsToContract(\n  params: GrantPermissionParams | RevokePermissionParams,\n): ContractPermissionParams {\n  return [params.where, params.who, keccak256(toUtf8Bytes(params.permission))];\n}\nexport function permissionWithConditionParamsToContract(\n  params: GrantPermissionWithConditionParams,\n): ContractPermissionWithConditionParams {\n  return [\n    ...permissionParamsToContract({\n      who: params.who,\n      where: params.where,\n      permission: params.permission,\n    }),\n    params.condition,\n  ];\n}\n\nexport function permissionParamsFromContract(\n  result: Result,\n): GrantPermissionDecodedParams | RevokePermissionDecodedParams {\n  return {\n    where: result[0],\n    who: result[1],\n    permissionId: result[2],\n    permission: Object.keys(PermissionIds)\n      .find((k) => PermissionIds[k] === result[2])\n      ?.replace(/_ID$/, \"\") || \"\",\n  };\n}\nexport function permissionParamsWitConditionFromContract(\n  result: Result,\n): GrantPermissionWithConditionDecodedParams {\n  return {\n    ...permissionParamsFromContract(result),\n    condition: result[3],\n  };\n}\n\nexport function withdrawParamsFromContract(\n  to: string,\n  _value: bigint,\n  result: Result,\n  tokenStandard: TokenType,\n  isBatch: boolean,\n): WithdrawParams {\n  switch (tokenStandard) {\n    case TokenType.ERC20:\n      return {\n        type: TokenType.ERC20,\n        tokenAddress: to,\n        recipientAddressOrEns: result[0],\n        amount: BigInt(result[1]),\n      };\n    case TokenType.ERC721:\n      return {\n        type: TokenType.ERC721,\n        tokenAddress: to,\n        recipientAddressOrEns: result[1],\n        tokenId: BigInt(result[2]),\n        daoAddressOrEns: result[0],\n      };\n    case TokenType.ERC1155:\n      let tokenIds: bigint[], amounts: bigint[];\n      if (isBatch) {\n        tokenIds = result[2].map((id: string) => BigInt(id));\n        amounts = result[3].map((amount: string) => BigInt(amount));\n      } else {\n        tokenIds = [BigInt(result[2])];\n        amounts = [BigInt(result[3])];\n      }\n      return {\n        type: TokenType.ERC1155,\n        tokenAddress: to,\n        recipientAddressOrEns: result[1],\n        tokenIds,\n        amounts,\n        daoAddressOrEns: result[0],\n      };\n  }\n  throw new NotImplementedError(\"Token standard not supported\");\n}\n\nexport async function estimateNativeDeposit(\n  signer: Signer,\n  params: DepositEthParams,\n): Promise<BigNumber> {\n  await DepositEthSchema.strict().validate(params);\n  const daoInstance = DAO__factory.connect(params.daoAddressOrEns, signer);\n  return await daoInstance.estimateGas.deposit(\n    AddressZero,\n    params.amount,\n    \"\",\n  );\n}\n\nexport async function estimateErc20Deposit(\n  signer: Signer,\n  params: DepositErc20Params,\n): Promise<BigNumber> {\n  await DepositErc20Schema.strict().validate(params);\n  const daoInstance = DAO__factory.connect(params.daoAddressOrEns, signer);\n  return await daoInstance.estimateGas.deposit(\n    params.tokenAddress,\n    params.amount,\n    \"\",\n  );\n}\n\nexport async function estimateErc721Deposit(\n  signer: Signer,\n  params: DepositErc721Params,\n): Promise<BigNumber> {\n  await DepositErc721Schema.strict().validate(params);\n  const erc721Contract = new Contract(\n    params.tokenAddress,\n    ERC721_ABI,\n    signer,\n  );\n  return erc721Contract.estimateGas\n    [\"safeTransferFrom(address,address,uint256)\"](\n      await signer.getAddress(),\n      params.daoAddressOrEns,\n      params.tokenId,\n    );\n}\n\nexport async function estimateErc1155Deposit(\n  signer: Signer,\n  params: DepositErc1155Params,\n): Promise<BigNumber> {\n  await DepositErc1155Schema.strict().validate(params);\n  const erc1155Contract = new Contract(\n    params.tokenAddress,\n    ERC1155_ABI,\n    signer,\n  );\n  let estimation: BigNumber;\n  if (params.tokenIds.length === 1) {\n    estimation = await erc1155Contract.estimateGas\n      [\"safeTransferFrom(address,address,uint256,uint256,bytes)\"](\n        await signer.getAddress(),\n        params.daoAddressOrEns,\n        params.tokenIds[0],\n        params.amounts[0],\n        new Uint8Array(0),\n      );\n  } else {\n    estimation = await erc1155Contract.estimateGas\n      [\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"](\n        await signer.getAddress(),\n        params.daoAddressOrEns,\n        params.tokenIds,\n        params.amounts,\n        new Uint8Array(0),\n      );\n  }\n  return estimation;\n}\n\nexport function decodeGrantAction(\n  data: Uint8Array,\n): GrantPermissionDecodedParams {\n  const daoInterface = DAO__factory.createInterface();\n  const hexBytes = bytesToHex(data);\n  const expectedFunction = daoInterface.getFunction(\"grant\");\n  const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n  return permissionParamsFromContract(result);\n}\nexport function decodeRevokeAction(\n  data: Uint8Array,\n): RevokePermissionDecodedParams {\n  const daoInterface = DAO__factory.createInterface();\n  const hexBytes = bytesToHex(data);\n  const expectedFunction = daoInterface.getFunction(\"revoke\");\n  const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n  return permissionParamsFromContract(result);\n}\n\nexport function decodeApplyUpdateAction(\n  data: Uint8Array,\n): DecodedApplyUpdateParams {\n  const pspInterface = PluginSetupProcessor__factory.createInterface();\n  const hexBytes = bytesToHex(data);\n  const expectedFunction = pspInterface.getFunction(\"applyUpdate\");\n  const result = pspInterface.decodeFunctionData(expectedFunction, hexBytes);\n  return applyUpdateParamsFromContract(result);\n}\n\nexport function findInterface(\n  data: Uint8Array,\n  functionSignatures: string[],\n): InterfaceParams | null {\n  try {\n    const func = getFunctionFragment(data, functionSignatures);\n    return {\n      id: func.format(\"minimal\"),\n      functionName: func.name,\n      hash: bytesToHex(data).substring(0, 10),\n    };\n  } catch {\n    return null;\n  }\n}\n\nexport function findActionIndex(\n  actions: DaoAction[],\n  functionSignature: string,\n): number {\n  for (const [index, action] of actions.entries()) {\n    const iface = findInterface(action.data, [functionSignature]);\n    if (iface) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nexport function toDaoActions(actions: SubgraphAction[]): DaoAction[] {\n  return actions.map((action) => ({\n    to: action.to,\n    value: BigInt(action.value),\n    data: hexToBytes(action.data),\n  }));\n}\n\nexport function hashPermissions(permissions: MultiTargetPermission[]) {\n  return keccak256(\n    defaultAbiCoder.encode(\n      [\"tuple(uint8,address,address,address,bytes32)[]\"],\n      [permissions],\n    ),\n  );\n}\n\nexport function getPreparedSetupId(\n  params: DecodedApplyInstallationParams | DecodedApplyUpdateParams,\n  preparationType: PreparationType,\n) {\n  return keccak256(\n    defaultAbiCoder.encode(\n      [\n        \"tuple(uint8, uint16)\",\n        \"address\",\n        \"bytes32\",\n        \"bytes32\",\n        \"bytes32\",\n        \"uint8\",\n      ],\n      [\n        [params.versionTag.release, params.versionTag.build],\n        params.pluginRepo,\n        hashPermissions(params.permissions),\n        params.helpersHash,\n        keccak256(new Uint8Array()), // there is no data so we pass an empty uint8Array\n        preparationType,\n      ],\n    ),\n  );\n}\n\nexport function decodeUpgradeToAndCallAction(\n  data: Uint8Array,\n): UpgradeToAndCallParams {\n  const daoInterface = DAO__factory.createInterface();\n  const hexBytes = bytesToHex(data);\n  const expectedFunction = daoInterface.getFunction(\n    \"upgradeToAndCall\",\n  );\n  const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n  return {\n    implementationAddress: result[0],\n    data: hexToBytes(result[1]),\n  };\n}\n\nexport function decodeUpgradeToAction(\n  data: Uint8Array,\n) {\n  const daoInterface = DAO__factory.createInterface();\n  const hexBytes = bytesToHex(data);\n  const expectedFunction = daoInterface.getFunction(\n    \"upgradeTo\",\n  );\n  const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n  return result[0];\n}\n\nexport function decodeInitializeFromAction(\n  data: Uint8Array,\n): DecodedInitializeFromParams {\n  const daoInterface = DAO__factory.createInterface();\n  const hexBytes = bytesToHex(data);\n  const expectedFunction = daoInterface.getFunction(\n    \"initializeFrom\",\n  );\n  const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n  return {\n    previousVersion: result[0],\n    initData: hexToBytes(result[1]),\n  };\n}\n\nexport function toPluginPreparationListItem(\n  pluginPreparation: SubgraphPluginPreparationListItem,\n): PluginPreparationListItem {\n  return {\n    id: pluginPreparation.id,\n    type: pluginPreparation.type,\n    creator: pluginPreparation.creator,\n    dao: pluginPreparation.dao.id,\n    pluginRepo: pluginPreparation.pluginRepo,\n    versionTag: {\n      build: pluginPreparation.pluginVersion.build,\n      release: pluginPreparation.pluginVersion.release.release,\n    },\n    pluginAddress: pluginPreparation.pluginAddress,\n    permissions: pluginPreparation.permissions.map((permission) => ({\n      id: permission.id,\n      operation: toPluginPermissionOperationType(permission.operation),\n      who: permission.who,\n      where: permission.where,\n      condition: permission.condition,\n      permissionId: permission.permissionId,\n    })),\n    helpers: pluginPreparation.helpers,\n    data: hexToBytes(pluginPreparation.data),\n  };\n}\n\nexport function toPluginPermissionOperationType(\n  operation: SubgraphPluginPermissionOperation,\n): PermissionOperationType {\n  switch (operation) {\n    case SubgraphPluginPermissionOperation.GRANT:\n      return PermissionOperationType.GRANT;\n    case SubgraphPluginPermissionOperation.REVOKE:\n      return PermissionOperationType.REVOKE;\n    case SubgraphPluginPermissionOperation.GRANT_WITH_CONDITION:\n      return PermissionOperationType.GRANT_WITH_CONDITION;\n    default:\n      throw new InvalidPermissionOperationType();\n  }\n}\n\n// function that compares 2 generic arrays\n// and returns true if they are equal\n// and false if they are not\nexport function compareArrays<T>(array1: T[], array2: T[]): boolean {\n  return JSON.stringify(array1) === JSON.stringify(array2);\n}\nasync function getPluginInstallations(\n  daoAddress: string,\n  pluginAddress: string,\n  graphql: IClientGraphQLCore,\n): Promise<SubgraphPluginInstallationListItem[]> {\n  const name = \"pluginInstallations\";\n  type U = { pluginInstallations: SubgraphPluginInstallationListItem[] };\n  const query = QueryPluginInstallations;\n  const params = {\n    where: {\n      plugin: pluginAddress.toLowerCase(),\n      dao: daoAddress.toLowerCase(),\n    },\n  };\n  const res = await graphql.request<U>({\n    query,\n    params,\n    name,\n  });\n  const { pluginInstallations } = res;\n  return pluginInstallations;\n}\nexport async function validateGrantUpgradePluginPermissionAction(\n  action: DaoAction,\n  pspAddress: string,\n  daoAddress: string,\n  graphql: IClientGraphQLCore,\n): Promise<PluginUpdateProposalInValidityCause[]> {\n  const causes: PluginUpdateProposalInValidityCause[] = [];\n  // decode the action\n  const decodedPermission = decodeGrantAction(action.data);\n  // retrieve the plugin installations from subgraph\n  // with the same plugin address and the specified\n  // dao address\n  const pluginInstallations = await getPluginInstallations(\n    daoAddress,\n    decodedPermission.where,\n    graphql,\n  );\n  // if the plugin installations length is 0 means that\n  // that the address in the where field is not a plugin\n  // or is not installed in the specified dao\n  if (pluginInstallations.length === 0) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .PLUGIN_NOT_INSTALLED,\n    );\n  }\n  // Value must be 0\n  if (action.value.toString() !== \"0\") {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .NON_ZERO_GRANT_UPGRADE_PLUGIN_PERMISSION_CALL_VALUE,\n    );\n  }\n  // The action should be sent to the DAO\n  if (action.to !== daoAddress) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_TO_ADDRESS,\n    );\n  }\n\n  // The permission should be granted to the PSP\n  if (decodedPermission.who !== pspAddress) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_WHO_ADDRESS,\n    );\n  }\n  // The permission should be `UPGRADE_PLUGIN_PERMISSION`\n  if (\n    decodedPermission.permission !== Permissions.UPGRADE_PLUGIN_PERMISSION\n  ) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_PERMISSION_NAME,\n    );\n  }\n  // The permissionId should be `UPGRADE_PLUGIN_PERMISSION_ID`\n  if (\n    decodedPermission.permissionId !==\n      PermissionIds.UPGRADE_PLUGIN_PERMISSION_ID\n  ) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_PERMISSION_ID,\n    );\n  }\n  return causes;\n}\n\nexport async function validateRevokeUpgradePluginPermissionAction(\n  action: DaoAction,\n  pspAddress: string,\n  daoAddress: string,\n  graphql: IClientGraphQLCore,\n): Promise<PluginUpdateProposalInValidityCause[]> {\n  const causes: PluginUpdateProposalInValidityCause[] = [];\n  const decodedPermission = decodeRevokeAction(action.data);\n  const pluginInstallations = await getPluginInstallations(\n    daoAddress,\n    decodedPermission.where,\n    graphql,\n  );\n  if (pluginInstallations.length === 0) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .PLUGIN_NOT_INSTALLED,\n    );\n  }\n  // The action should be sent to the DAO\n  if (action.to !== daoAddress) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_TO_ADDRESS,\n    );\n  }\n  if (action.value.toString() !== \"0\") {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .NON_ZERO_REVOKE_UPGRADE_PLUGIN_PERMISSION_CALL_VALUE,\n    );\n  }\n  if (decodedPermission.who !== pspAddress) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_WHO_ADDRESS,\n    );\n  }\n  if (\n    decodedPermission.permission !== Permissions.UPGRADE_PLUGIN_PERMISSION\n  ) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_PERMISSION_NAME,\n    );\n  }\n  if (\n    decodedPermission.permissionId !==\n      PermissionIds.UPGRADE_PLUGIN_PERMISSION_ID\n  ) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_PERMISSION_ID,\n    );\n  }\n  return causes;\n}\nexport function validateGrantRootPermissionAction(\n  action: DaoAction,\n  daoAddress: string,\n  pspAddress: string,\n): PluginUpdateProposalInValidityCause[] {\n  const causes: PluginUpdateProposalInValidityCause[] = [];\n  const decodedPermission = decodeGrantAction(action.data);\n  if (action.value.toString() !== \"0\") {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .NON_ZERO_GRANT_ROOT_PERMISSION_CALL_VALUE,\n    );\n  }\n  // The action should be sent to the DAO\n  // both come from subgraph so they are already lowercase\n  if (action.to !== daoAddress) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_GRANT_ROOT_PERMISSION_TO_ADDRESS,\n    );\n  }\n  // decodedPermission.where is checksummed so we need to lowercase it\n  // to compare it with the daoAddress because it comes from the subgraph\n  if (decodedPermission.where.toLowerCase() !== daoAddress) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_GRANT_ROOT_PERMISSION_WHERE_ADDRESS,\n    );\n  }\n  if (decodedPermission.who !== pspAddress) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_GRANT_ROOT_PERMISSION_WHO_ADDRESS,\n    );\n  }\n  if (\n    decodedPermission.permission !== Permissions.ROOT_PERMISSION\n  ) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_GRANT_ROOT_PERMISSION_PERMISSION_NAME,\n    );\n  }\n  if (\n    decodedPermission.permissionId !==\n      PermissionIds.ROOT_PERMISSION_ID\n  ) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_GRANT_ROOT_PERMISSION_PERMISSION_ID,\n    );\n  }\n  return causes;\n}\nexport function validateRevokeRootPermissionAction(\n  action: DaoAction,\n  daoAddress: string,\n  pspAddress: string,\n): PluginUpdateProposalInValidityCause[] {\n  const causes: PluginUpdateProposalInValidityCause[] = [];\n  const decodedPermission = decodeRevokeAction(action.data);\n  if (action.value.toString() !== \"0\") {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .NON_ZERO_REVOKE_ROOT_PERMISSION_CALL_VALUE,\n    );\n  }\n  // The action should be sent to the DAO\n  if (action.to !== daoAddress) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_REVOKE_ROOT_PERMISSION_TO_ADDRESS,\n    );\n  }\n  if (decodedPermission.where !== daoAddress) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_REVOKE_ROOT_PERMISSION_WHERE_ADDRESS,\n    );\n  }\n  if (decodedPermission.who !== pspAddress) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_REVOKE_ROOT_PERMISSION_WHO_ADDRESS,\n    );\n  }\n  if (\n    decodedPermission.permission !== Permissions.ROOT_PERMISSION\n  ) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_REVOKE_ROOT_PERMISSION_PERMISSION_NAME,\n    );\n  }\n  if (\n    decodedPermission.permissionId !==\n      PermissionIds.ROOT_PERMISSION_ID\n  ) {\n    causes.push(\n      PluginUpdateProposalInValidityCause\n        .INVALID_REVOKE_ROOT_PERMISSION_PERMISSION_ID,\n    );\n  }\n  return causes;\n}\n/**\n * Validate a plugin update proposal\n *\n * @export\n * @param {DaoAction} action\n * @param {string} daoAddress\n * @param {IClientGraphQLCore} graphql\n * @param {IClientIpfsCore} ipfs\n * @return {Promise<PluginUpdateProposalInValidityCause[]>}\n */\nexport async function validateApplyUpdateFunction(\n  action: DaoAction,\n  daoAddress: string,\n  graphql: IClientGraphQLCore,\n  ipfs: IClientIpfsCore,\n): Promise<PluginUpdateProposalInValidityCause[]> {\n  const causes: PluginUpdateProposalInValidityCause[] = [];\n  if (action.value.toString() !== \"0\") {\n    causes.push(\n      PluginUpdateProposalInValidityCause.NON_ZERO_APPLY_UPDATE_CALL_VALUE,\n    );\n  }\n  const decodedParams = decodeApplyUpdateAction(\n    action.data,\n  );\n  // get dao with plugins\n  type U = { dao: SubgraphDao };\n  const { dao } = await graphql.request<U>({\n    query: QueryDao,\n    params: { address: daoAddress },\n    name: \"dao\",\n  });\n  // find the plugin with the same address\n  const plugin = dao.plugins.find((plugin) =>\n    plugin.appliedPreparation?.pluginAddress ===\n      decodedParams.pluginAddress.toLowerCase()\n  );\n  if (!plugin) {\n    causes.push(PluginUpdateProposalInValidityCause.PLUGIN_NOT_INSTALLED);\n    return causes;\n  }\n  // check release is the same as the one installed\n  if (\n    plugin.appliedVersion?.release.release !==\n      decodedParams.versionTag.release\n  ) {\n    causes.push(\n      PluginUpdateProposalInValidityCause.UPDATE_TO_INCOMPATIBLE_RELEASE,\n    );\n  }\n  // check build is higher than the one installed\n  if (\n    !plugin.appliedVersion?.build ||\n    plugin.appliedVersion?.build >=\n      decodedParams.versionTag.build\n  ) {\n    causes.push(\n      PluginUpdateProposalInValidityCause.UPDATE_TO_OLDER_OR_SAME_BUILD,\n    );\n  }\n  // check if plugin repo (pluginSetupRepo) exist\n  type V = { pluginRepo: SubgraphPluginRepo };\n  const { pluginRepo } = await graphql.request<V>({\n    query: QueryPlugin,\n    params: { id: decodedParams.pluginRepo.toLowerCase() },\n    name: \"pluginRepo\",\n  });\n  if (!pluginRepo) {\n    causes.push(PluginUpdateProposalInValidityCause.MISSING_PLUGIN_REPO);\n    return causes;\n  }\n  // check if is one of the aragon plugin repos\n  if (\n    !SupportedPluginRepoArray.includes(\n      pluginRepo.subdomain as SupportedPluginRepo,\n    )\n  ) {\n    causes.push(PluginUpdateProposalInValidityCause.NOT_ARAGON_PLUGIN_REPO);\n  }\n\n  // get the prepared setup id\n  const preparedSetupId = getPreparedSetupId(\n    decodedParams,\n    PreparationType.UPDATE,\n  );\n  // get plugin preparation\n  type W = { pluginPreparations: SubgraphPluginUpdatePreparation[] };\n  const { pluginPreparations } = await graphql.request<W>({\n    query: QueryPluginPreparations,\n    params: {\n      where: {\n        preparedSetupId: preparedSetupId.toLowerCase(),\n        pluginAddress: decodedParams.pluginAddress.toLowerCase(),\n      },\n    },\n    name: \"pluginPreparations\",\n  });\n  if (!pluginPreparations.length) {\n    causes.push(\n      PluginUpdateProposalInValidityCause.MISSING_PLUGIN_PREPARATION,\n    );\n    return causes;\n  }\n  // get the metadata of the plugin repo\n  // for the release and build specified\n  const release = pluginRepo.releases.find((\n    release: SubgraphPluginRepoRelease,\n  ) => release.release === decodedParams.versionTag.release);\n  const build = release?.builds.find((\n    build: { build: number; metadata: string },\n  ) => build.build === decodedParams.versionTag.build);\n  if (!build) {\n    causes.push(\n      PluginUpdateProposalInValidityCause.INVALID_PLUGIN_REPO_METADATA,\n    );\n    return causes;\n  }\n  const metadataUri = build.metadata;\n\n  // fetch the metadata\n  const metadataCid = new MultiUri(metadataUri).ipfsCid;\n  const metadata = await ipfs.fetchString(metadataCid!);\n  const metadataJson = JSON.parse(metadata);\n  // Due to an human error the build metadata on the plugins\n  // was not correct on the first release of the plugin repos\n  // this is on chain so we cannot change it and we need to\n  // handle it here. So we check if the metadata has the fields\n  // for the fixed metadata and if it does not we try with the\n  // old metadata fields\n  // Original PR: https://github.com/aragon/osx/pull/375\n  // Fix PR: https://github.com/aragon/osx/pull/481\n  let updateAbi = [];\n  updateAbi = metadataJson?.pluginSetup?.prepareUpdate\n    ?.[plugin.appliedVersion?.build!]?.inputs;\n  if (!updateAbi) {\n    updateAbi = metadataJson?.pluginSetup?.prepareInstallation?.prepareUpdate\n      ?.[plugin.appliedVersion?.build!]?.inputs;\n  }\n  // get the update abi for the specified build\n  if (updateAbi) {\n    try {\n      if (\n        decodedParams.initData.length > 0 &&\n        updateAbi.length === 0\n      ) {\n        throw new Error();\n      }\n      // if the decode does not throw an error the data is valid\n      defaultAbiCoder.decode(\n        getNamedTypesFromMetadata(updateAbi),\n        decodedParams.initData,\n      );\n    } catch {\n      // if the decode throws an error the data is invalid\n      causes.push(\n        PluginUpdateProposalInValidityCause.INVALID_DATA,\n      );\n    }\n  } else {\n    causes.push(\n      PluginUpdateProposalInValidityCause.INVALID_PLUGIN_REPO_METADATA,\n    );\n  }\n  return causes;\n}\n\n/**\n * Given a list of actions, it decodes the actions and returns the\n * type of action\n *\n * @export\n * @param {DaoAction[]} actions\n * @return {ProposalActionTypes[]}\n */\nexport function classifyProposalActions(\n  actions: DaoAction[],\n): ProposalActionTypes[] {\n  const classifiedActions: ProposalActionTypes[] = [];\n\n  for (const action of actions) {\n    try {\n      let decodedPermission:\n        | GrantPermissionDecodedParams\n        | RevokePermissionDecodedParams;\n      const func = getFunctionFragment(action.data, UPDATE_PLUGIN_SIGNATURES);\n      switch (func.name) {\n        case \"upgradeTo\":\n          classifiedActions.push(ProposalActionTypes.UPGRADE_TO);\n          break;\n        case \"upgradeToAndCall\":\n          classifiedActions.push(ProposalActionTypes.UPGRADE_TO_AND_CALL);\n          break;\n        case \"grant\":\n          decodedPermission = decodeGrantAction(action.data);\n          // check the permission that is being granted\n          switch (decodedPermission.permission) {\n            case Permissions.UPGRADE_PLUGIN_PERMISSION:\n              classifiedActions.push(\n                ProposalActionTypes.GRANT_PLUGIN_UPGRADE_PERMISSION,\n              );\n              break;\n            case Permissions.ROOT_PERMISSION:\n              classifiedActions.push(\n                ProposalActionTypes.GRANT_ROOT_PERMISSION,\n              );\n              break;\n            default:\n              classifiedActions.push(\n                ProposalActionTypes.UNKNOWN,\n              );\n              break;\n          }\n          break;\n        case \"revoke\":\n          decodedPermission = decodeRevokeAction(action.data);\n          // check the permission that is being granted\n          switch (decodedPermission.permission) {\n            case Permissions.UPGRADE_PLUGIN_PERMISSION:\n              classifiedActions.push(\n                ProposalActionTypes.REVOKE_PLUGIN_UPGRADE_PERMISSION,\n              );\n              break;\n            case Permissions.ROOT_PERMISSION:\n              classifiedActions.push(\n                ProposalActionTypes.REVOKE_ROOT_PERMISSION,\n              );\n              break;\n            default:\n              classifiedActions.push(\n                ProposalActionTypes.UNKNOWN,\n              );\n              break;\n          }\n          break;\n        case \"applyUpdate\":\n          classifiedActions.push(ProposalActionTypes.APPLY_UPDATE);\n          break;\n        default:\n          classifiedActions.push(ProposalActionTypes.ACTION_NOT_ALLOWED);\n          break;\n      }\n    } catch {\n      classifiedActions.push(ProposalActionTypes.UNKNOWN);\n    }\n  }\n  return classifiedActions;\n}\n\n/**\n * Returns true if the actions are valid for a plugin update proposal with root permission\n *\n * @export\n * @param {ProposalActionTypes[]} actions\n * @return {boolean}\n */\nexport function containsPluginUpdateActionBlockWithRootPermission(\n  actions: ProposalActionTypes[],\n): boolean {\n  // get the first 5 actions\n  const receivedPattern = actions.slice(0, 5);\n  // check if it matches the expected pattern\n  // length should be 5\n  return receivedPattern.length === 5 &&\n    compareArrays(receivedPattern, PLUGIN_UPDATE_WITH_ROOT_ACTION_PATTERN);\n}\n\n/**\n * Returns true if the actions are valid for a plugin update proposal without root permission\n *\n * @export\n * @param {ProposalActionTypes[]} actions\n * @return {boolean}\n */\nexport function containsPluginUpdateActionBlock(\n  actions: ProposalActionTypes[],\n): boolean {\n  // get the first 3 action\n  const receivedPattern = actions.slice(0, 3);\n  // check if it matches the expected pattern\n  // length should be 3\n  return receivedPattern.length === 3 &&\n    compareArrays(receivedPattern, PLUGIN_UPDATE_ACTION_PATTERN);\n}\n/**\n * Returns true if the actions are valid for a plugin update proposal\n *\n * @export\n * @param {ProposalActionTypes[]} actions\n * @return {boolean}\n */\nexport function startsWithDaoUpdateAction(\n  actions: ProposalActionTypes[],\n): boolean {\n  // UpgradeTo or UpgradeToAndCall should be the first action\n  return actions[0] === ProposalActionTypes.UPGRADE_TO ||\n    actions[0] === ProposalActionTypes.UPGRADE_TO_AND_CALL;\n}\n\nexport function validateUpdateDaoProposalActions(\n  actions: DaoAction[],\n  daoAddress: string,\n  expectedImplementationAddress: string,\n  currentDaoVersion: [number, number, number],\n): DaoUpdateProposalValidity {\n  const classifiedActions = classifyProposalActions(actions);\n  const actionErrorCauses: DaoUpdateProposalInvalidityCause[] = [];\n  const proposalSettingsErrorCauses: ProposalSettingsErrorCause[] = [];\n  // check if the actions are valid\n  if (!startsWithDaoUpdateAction(classifiedActions)) {\n    // If actions are not valid, add the cause to the causes array\n    // and return\n    return {\n      isValid: false,\n      proposalSettingsErrorCauses: [ProposalSettingsErrorCause.INVALID_ACTIONS],\n      actionErrorCauses: [],\n    };\n  }\n  // if they are valid, this means that\n  // the upgrade action must be the first one\n  const upgradeActionType = classifiedActions[0];\n  const upgradeAction = actions[0];\n  // if the to address is not the dao address\n  // add the cause to the causes array\n  if (upgradeAction.to !== daoAddress) {\n    actionErrorCauses.push(\n      DaoUpdateProposalInvalidityCause.INVALID_TO_ADDRESS,\n    );\n  }\n  // if the value is different from 0\n  // add the cause to the causes array\n  if (upgradeAction.value.toString() !== \"0\") {\n    actionErrorCauses.push(\n      DaoUpdateProposalInvalidityCause.NON_ZERO_CALL_VALUE,\n    );\n  }\n  switch (upgradeActionType) {\n    case ProposalActionTypes.UPGRADE_TO:\n      // decode the upgradeTo action\n      const decodedImplementationAddress = decodeUpgradeToAction(\n        actions[0].data,\n      );\n      // check that the implementation address is the same\n      if (expectedImplementationAddress !== decodedImplementationAddress) {\n        actionErrorCauses.push(\n          DaoUpdateProposalInvalidityCause\n            .INVALID_UPGRADE_TO_IMPLEMENTATION_ADDRESS,\n        );\n      }\n      break;\n    case ProposalActionTypes.UPGRADE_TO_AND_CALL: // decode the action\n      const upgradeToAndCallDecodedParams = decodeUpgradeToAndCallAction(\n        actions[0].data,\n      );\n      // the call data should be the initializeFrom function encoded\n      // so we decode the initialize from function\n      const initializeFromDecodedParams = decodeInitializeFromAction(\n        upgradeToAndCallDecodedParams.data,\n      );\n      // check that the implementation address is the same as specified\n      // in the upgradeToAndCall action\n      if (\n        expectedImplementationAddress !==\n          upgradeToAndCallDecodedParams.implementationAddress\n      ) {\n        actionErrorCauses.push(\n          DaoUpdateProposalInvalidityCause\n            .INVALID_UPGRADE_TO_AND_CALL_IMPLEMENTATION_ADDRESS,\n        );\n      }\n      // check that the current version version of the dao is the same\n      // as the one specified as previous version in the initializeFrom function\n      if (\n        JSON.stringify(initializeFromDecodedParams.previousVersion) !==\n          JSON.stringify(currentDaoVersion)\n      ) {\n        actionErrorCauses.push(\n          DaoUpdateProposalInvalidityCause.INVALID_UPGRADE_TO_AND_CALL_VERSION,\n        );\n      }\n\n      // For now, we check that the `bytes calldata _initData` parameter of the `initializeFrom` function call is empty (because updates related to 1.0.0, 1.3.0, or 1.4.0 don't require `_initData`).\n      // TODO For future upgrade requiring non-empty `_initData`, we must define a place to obtain this information from permissionlessly.\n      if (initializeFromDecodedParams.initData.length !== 0) {\n        actionErrorCauses.push(\n          DaoUpdateProposalInvalidityCause.INVALID_UPGRADE_TO_AND_CALL_DATA,\n        );\n      }\n      break;\n    default:\n      proposalSettingsErrorCauses.push(\n        ProposalSettingsErrorCause.INVALID_ACTIONS,\n      );\n      break;\n  }\n  // return the validity of the proposal\n  return {\n    isValid: actionErrorCauses.length === 0 &&\n      proposalSettingsErrorCauses.length === 0,\n    actionErrorCauses,\n    proposalSettingsErrorCauses,\n  };\n}\n\nexport async function validateUpdatePluginProposalActions(\n  actions: DaoAction[],\n  daoAddress: string,\n  pspAddress: string,\n  graphql: IClientGraphQLCore,\n  ipfs: IClientIpfsCore,\n): Promise<PluginUpdateProposalValidity> {\n  // Declare variables\n  let actionErrorCauses: PluginUpdateProposalInValidityCause[][] = [];\n  let resCauses: PluginUpdateProposalInValidityCause[];\n  let proposalSettingsErrorCauses: ProposalSettingsErrorCause[] = [];\n  const classifiedActions = classifyProposalActions(actions);\n  // check if is an update plugin proposal\n  if (containsPluginUpdateActionBlock(classifiedActions)) {\n    // initialize the causes array\n    // we always use the index 0\n    // because this is going to be called recursively\n    // and then joined\n    actionErrorCauses[0] = [];\n    // iterate over the first 3 actions actions\n    for (const [index, action] of classifiedActions.slice(0, 3).entries()) {\n      switch (action) {\n        // if the action is grant plugin update permission\n        // validate the action\n        case ProposalActionTypes.GRANT_PLUGIN_UPGRADE_PERMISSION:\n          resCauses = await validateGrantUpgradePluginPermissionAction(\n            actions[index],\n            pspAddress,\n            daoAddress,\n            graphql,\n          );\n          actionErrorCauses[0] = [...actionErrorCauses[0], ...resCauses];\n          break;\n          // if the action is revoke plugin update permission\n          // validate the action\n        case ProposalActionTypes.REVOKE_PLUGIN_UPGRADE_PERMISSION:\n          resCauses = await validateRevokeUpgradePluginPermissionAction(\n            actions[index],\n            pspAddress,\n            daoAddress,\n            graphql,\n          );\n          actionErrorCauses[0] = [...actionErrorCauses[0], ...resCauses];\n          break;\n          // if the action is grant root permission\n          // validate the action\n        case ProposalActionTypes.APPLY_UPDATE:\n          resCauses = await validateApplyUpdateFunction(\n            actions[index],\n            daoAddress,\n            graphql,\n            ipfs,\n          );\n          actionErrorCauses[0] = [...actionErrorCauses[0], ...resCauses];\n          break;\n          // other cases are not allowed and should have been\n          // caught by the containsPluginUpdateActionBlock function\n      }\n    }\n    // slice the first 3 actions\n    // because they have already been validated\n    // and recursively call the function\n    actions = actions.slice(3);\n    if (actions.length !== 0) {\n      // recursively call the function\n      const recCauses = await validateUpdatePluginProposalActions(\n        actions,\n        daoAddress,\n        pspAddress,\n        graphql,\n        ipfs,\n      );\n      // join the causes\n      actionErrorCauses = [\n        ...actionErrorCauses,\n        ...recCauses.actionErrorCauses,\n      ];\n      proposalSettingsErrorCauses = [\n        ...proposalSettingsErrorCauses,\n        ...recCauses.proposalSettingsErrorCauses,\n      ];\n    }\n    return {\n      // every item in the array should be empty\n      isValid: actionErrorCauses.every((cause) => cause.length === 0) &&\n        proposalSettingsErrorCauses.length === 0,\n      actionErrorCauses,\n      proposalSettingsErrorCauses,\n    };\n  }\n\n  if (containsPluginUpdateActionBlockWithRootPermission(classifiedActions)) {\n    // initialize the causes array\n    // we always use the index 0\n    // because this is going to be called recursively\n    // and then joined\n    actionErrorCauses[0] = [];\n    // iterate over the first 5 actions actions\n    for (const [index, action] of classifiedActions.slice(0, 5).entries()) {\n      switch (action) {\n        // if the action is grant plugin update permission\n        // validate the action\n        case ProposalActionTypes.GRANT_PLUGIN_UPGRADE_PERMISSION:\n          resCauses = await validateGrantUpgradePluginPermissionAction(\n            actions[index],\n            pspAddress,\n            daoAddress,\n            graphql,\n          );\n          actionErrorCauses[0] = [...actionErrorCauses[0], ...resCauses];\n          break;\n          // if the action is revoke plugin update permission\n          // validate the action\n        case ProposalActionTypes.REVOKE_PLUGIN_UPGRADE_PERMISSION:\n          resCauses = await validateRevokeUpgradePluginPermissionAction(\n            actions[index],\n            pspAddress,\n            daoAddress,\n            graphql,\n          );\n          actionErrorCauses[0] = [...actionErrorCauses[0], ...resCauses];\n          break;\n          // if the action is grant root permission\n          // validate the action\n        case ProposalActionTypes.GRANT_ROOT_PERMISSION:\n          resCauses = validateGrantRootPermissionAction(\n            actions[index],\n            daoAddress,\n            pspAddress,\n          );\n          actionErrorCauses[0] = [...actionErrorCauses[0], ...resCauses];\n          break;\n          // if the action is revoke root permission\n          // validate the action\n\n        case ProposalActionTypes.REVOKE_ROOT_PERMISSION:\n          resCauses = validateRevokeRootPermissionAction(\n            actions[index],\n            daoAddress,\n            pspAddress,\n          );\n          actionErrorCauses[0] = [...actionErrorCauses[0], ...resCauses];\n          break;\n          // if the action is apply update\n          // validate the action\n        case ProposalActionTypes.APPLY_UPDATE:\n          resCauses = await validateApplyUpdateFunction(\n            actions[index],\n            daoAddress,\n            graphql,\n            ipfs,\n          );\n          actionErrorCauses[0] = [...actionErrorCauses[0], ...resCauses];\n          break;\n\n          // other cases are not allowed and should have been\n          // caught by the containsPluginUpdateActionBlockWithRootPermission function\n      }\n    }\n    // slice the first 5 actions\n    // because they have already been validated\n    actions = actions.slice(5);\n    if (actions.length !== 0) {\n      // recursively call the function\n      const recCauses = await validateUpdatePluginProposalActions(\n        actions,\n        daoAddress,\n        pspAddress,\n        graphql,\n        ipfs,\n      );\n      // join the causes\n      actionErrorCauses = [\n        ...actionErrorCauses,\n        ...recCauses.actionErrorCauses,\n      ];\n      proposalSettingsErrorCauses = [\n        ...proposalSettingsErrorCauses,\n        ...recCauses.proposalSettingsErrorCauses,\n      ];\n    }\n    return {\n      // every item in the array should be empty\n      isValid: actionErrorCauses.every((cause) => cause.length === 0) &&\n        proposalSettingsErrorCauses.length === 0,\n      actionErrorCauses,\n      proposalSettingsErrorCauses,\n    };\n  }\n  // add invalid actions to the causes array\n  // return, if this is inside the recursion\n  // it will be added to the array\n  return {\n    isValid: false,\n    proposalSettingsErrorCauses: [ProposalSettingsErrorCause.INVALID_ACTIONS],\n    actionErrorCauses: actionErrorCauses,\n  };\n}\n\nexport function toSubgraphActions(actions: DaoAction[]): SubgraphAction[] {\n  return actions.map((action) => ({\n    to: action.to,\n    value: action.value.toString(),\n    data: bytesToHex(action.data),\n  }));\n}\n","import {\n  DAO__factory,\n  DAOFactory,\n  DAOFactory__factory,\n  DAORegistry__factory,\n  IProtocolVersion__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\n// HEAD\n\n//\n//079ce5f1 (merge common packages and deprecate sdk-common)\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract, ContractTransaction } from \"@ethersproject/contracts\";\nimport { abi as ERC20_ABI } from \"@openzeppelin/contracts/build/contracts/ERC20.json\";\nimport { abi as ERC721_ABI } from \"@openzeppelin/contracts/build/contracts/ERC721.json\";\nimport { abi as ERC1155_ABI } from \"@openzeppelin/contracts/build/contracts/ERC1155.json\";\nimport {\n  QueryDao,\n  QueryDaos,\n  QueryIPlugin,\n  QueryIProposal,\n  QueryPlugin,\n  QueryPluginPreparationsExtended,\n  QueryPlugins,\n  QueryTokenBalances,\n  QueryTokenTransfers,\n} from \"../graphql-queries\";\nimport {\n  AssetBalance,\n  AssetBalanceSortBy,\n  CreateDaoParams,\n  DaoBalancesQueryParams,\n  DaoCreationSteps,\n  DaoCreationStepValue,\n  DaoDepositSteps,\n  DaoDepositStepValue,\n  DaoDetails,\n  DaoListItem,\n  DaoMetadata,\n  DaoQueryParams,\n  DaoSortBy,\n  DaoUpdateProposalValidity,\n  DepositErc1155Params,\n  DepositErc20Params,\n  DepositErc721Params,\n  DepositEthParams,\n  DepositParams,\n  HasPermissionParams,\n  PluginPreparationListItem,\n  PluginPreparationQueryParams,\n  PluginPreparationSortBy,\n  PluginQueryParams,\n  PluginRepo,\n  PluginRepoBuildMetadata,\n  PluginRepoListItem,\n  PluginRepoReleaseMetadata,\n  PluginSortBy,\n  PluginUpdateProposalValidity,\n  ProposalSettingsErrorCause,\n  SetAllowanceParams,\n  SetAllowanceSteps,\n  SetAllowanceStepValue,\n  Transfer,\n  TransferQueryParams,\n  TransferSortBy,\n} from \"../../types\";\nimport {\n  ProposalActionTypes,\n  SubgraphBalance,\n  SubgraphDao,\n  SubgraphDaoListItem,\n  SubgraphIProposal,\n  SubgraphPluginInstallation,\n  SubgraphPluginPreparationListItem,\n  SubgraphPluginRepo,\n  SubgraphPluginRepoListItem,\n  SubgraphTransferListItem,\n  SubgraphTransferTypeMap,\n} from \"../types\";\nimport {\n  classifyProposalActions,\n  startsWithDaoUpdateAction,\n  toAssetBalance,\n  toDaoActions,\n  toDaoDetails,\n  toDaoListItem,\n  toPluginPreparationListItem,\n  toPluginRepo,\n  toTokenTransfer,\n  validateUpdateDaoProposalActions,\n  validateUpdatePluginProposalActions,\n} from \"../utils\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { id } from \"@ethersproject/hash\";\nimport {\n  EMPTY_BUILD_METADATA_LINK,\n  EMPTY_DAO_METADATA_LINK,\n  EMPTY_RELEASE_METADATA_LINK,\n  UNAVAILABLE_BUILD_METADATA,\n  UNAVAILABLE_DAO_METADATA,\n  UNAVAILABLE_RELEASE_METADATA,\n  UNSUPPORTED_BUILD_METADATA_LINK,\n  UNSUPPORTED_DAO_METADATA_LINK,\n  UNSUPPORTED_RELEASE_METADATA_LINK,\n} from \"../constants\";\nimport { IClientMethods } from \"../interfaces\";\nimport {\n  AddressOrEnsSchema,\n  AmountMismatchError,\n  ClientCore,\n  DaoCreationError,\n  EmptyMultiUriError,\n  FailedDepositError,\n  findLog,\n  getExtendedProposalId,\n  InstallationNotFoundError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  IpfsPinError,\n  MissingExecPermissionError,\n  MULTI_FETCH_TIMEOUT,\n  MultiTargetPermission,\n  NoProviderError,\n  NotImplementedError,\n  PermissionIds,\n  PluginUninstallationPreparationError,\n  prepareGenericInstallation,\n  prepareGenericUpdate,\n  PrepareInstallationParams,\n  PrepareInstallationSchema,\n  PrepareInstallationStepValue,\n  PrepareUninstallationParams,\n  PrepareUninstallationSchema,\n  PrepareUninstallationSteps,\n  PrepareUninstallationStepValue,\n  PrepareUpdateParams,\n  PrepareUpdateStepValue,\n  promiseWithTimeout,\n  resolveIpfsCid,\n  SortDirection,\n  TokenType,\n  UpdateAllowanceError,\n} from \"@aragon/sdk-client-common\";\nimport {\n  CreateDaoSchema,\n  DaoBalancesQuerySchema,\n  DaoMetadataSchema,\n  DaoQuerySchema,\n  DepositErc1155Schema,\n  DepositErc20Schema,\n  DepositErc721Schema,\n  DepositEthSchema,\n  HasPermissionSchema,\n  PluginPreparationQuerySchema,\n  PluginQuerySchema,\n} from \"../schemas\";\nimport {\n  contracts,\n  FrameworkContractsNames,\n  SupportedVersions,\n} from \"@aragon/osx-commons-configs\";\n\n/**\n * Methods module the SDK Generic Client\n */\nexport class ClientMethods extends ClientCore implements IClientMethods {\n  public async *prepareInstallation(\n    params: PrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    await PrepareInstallationSchema.strict().validate(params);\n    yield* prepareGenericInstallation(this.web3, {\n      ...params,\n      pluginSetupProcessorAddress: this.web3.getAddress(\n        FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n      ),\n    });\n  }\n  /**\n   * Creates a DAO with the given settings and plugins\n\n   * @param {CreateDaoParams} params\n   * @return {AsyncGenerator<DaoCreationStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *createDao(\n    params: CreateDaoParams,\n  ): AsyncGenerator<DaoCreationStepValue> {\n    await CreateDaoSchema.strict().validate(params);\n    const signer = this.web3.getConnectedSigner();\n\n    const daoFactoryInstance = DAOFactory__factory.connect(\n      this.web3.getAddress(FrameworkContractsNames.DAO_FACTORY),\n      signer,\n    );\n\n    const pluginInstallationData: DAOFactory.PluginSettingsStruct[] = [];\n    for (const plugin of params.plugins) {\n      const repo = PluginRepo__factory.connect(plugin.id, signer);\n\n      const currentRelease = await repo.latestRelease();\n      const latestVersion = await repo[\"getLatestVersion(uint8)\"](\n        currentRelease,\n      );\n      pluginInstallationData.push({\n        pluginSetupRef: {\n          pluginSetupRepo: repo.address,\n          versionTag: latestVersion.tag,\n        },\n        data: plugin.data,\n      });\n    }\n\n    // check if at least one plugin requests EXECUTE_PERMISSION on the DAO\n    // This check isn't 100% correct all the time\n    // simulate the DAO creation to get an address\n    const pluginSetupProcessorAddr = await daoFactoryInstance\n      .pluginSetupProcessor();\n    const pluginSetupProcessor = PluginSetupProcessor__factory.connect(\n      pluginSetupProcessorAddr,\n      signer,\n    );\n    let execPermissionFound = false;\n\n    // using the DAO base because it reflects a newly created DAO the best\n    const daoBaseAddr = await daoFactoryInstance.daoBase();\n    // simulates each plugin installation seperately to get the requested permissions\n    for (const installData of pluginInstallationData) {\n      const pluginSetupProcessorResponse = await pluginSetupProcessor.callStatic\n        .prepareInstallation(daoBaseAddr, installData);\n      const found = pluginSetupProcessorResponse[1].permissions.find(\n        (permission) =>\n          permission.permissionId === PermissionIds.EXECUTE_PERMISSION_ID,\n      );\n      if (found) {\n        execPermissionFound = true;\n        break;\n      }\n    }\n\n    if (!execPermissionFound) {\n      throw new MissingExecPermissionError();\n    }\n\n    const tx = await daoFactoryInstance.connect(signer).createDao(\n      {\n        subdomain: params.ensSubdomain ?? \"\",\n        metadata: toUtf8Bytes(params.metadataUri),\n        daoURI: params.daoUri ?? \"\",\n        trustedForwarder: params.trustedForwarder ?? AddressZero,\n      },\n      pluginInstallationData,\n    );\n\n    yield {\n      key: DaoCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n    // start tx\n    const receipt = await tx.wait();\n    const daoFactoryInterface = DAORegistry__factory.createInterface();\n    // find dao address using the dao registry address\n    const log = receipt.logs?.find(\n      (e) =>\n        e.topics[0] ===\n          id(daoFactoryInterface.getEvent(\"DAORegistered\").format(\"sighash\")),\n    );\n\n    if (!log) {\n      throw new DaoCreationError();\n    }\n\n    // Plugin logs\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const installedLogs = receipt.logs?.filter(\n      (e) =>\n        e.topics[0] ===\n          id(pspInterface.getEvent(\"InstallationApplied\").format(\"sighash\")),\n    );\n\n    // DAO logs\n    const parsedLog = daoFactoryInterface.parseLog(log);\n    if (!parsedLog.args[\"dao\"]) {\n      throw new DaoCreationError();\n    }\n\n    yield {\n      key: DaoCreationSteps.DONE,\n      address: parsedLog.args[\"dao\"],\n      pluginAddresses: installedLogs.map(\n        (log) => pspInterface.parseLog(log).args[1],\n      ),\n    };\n  }\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {DaoMetadata} params\n   * @return {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: DaoMetadata): Promise<string> {\n    await DaoMetadataSchema.strict().validate(params);\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Deposits ether or an ERC20 token into the DAO\n   *\n   * @param {DepositParams} params\n   * @return {AsyncGenerator<DaoDepositStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *deposit(\n    params: DepositParams,\n  ): AsyncGenerator<DaoDepositStepValue> {\n    switch (params.type) {\n      case TokenType.NATIVE:\n        yield* this.depositNative(params);\n        break;\n      case TokenType.ERC20:\n        yield* this.depositErc20(params);\n        break;\n      case TokenType.ERC721:\n        yield* this.depositErc721(params);\n        break;\n      case TokenType.ERC1155:\n        yield* this.depositErc1155(params);\n        break;\n      default:\n        throw new NotImplementedError(\n          \"Token type not valid, use transfer function instead\",\n        );\n    }\n  }\n\n  private async *depositNative(\n    params: DepositEthParams,\n  ): AsyncGenerator<DaoDepositStepValue> {\n    await DepositEthSchema.strict().validate(params);\n    const signer = this.web3.getConnectedSigner();\n    const { daoAddressOrEns, amount } = params;\n    const override: { value?: bigint } = { value: params.amount };\n    const daoInstance = DAO__factory.connect(daoAddressOrEns, signer);\n\n    const tx = await daoInstance.deposit(\n      AddressZero,\n      amount,\n      \"\",\n      override,\n    );\n    yield { key: DaoDepositSteps.DEPOSITING, txHash: tx.hash };\n\n    const cr = await tx.wait();\n    const log = findLog(cr, daoInstance.interface, \"Deposited\");\n    if (!log) {\n      throw new FailedDepositError();\n    }\n\n    const daoInterface = DAO__factory.createInterface();\n    const parsedLog = daoInterface.parseLog(log);\n\n    if (!amount.toString() === parsedLog.args[\"amount\"]) {\n      throw new AmountMismatchError(\n        amount,\n        parsedLog.args[\"amount\"].toBigInt(),\n      );\n    }\n    yield { key: DaoDepositSteps.DONE, amount: amount };\n  }\n\n  private async *depositErc20(\n    params: DepositErc20Params,\n  ): AsyncGenerator<DaoDepositStepValue> {\n    await DepositErc20Schema.strict().validate(params);\n    const signer = this.web3.getConnectedSigner();\n    const { tokenAddress, daoAddressOrEns, amount } = params;\n    // check current allowance\n    const tokenContract = new Contract(\n      tokenAddress,\n      ERC20_ABI,\n      signer,\n    );\n    const currentAllowance = await tokenContract.allowance(\n      await signer.getAddress(),\n      daoAddressOrEns,\n    );\n    yield {\n      key: DaoDepositSteps.CHECKED_ALLOWANCE,\n      allowance: currentAllowance.toBigInt(),\n    };\n    // if its lower than the needed, set it to the correct one\n    if (currentAllowance.lt(params.amount)) {\n      // If the target is an ERC20 token, ensure that the amount can be transferred\n      // Relay the yield steps to the caller as they are received\n      yield* this.setAllowance(\n        {\n          amount: params.amount,\n          spender: params.daoAddressOrEns,\n          tokenAddress: params.tokenAddress,\n        },\n      );\n    }\n    // Doing the transfer\n    const daoInstance = DAO__factory.connect(daoAddressOrEns, signer);\n\n    const tx = await daoInstance.deposit(\n      tokenAddress,\n      amount,\n      \"\",\n    );\n    yield { key: DaoDepositSteps.DEPOSITING, txHash: tx.hash };\n\n    const cr = await tx.wait();\n    const log = findLog(cr, daoInstance.interface, \"Deposited\");\n    if (!log) {\n      throw new FailedDepositError();\n    }\n\n    const daoInterface = DAO__factory.createInterface();\n    const parsedLog = daoInterface.parseLog(log);\n\n    if (!amount.toString() === parsedLog.args[\"amount\"]) {\n      throw new AmountMismatchError(\n        amount,\n        parsedLog.args[\"amount\"].toBigInt(),\n      );\n    }\n    yield { key: DaoDepositSteps.DONE, amount: amount };\n  }\n\n  private async *depositErc721(\n    params: DepositErc721Params,\n  ): AsyncGenerator<DaoDepositStepValue> {\n    await DepositErc721Schema.strict().validate(params) as DepositErc721Params;\n    const signer = this.web3.getConnectedSigner();\n    const erc721Contract = new Contract(\n      params.tokenAddress,\n      ERC721_ABI,\n      signer,\n    );\n    const tx = await erc721Contract\n      [\"safeTransferFrom(address,address,uint256)\"](\n        await signer.getAddress(),\n        params.daoAddressOrEns,\n        params.tokenId,\n      );\n\n    const cr = await tx.wait();\n\n    const log = findLog(cr, erc721Contract.interface, \"Transfer\");\n\n    if (!log) {\n      throw new FailedDepositError();\n    }\n\n    const parsedLog = erc721Contract.interface.parseLog(log);\n    if (\n      !parsedLog.args[\"tokenId\"] ||\n      parsedLog.args[\"tokenId\"].toString() !== params.tokenId.toString()\n    ) {\n      throw new FailedDepositError();\n    }\n    yield {\n      key: DaoDepositSteps.DONE,\n      tokenId: params.tokenId,\n    };\n  }\n\n  private async *depositErc1155(\n    params: DepositErc1155Params,\n  ): AsyncGenerator<DaoDepositStepValue> {\n    await DepositErc1155Schema.strict().validate(params);\n    const signer = this.web3.getConnectedSigner();\n    const erc1155Contract = new Contract(\n      params.tokenAddress,\n      ERC1155_ABI,\n      signer,\n    );\n\n    let tx: ContractTransaction, logName: string, logArg: string;\n    if (params.tokenIds.length === 1) {\n      tx = await erc1155Contract\n        [\"safeTransferFrom(address,address,uint256,uint256,bytes)\"](\n          await signer.getAddress(),\n          params.daoAddressOrEns,\n          params.tokenIds[0],\n          params.amounts[0],\n          new Uint8Array([]),\n        );\n      logName = \"TransferSingle\";\n      logArg = \"id\";\n    } else {\n      tx = await erc1155Contract\n        [\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"](\n          await signer.getAddress(),\n          params.daoAddressOrEns,\n          params.tokenIds,\n          params.amounts,\n          new Uint8Array([]),\n        );\n      logName = \"TransferBatch\";\n      logArg = \"ids\";\n    }\n\n    const cr = await tx.wait();\n\n    const log = findLog(cr, erc1155Contract.interface, logName);\n\n    if (!log) {\n      throw new FailedDepositError();\n    }\n\n    const parsedLog = erc1155Contract.interface.parseLog(log);\n    if (\n      !parsedLog.args[logArg] ||\n      parsedLog.args[logArg].toString() !== params.tokenIds.toString()\n    ) {\n      throw new FailedDepositError();\n    }\n    yield {\n      key: DaoDepositSteps.DONE,\n      tokenIds: params.tokenIds,\n      amounts: params.amounts,\n    };\n  }\n\n  /**\n   * Checks if the allowance is enough and updates it\n   *\n   * @param {SetAllowanceParams} params\n   * @return {AsyncGenerator<SetAllowanceStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *setAllowance(\n    params: SetAllowanceParams,\n  ): AsyncGenerator<SetAllowanceStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    // TODO\n    // add params check with yup\n    const tokenInstance = new Contract(\n      params.tokenAddress,\n      ERC20_ABI,\n      signer,\n    );\n    const tx: ContractTransaction = await tokenInstance.approve(\n      params.spender,\n      params.amount,\n    );\n\n    yield {\n      key: SetAllowanceSteps.SETTING_ALLOWANCE,\n      txHash: tx.hash,\n    };\n\n    const cr = await tx.wait();\n    const log = findLog(cr, tokenInstance.interface, \"Approval\");\n\n    if (!log) {\n      throw new UpdateAllowanceError();\n    }\n    const value = log.data;\n    if (!value || BigNumber.from(params.amount).gt(BigNumber.from(value))) {\n      throw new UpdateAllowanceError();\n    }\n\n    yield {\n      key: SetAllowanceSteps.ALLOWANCE_SET,\n      allowance: params.amount,\n    };\n  }\n  /**\n   * Prepare uninstallation of a plugin\n   *\n   * @param {PrepareUninstallationParams} params\n   * @return {AsyncGenerator<PrepareUninstallationStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *prepareUninstallation(\n    params: PrepareUninstallationParams,\n  ): AsyncGenerator<PrepareUninstallationStepValue> {\n    await PrepareUninstallationSchema.strict().validate(\n      params,\n    );\n    const signer = this.web3.getConnectedSigner();\n    type T = {\n      iplugin: { installations: SubgraphPluginInstallation[] };\n    };\n    const { iplugin } = await this.graphql.request<T>({\n      query: QueryIPlugin,\n      params: {\n        address: params.pluginAddress.toLowerCase(),\n        where: { dao: params.daoAddressOrEns.toLowerCase() },\n      },\n      name: \"plugin\",\n    });\n\n    // filter specified installation\n    const { pluginInstallationIndex = 0 } = params;\n    const selectedInstallation = iplugin.installations[pluginInstallationIndex];\n    if (!selectedInstallation) {\n      throw new InstallationNotFoundError();\n    }\n    // encode uninstallation params\n    const { uninstallationParams = [], uninstallationAbi = [] } = params;\n    const data = defaultAbiCoder.encode(\n      uninstallationAbi,\n      uninstallationParams,\n    );\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      this.web3.getAddress(FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR),\n      signer,\n    );\n    const tx = await pspContract.prepareUninstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo:\n            selectedInstallation.appliedPreparation.pluginRepo.id,\n          versionTag: {\n            build: selectedInstallation.appliedVersion.build,\n            release: selectedInstallation.appliedVersion.release.release,\n          },\n        },\n        setupPayload: {\n          plugin: params.pluginAddress,\n          currentHelpers: selectedInstallation.appliedPreparation.helpers,\n          data,\n        },\n      },\n    );\n    yield {\n      key: PrepareUninstallationSteps.PREPARING,\n      txHash: tx.hash,\n    };\n    const cr = await tx.wait();\n\n    const log = findLog(cr, pspContract.interface, \"UninstallationPrepared\");\n    if (!log) {\n      throw new PluginUninstallationPreparationError();\n    }\n    const parsedLog = pspContract.interface.parseLog(log);\n    const permissions = parsedLog.args[\"permissions\"];\n    if (!permissions) {\n      throw new PluginUninstallationPreparationError();\n    }\n    yield {\n      key: PrepareUninstallationSteps.DONE,\n      permissions: permissions.map((permission: MultiTargetPermission) => ({\n        operation: permission.operation,\n        where: permission.where,\n        who: permission.who,\n        permissionId: permission.permissionId,\n      })),\n      pluginRepo: selectedInstallation.appliedPreparation.pluginRepo.id,\n      pluginAddress: params.pluginAddress,\n      versionTag: {\n        build: selectedInstallation.appliedVersion.build,\n        release: selectedInstallation.appliedVersion.release.release,\n      },\n    };\n  }\n  /**\n   * Prepare update of a plugin\n   *\n   * @param {PrepareUpdateParams} params\n   * @return {AsyncGenerator<PrepareUpdateStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *prepareUpdate(\n    params: PrepareUpdateParams,\n  ): AsyncGenerator<PrepareUpdateStepValue> {\n    yield* prepareGenericUpdate(\n      this.web3,\n      this.graphql,\n      {\n        ...params,\n        pluginSetupProcessorAddress: this.web3.getAddress(\n          FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n        ),\n      },\n    );\n  }\n  /**\n   * Checks whether a role is granted by the current DAO's ACL settings\n   *\n   * @param {HasPermissionParams} params\n   * @return {Promise<boolean>}\n   * @memberof ClientMethods\n   */\n  public async hasPermission(params: HasPermissionParams): Promise<boolean> {\n    await HasPermissionSchema.strict().validate(params);\n    const provider = this.web3.getProvider();\n    // connect to the managing dao\n    const daoInstance = DAO__factory.connect(params.daoAddressOrEns, provider);\n    return daoInstance.hasPermission(\n      params.where,\n      params.who,\n      id(params.permission),\n      params.data || new Uint8Array([]),\n    );\n  }\n  /**\n   * Retrieves metadata for DAO with given identifier (address or ens domain)\n   *\n   * @param {string} daoAddressOrEns\n   * @return {(Promise<DaoDetails | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDao(daoAddressOrEns: string): Promise<DaoDetails | null> {\n    await AddressOrEnsSchema.strict().validate(daoAddressOrEns);\n    let address = daoAddressOrEns.toLowerCase();\n    if (!isAddress(address)) {\n      await this.web3.ensureOnline();\n      const provider = this.web3.getProvider();\n      if (!provider) {\n        throw new NoProviderError();\n      }\n      try {\n        const resolvedAddress = await provider.resolveName(address);\n        if (!resolvedAddress) {\n          throw new InvalidAddressOrEnsError();\n        }\n        address = resolvedAddress.toLowerCase();\n      } catch (e) {\n        throw new InvalidAddressOrEnsError(e);\n      }\n    }\n    const query = QueryDao;\n    const params = { address };\n    const name = \"DAO\";\n    type T = { dao: SubgraphDao };\n    const { dao } = await this.graphql.request<T>({ query, params, name });\n    if (!dao) {\n      return null;\n    } else if (!dao.metadata) {\n      return toDaoDetails(\n        dao,\n        EMPTY_DAO_METADATA_LINK,\n      );\n    }\n    try {\n      const metadataCid = resolveIpfsCid(dao.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as DaoMetadata;\n      return toDaoDetails(dao, metadata);\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toDaoDetails(dao, UNSUPPORTED_DAO_METADATA_LINK);\n      }\n      return toDaoDetails(dao, UNAVAILABLE_DAO_METADATA);\n    }\n  }\n  /**\n   * Retrieves metadata for DAO with given identifier (address or ens domain)\n   *\n   * @param {DaoQueryParams} params\n   *     - limit = 10\n   *     - skip = 0\n   *     - direction = SortDirection.ASC\n   *     - sortBy = DaoSortBy.CREATED_AT\n   * @return {Promise<DaoListItem[]>}\n   * @memberof ClientMethods\n   */\n  public async getDaos({\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = DaoSortBy.CREATED_AT,\n  }: DaoQueryParams): Promise<DaoListItem[]> {\n    await DaoQuerySchema.strict().validate({\n      limit,\n      skip,\n      direction,\n      sortBy,\n    });\n    const query = QueryDaos;\n    const params = {\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"DAOs\";\n    type T = { daos: SubgraphDaoListItem[] };\n    const { daos } = await this.graphql.request<T>({ query, params, name });\n    return Promise.all(\n      daos.map(\n        async (dao: SubgraphDaoListItem): Promise<DaoListItem> => {\n          if (!dao.metadata) {\n            return toDaoListItem(\n              dao,\n              EMPTY_DAO_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(dao.metadata);\n            // Avoid blocking Promise.all if this individual fetch takes too long\n            const stringMetadata = await promiseWithTimeout(\n              this.ipfs.fetchString(metadataCid),\n              MULTI_FETCH_TIMEOUT,\n            );\n            const metadata = JSON.parse(stringMetadata);\n            return toDaoListItem(dao, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toDaoListItem(dao, UNSUPPORTED_DAO_METADATA_LINK);\n            }\n            return toDaoListItem(dao, UNAVAILABLE_DAO_METADATA);\n          }\n        },\n      ),\n    );\n  }\n  /**\n   * Retrieves the asset balances of the given DAO, by default, ETH, DAI, USDC and USDT on Mainnet\n   *\n   * @param {DaoBalancesQueryParams} params\n   *     - daoAddressOrEns\n   *     - limit = 10\n   *     - skip = 0\n   *     - direction = SortDirection.ASC\n   *     - sortBy = AssetBalanceSortBy.LAST_UPDATED\n   * @return {(Promise<AssetBalance[] | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDaoBalances({\n    daoAddressOrEns,\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = AssetBalanceSortBy.LAST_UPDATED,\n  }: DaoBalancesQueryParams): Promise<AssetBalance[] | null> {\n    await DaoBalancesQuerySchema.strict().validate({\n      daoAddressOrEns,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    });\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        const resolvedAddress = await provider.resolveName(address);\n        if (!resolvedAddress) {\n          throw new InvalidAddressOrEnsError();\n        }\n        address = resolvedAddress;\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    const query = QueryTokenBalances;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"dao balances\";\n    type T = { tokenBalances: SubgraphBalance[] };\n    const { tokenBalances } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (tokenBalances.length === 0) {\n      return [];\n    }\n    return tokenBalances.map(\n      (balance: SubgraphBalance): AssetBalance => toAssetBalance(balance),\n    );\n  }\n  /**\n   * Retrieves the list of asset transfers to and from the given DAO (by default, from ETH, DAI, USDC and USDT, on Mainnet)\n   *\n   * @param {TransferQueryParams} params\n   *     - daoAddressOrEns\n   *     - type\n   *     - limit = 10\n   *     - skip = 0\n   *     - direction = SortDirection.ASC\n   *     - sortBy = TransferSortBy.CREATED_AT\n   * @return {(Promise<Transfer[] | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDaoTransfers({\n    daoAddressOrEns,\n    type,\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = TransferSortBy.CREATED_AT,\n  }: TransferQueryParams): Promise<Transfer[] | null> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch (e) {\n          throw new InvalidAddressOrEnsError(e);\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (type) {\n      where = { ...where, type: SubgraphTransferTypeMap.get(type) };\n    }\n    const query = QueryTokenTransfers;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"dao transfers\";\n    type T = { tokenTransfers: SubgraphTransferListItem[] };\n    const { tokenTransfers } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenTransfers) {\n      return null;\n    }\n    return tokenTransfers.map(\n      (transfer: SubgraphTransferListItem): Transfer =>\n        toTokenTransfer(transfer),\n    );\n  }\n  private async getMetadata(\n    ipfsUri: string,\n  ) {\n    const metadataCid = resolveIpfsCid(ipfsUri);\n    const stringMetadata = await this.ipfs.fetchString(metadataCid);\n    const resolvedMetadata = JSON.parse(stringMetadata);\n    return resolvedMetadata;\n  }\n\n  private async getPluginRepo(\n    pluginRepo: SubgraphPluginRepo,\n    inlcudeMetadata?: boolean,\n  ): Promise<PluginRepo> {\n    if (!inlcudeMetadata) {\n      return toPluginRepo(\n        pluginRepo,\n        EMPTY_RELEASE_METADATA_LINK,\n        EMPTY_BUILD_METADATA_LINK\n      );\n    }\n\n    let releaseMetadata: PluginRepoReleaseMetadata;\n    // releases are ordered son the index 0 will be the latest\n    const releaseIpfsUri = pluginRepo?.releases[0]?.metadata;\n    try {\n      releaseMetadata = await this.getMetadata(releaseIpfsUri);\n    } catch (err) {\n      releaseMetadata = UNAVAILABLE_RELEASE_METADATA;\n      if (err instanceof InvalidCidError) {\n        releaseMetadata = UNSUPPORTED_RELEASE_METADATA_LINK;\n      } else if (err instanceof EmptyMultiUriError) {\n        releaseMetadata = EMPTY_RELEASE_METADATA_LINK;\n      }\n    }\n\n    let buildMetadata: PluginRepoBuildMetadata;\n    // builds are ordered son the index 0 will be the latest\n    const buildIpfsUri = pluginRepo?.releases[0]?.builds[0]?.metadata;\n    try {\n      buildMetadata = await this.getMetadata(buildIpfsUri);\n    } catch (err) {\n      buildMetadata = UNAVAILABLE_BUILD_METADATA;\n      if (err instanceof InvalidCidError) {\n        buildMetadata = UNSUPPORTED_BUILD_METADATA_LINK;\n      } else if (err instanceof EmptyMultiUriError) {\n        buildMetadata = EMPTY_BUILD_METADATA_LINK;\n      }\n    }\n    return toPluginRepo(pluginRepo, releaseMetadata, buildMetadata);\n  }\n\n  /**\n   * Retrieves the list of plugins available on the PluginRegistry\n   *\n   * @param {PluginQueryParams} params\n   *     - limit = 10\n   *     - skip = 0\n   *     - direction = SortDirection.ASC\n   *     - sortBy = PluginSortBy.SUBDOMAIN\n   *     - subdomain\n   * @param {boolean} [includeMetadata=true]\n   * @return {(Promise<PluginRepo[] | null>)}\n   * @memberof ClientMethods\n   */\n  public async getPlugins({\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = PluginSortBy.SUBDOMAIN,\n    subdomain,\n    includeMetadata = true,\n  }: PluginQueryParams = {}): Promise<PluginRepoListItem[]> {\n    await PluginQuerySchema.strict().validate({\n      limit,\n      skip,\n      direction,\n      sortBy,\n      subdomain,\n    });\n\n    let where = {};\n    if (subdomain) {\n      where = { subdomain_contains_nocase: subdomain };\n    }\n    const query = QueryPlugins;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"plugin repos\";\n    type T = { pluginRepos: SubgraphPluginRepoListItem[] };\n    const { pluginRepos } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      pluginRepos.map(\n        (pluginRepo: SubgraphPluginRepoListItem) => {\n          return this.getPluginRepo(pluginRepo, includeMetadata);\n        },\n      ),\n    );\n  }\n  /**\n   * Get plugin details given an address, release and build\n   *\n   * @param {string} pluginAddress\n   * @param {boolean} [includeMetadata=true]\n   * @return {Promise<PluginRepo>}\n   * @memberof ClientMethods\n   */\n  public async getPlugin(\n    pluginAddress: string,\n    includeMetadata: boolean = true\n  ): Promise<PluginRepo> {\n    await AddressOrEnsSchema.strict().validate(pluginAddress);\n    const name = \"plugin version\";\n    const query = QueryPlugin;\n    type T = { pluginRepo: SubgraphPluginRepo };\n    const { pluginRepo } = await this.graphql.request<T>({\n      query,\n      params: { id: pluginAddress.toLowerCase() },\n      name,\n    });\n    // get release metadata\n    return this.getPluginRepo(pluginRepo, includeMetadata);\n  }\n  /**\n   * Returns the protocol version of a contract\n   * if the transaction fails returns [1,0,0]\n   *\n   * @param {string} contractAddress\n   * @return {Promise<number[]>}\n   * @memberof ClientMethods\n   */\n  public async getProtocolVersion(\n    contractAddress: string,\n  ): Promise<[number, number, number]> {\n    await AddressOrEnsSchema.strict().validate(contractAddress);\n    const provider = this.web3.getProvider();\n    const protocolInstance = IProtocolVersion__factory.connect(\n      contractAddress,\n      provider,\n    );\n    let version: [number, number, number];\n    try {\n      version = await protocolInstance.protocolVersion();\n    } catch (e) {\n      // ethers5 throws an call exception error which could mean a lot of things\n      // so this is not accurate\n      version = [1, 0, 0];\n    }\n    return version;\n  }\n\n  /**\n   * Given a proposal id returns if that proposal is a dao update proposal\n   *\n   * @param {string} proposalId\n   * @return {Promise<boolean>}\n   * @memberof ClientMethods\n   */\n  public async isDaoUpdateProposal(\n    proposalId: string,\n  ): Promise<boolean> {\n    const name = \"iproposal\";\n    const query = QueryIProposal;\n    type T = { iproposal: SubgraphIProposal };\n    const { iproposal } = await this.graphql.request<T>({\n      query,\n      params: { id: getExtendedProposalId(proposalId.toLowerCase()) },\n      name,\n    });\n    if (!iproposal) {\n      return false;\n    }\n    const subgraphActions = iproposal.actions;\n    let actions = toDaoActions(subgraphActions);\n    const classifiedActions = classifyProposalActions(actions);\n    return classifiedActions.includes(\n      ProposalActionTypes.UPGRADE_TO_AND_CALL,\n    ) || classifiedActions.includes(ProposalActionTypes.UPGRADE_TO);\n  }\n  /**\n   * Given a proposal id returns if that proposal is a plugin update proposal\n   *\n   * @param {string} proposalId\n   * @return {Promise<boolean>}\n   * @memberof ClientMethods\n   */\n  public async isPluginUpdateProposal(\n    proposalId: string,\n  ): Promise<boolean> {\n    const name = \"iproposal\";\n    const query = QueryIProposal;\n    type T = { iproposal: SubgraphIProposal };\n    const { iproposal } = await this.graphql.request<T>({\n      query,\n      params: { id: getExtendedProposalId(proposalId.toLowerCase()) },\n      name,\n    });\n    if (!iproposal) {\n      return false;\n    }\n    let actions = toDaoActions(iproposal.actions);\n    let classifiedActions = classifyProposalActions(actions);\n    return classifiedActions.includes(ProposalActionTypes.APPLY_UPDATE);\n  }\n  /**\n   * Check if the specified proposal id is valid for updating a plugin\n   *\n   * @param {string} proposalId\n   * @return {Promise<PluginUpdateProposalValidity>}\n   * @memberof ClientMethods\n   */\n  public async isPluginUpdateProposalValid(\n    proposalId: string,\n  ): Promise<PluginUpdateProposalValidity> {\n    // not validating the proposalId because multiple proposal id formats can be used\n    // get the iproposal given the proposal id\n    const name = \"iproposal\";\n    const query = QueryIProposal;\n    type T = { iproposal: SubgraphIProposal };\n    const { iproposal } = await this.graphql.request<T>({\n      query,\n      params: { id: getExtendedProposalId(proposalId.toLowerCase()) },\n      name,\n    });\n    if (!iproposal) {\n      // if the proposal does not exist return invalid\n      return {\n        isValid: false,\n        actionErrorCauses: [],\n        proposalSettingsErrorCauses: [\n          ProposalSettingsErrorCause.PROPOSAL_NOT_FOUND,\n        ],\n      };\n    }\n    // check failure map\n    if (iproposal.allowFailureMap !== \"0\") {\n      // if the failure map is not 0 return invalid failure map\n      return {\n        isValid: false,\n        actionErrorCauses: [],\n        proposalSettingsErrorCauses: [\n          ProposalSettingsErrorCause.NON_ZERO_ALLOW_FAILURE_MAP_VALUE,\n        ],\n      };\n    }\n\n    let daoActions = toDaoActions(iproposal.actions);\n    const classifiedActions = classifyProposalActions(daoActions);\n\n    // remove upgradeToAndCall action\n    if (startsWithDaoUpdateAction(classifiedActions)) {\n      daoActions = daoActions.slice(1);\n    }\n\n    // validate actions\n    return validateUpdatePluginProposalActions(\n      daoActions,\n      iproposal.dao.id,\n      this.web3.getAddress(FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR),\n      this.graphql,\n      this.ipfs,\n    );\n  }\n\n  /**\n   * Check if the specified proposalId actions are valid for updating a dao\n   *\n   * @param {string} proposalId\n   * @param {SupportedVersion} [version]\n   * @return {Promise<DaoUpdateProposalValidity>}\n   * @memberof ClientMethods\n   */\n  public async isDaoUpdateProposalValid(\n    proposalId: string,\n    version?: SupportedVersions,\n  ): Promise<DaoUpdateProposalValidity> {\n    // omit input validation because we are receiving the proposal id\n\n    // get the iproposal given the proposal id\n    const name = \"iproposal\";\n    const query = QueryIProposal;\n    type T = { iproposal: SubgraphIProposal };\n    const res = await this.graphql.request<T>({\n      query,\n      params: { id: getExtendedProposalId(proposalId.toLowerCase()) },\n      name,\n    });\n    const { iproposal } = res;\n    // if the proposal does not exist return invalid\n    if (!iproposal) {\n      return {\n        isValid: false,\n        proposalSettingsErrorCauses: [\n          ProposalSettingsErrorCause.PROPOSAL_NOT_FOUND,\n        ],\n        actionErrorCauses: [],\n      };\n    }\n    // check failure map\n    if (iproposal.allowFailureMap !== \"0\") {\n      // if the failure map is not 0 return invalid failure map\n      return {\n        isValid: false,\n        actionErrorCauses: [],\n        proposalSettingsErrorCauses: [\n          ProposalSettingsErrorCause.NON_ZERO_ALLOW_FAILURE_MAP_VALUE,\n        ],\n      };\n    }\n    // get implementation address, use latest version as default\n    let daoFactoryAddress = this.web3.getAddress(\n      FrameworkContractsNames.DAO_FACTORY,\n    );\n    if (version) {\n      // if version is specified get the dao factory address from the live contracts\n      daoFactoryAddress =\n        contracts[this.web3.getNetworkName()][version]!.DAOFactory.address;\n    }\n\n    return validateUpdateDaoProposalActions(\n      toDaoActions(iproposal.actions),\n      iproposal.dao.id,\n      await this.getDaoImplementation(daoFactoryAddress),\n      await this.getProtocolVersion(\n        iproposal.dao.id,\n      ),\n    );\n  }\n  /**\n   *  Return the implementation address for the specified dao factory\n   *\n   * @param {string} daoFactoryAddress\n   * @return {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async getDaoImplementation(\n    daoFactoryAddress: string,\n  ): Promise<string> {\n    const daoFactoryImplementation = DAOFactory__factory.connect(\n      daoFactoryAddress,\n      this.web3.getProvider(),\n    );\n    return daoFactoryImplementation.daoBase();\n  }\n\n  public async getPluginPreparations(\n    {\n      type,\n      pluginAddress,\n      pluginRepoAddress,\n      daoAddressOrEns,\n      limit = 10,\n      skip = 0,\n      direction = SortDirection.ASC,\n      sortBy = PluginPreparationSortBy.ID,\n    }: PluginPreparationQueryParams,\n  ): Promise<PluginPreparationListItem[]> {\n    await PluginPreparationQuerySchema.strict().validate({\n      type,\n      pluginAddress,\n      pluginRepoAddress,\n      daoAddressOrEns,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    });\n\n    let where = {};\n    if (type) {\n      where = { ...where, type };\n    }\n    if (pluginAddress) {\n      where = { ...where, pluginAddress: pluginAddress.toLowerCase() };\n    }\n    if (pluginRepoAddress) {\n      where = { ...where, pluginRepo: pluginRepoAddress.toLowerCase() };\n    }\n    if (daoAddressOrEns) {\n      where = { ...where, dao: daoAddressOrEns.toLowerCase() };\n    }\n    const query = QueryPluginPreparationsExtended;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"plugin preparations\";\n    type T = { pluginPreparations: SubgraphPluginPreparationListItem[] };\n    const { pluginPreparations } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      pluginPreparations.map(\n        (pluginPreparation: SubgraphPluginPreparationListItem) => {\n          return toPluginPreparationListItem(pluginPreparation);\n        },\n      ),\n    );\n  }\n}\n","import {\n  DaoAction,\n  Pagination,\n  ProposalStatus,\n} from \"@aragon/sdk-client-common\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\n/**\n * Contains the states of a proposal. Note that on chain\n * proposals cannot be in draft state\n */\nexport enum VoteValues {\n  // NONE = 0,\n  ABSTAIN = 1,\n  YES = 2,\n  NO = 3,\n}\n\nexport type ProposalVoteBase = {\n  address: string;\n  vote: VoteValues;\n  voteReplaced: boolean;\n};\n\n// TYPES\n\nexport type MajorityVotingSettingsBase = {\n  /** Float between 0 and 1 */\n  supportThreshold: number;\n  /** Float between 0 and 1 */\n  minParticipation: number;\n};\n\nexport type MajorityVotingProposalSettings = MajorityVotingSettingsBase & {\n  duration: number;\n};\nexport type MajorityVotingSettings = MajorityVotingSettingsBase & {\n  /* default is standard */\n  votingMode?: VotingMode;\n  /* minimum is 3600 */\n  minDuration: number;\n  /* default is 0 */\n  minProposerVotingPower?: bigint;\n};\n\nexport type VotingSettings = MajorityVotingSettings;\n\nexport enum VotingMode {\n  STANDARD = \"Standard\",\n  EARLY_EXECUTION = \"EarlyExecution\",\n  VOTE_REPLACEMENT = \"VoteReplacement\",\n}\n\nexport type ContractVotingSettings = [\n  BigNumber, // votingMode\n  BigNumber, // supportThreshold\n  BigNumber, // minParticipation\n  BigNumber, // minDuration\n  BigNumber, // minProposerVotingPower\n];\n\nexport type CreateProposalBaseParams = {\n  pluginAddress: string;\n  actions?: DaoAction[];\n  /** For every action item, denotes whether its execution could fail\n   * without aborting the whole proposal execution */\n  failSafeActions?: Array<boolean>;\n  metadataUri: string;\n};\n\nexport type CreateMajorityVotingProposalParams = CreateProposalBaseParams & {\n  startDate?: Date;\n  endDate?: Date;\n  executeOnPass?: boolean;\n  creatorVote?: VoteValues;\n};\n\nexport type VoteProposalParams = {\n  vote: VoteValues;\n  proposalId: string;\n};\n\nexport type CanVoteParams = {\n  proposalId: string;\n  voterAddressOrEns: string;\n  vote: VoteValues;\n};\n\nexport enum SubgraphVoteValues {\n  YES = \"Yes\",\n  NO = \"No\",\n  ABSTAIN = \"Abstain\",\n}\nexport const SubgraphVoteValuesMap: Map<\n  SubgraphVoteValues,\n  VoteValues\n> = new Map([\n  [SubgraphVoteValues.YES, VoteValues.YES],\n  [SubgraphVoteValues.NO, VoteValues.NO],\n  [SubgraphVoteValues.ABSTAIN, VoteValues.ABSTAIN],\n]);\n\nexport type SubgraphVoterListItemBase = {\n  voter: {\n    address: string;\n  };\n  voteReplaced: boolean;\n  voteOption: SubgraphVoteValues;\n};\n\nexport type SubgraphAction = {\n  to: string;\n  value: string;\n  data: string;\n};\n\nexport type SubgraphProposalBase = {\n  id: string;\n  dao: {\n    id: string;\n    subdomain: string;\n  };\n  creator: string;\n  metadata: string;\n  yes: string;\n  no: string;\n  abstain: string;\n  startDate: string;\n  endDate: string;\n  executed: boolean;\n  approvalReached: boolean;\n  isSignaling: boolean;\n  actions: SubgraphAction[]\n};\n\nexport type ProposalQueryParams = Pagination & {\n  sortBy?: ProposalSortBy;\n  status?: ProposalStatus;\n  daoAddressOrEns?: string;\n};\n\nexport enum ProposalSortBy {\n  CREATED_AT = \"createdAt\",\n  // POPULARITY = \"popularity\",\n  // VOTES = \"votes\",\n}\n\n// STEPS\n\n// PROPOSAL CREATION\nexport enum ProposalCreationSteps {\n  CREATING = \"creating\",\n  DONE = \"done\",\n}\n\nexport type ProposalCreationStepValue =\n  | { key: ProposalCreationSteps.CREATING; txHash: string }\n  | { key: ProposalCreationSteps.DONE; proposalId: string };\n\n// PROPOSAL VOTING\nexport enum VoteProposalStep {\n  VOTING = \"voting\",\n  DONE = \"done\",\n}\n\nexport type VoteProposalStepValue =\n  | { key: VoteProposalStep.VOTING; txHash: string }\n  | { key: VoteProposalStep.DONE };\n\n// PROPOSAL EXECUTION\nexport enum ExecuteProposalStep {\n  EXECUTING = \"executing\",\n  DONE = \"done\",\n}\n\nexport type ExecuteProposalStepValue =\n  | { key: ExecuteProposalStep.EXECUTING; txHash: string }\n  | { key: ExecuteProposalStep.DONE };\n\nexport type ContractPluginSettings = [BigNumber, BigNumber, BigNumber];\n\nexport type SubgraphVotingSettings = {\n  minDuration: string;\n  minProposerVotingPower: string;\n  minParticipation: string;\n  supportThreshold: string;\n  votingMode: VotingMode;\n};\n\nexport type SubgraphMembers = {\n  address: string;\n}[];\n\nexport type MembersQueryParamsBase = Pagination & {\n  pluginAddress: string;\n  blockNumber?: number;\n};\n\nexport type MembersQueryParams = MembersQueryParamsBase & {\n  sortBy?: MembersSortBy;\n};\n\nexport enum MembersSortBy {\n  ADDRESS = \"address\",\n}\n","import {\n  DaoUpdateParams,\n  GrantPermissionParams,\n  GrantPermissionWithConditionParams,\n  InitializeFromParams,\n  RegisterStandardCallbackParams,\n  RevokePermissionParams,\n  UpgradeToAndCallParams,\n  WithdrawParams,\n} from \"../../types\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  DAO__factory,\n  DAOFactory__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  applyInstallatonParamsToContract,\n  applyUninstallationParamsToContract,\n  applyUpdateParamsToContract,\n  permissionParamsToContract,\n  permissionWithConditionParamsToContract,\n} from \"../utils\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { abi as ERC20_ABI } from \"@openzeppelin/contracts/build/contracts/ERC20.json\";\nimport { abi as ERC721_ABI } from \"@openzeppelin/contracts/build/contracts/ERC721.json\";\nimport { abi as ERC1155_ABI } from \"@openzeppelin/contracts/build/contracts/ERC1155.json\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { IClientEncoding } from \"../interfaces\";\nimport {\n  AddressOrEnsSchema,\n  ApplyInstallationParams,\n  ApplyInstallationSchema,\n  ApplyUninstallationParams,\n  ApplyUninstallationSchema,\n  ApplyUpdateParams,\n  ClientCore,\n  DaoAction,\n  hexToBytes,\n  InvalidAddressError,\n  InvalidAddressOrEnsError,\n  InvalidEnsError,\n  IpfsUriSchema,\n  NotImplementedError,\n  Permissions,\n  TokenType,\n} from \"@aragon/sdk-client-common\";\nimport { Interface } from \"@ethersproject/abi\";\nimport {\n  DaoUpdateSchema,\n  InitializeFromSchema,\n  PermissionBaseSchema,\n  PermissionWithConditionSchema,\n  RegisterStandardCallbackSchema,\n  UpgradeToAndCallSchema,\n  WithdrawErc1155Schema,\n  WithdrawErc20Schema,\n  WithdrawErc721Schema,\n  WithdrawEthSchema,\n} from \"../schemas\";\nimport { string } from \"yup\";\nimport { FrameworkContractsNames } from \"@aragon/osx-commons-configs\";\n\n/**\n * Encoding module the SDK Generic Client\n */\nexport class ClientEncoding extends ClientCore implements IClientEncoding {\n  /**\n   * @param {string} daoAddress\n   * @param {ApplyInstallationParams} params\n   * @return {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public applyInstallationAction(\n    daoAddress: string,\n    params: ApplyInstallationParams,\n  ): DaoAction[] {\n    AddressOrEnsSchema.strict().validateSync(daoAddress);\n    ApplyInstallationSchema.strict().validateSync(params);\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n\n    const args = applyInstallatonParamsToContract(params);\n    const hexBytes = pspInterface.encodeFunctionData(\"applyInstallation\", [\n      daoAddress,\n      args,\n    ]);\n    const pspAddress = this.web3.getAddress(\n      FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n    );\n    // Grant ROOT_PERMISION in the DAO to the PSP\n    const grantAction = this.grantAction(daoAddress, {\n      where: daoAddress,\n      who: pspAddress,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n\n    // Revoke ROOT_PERMISION in the DAO to the PSP\n    const revokeAction = this.revokeAction(daoAddress, {\n      where: daoAddress,\n      who: pspAddress,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n    return [\n      grantAction,\n      {\n        to: pspAddress,\n        value: BigInt(0),\n        data: hexToBytes(hexBytes),\n      },\n      revokeAction,\n    ];\n  }\n\n  public applyUninstallationAction(\n    daoAddress: string,\n    params: ApplyUninstallationParams,\n  ): DaoAction[] {\n    AddressOrEnsSchema.strict().validateSync(daoAddress);\n    ApplyUninstallationSchema.strict().validateSync(params);\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const args = applyUninstallationParamsToContract(params);\n    const hexBytes = pspInterface.encodeFunctionData(\"applyUninstallation\", [\n      daoAddress,\n      args,\n    ]);\n    const pspAddress = this.web3.getAddress(\n      FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n    );\n    // Grant ROOT_PERMISION in the DAO to the PSP\n    const grantAction = this.grantAction(daoAddress, {\n      where: daoAddress,\n      who: pspAddress,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n\n    // Revoke ROOT_PERMISION in the DAO to the PSP\n    const revokeAction = this.revokeAction(daoAddress, {\n      where: daoAddress,\n      who: pspAddress,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n    return [\n      grantAction,\n      {\n        to: pspAddress,\n        value: BigInt(0),\n        data: hexToBytes(hexBytes),\n      },\n      revokeAction,\n    ];\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that applies an update to a plugin\n   *\n   * @param {string} daoAddress\n   * @param {ApplyUpdateParams} params\n   * @return {DaoAction[]}\n   * @memberof ClientEncoding\n   */\n  public applyUpdateAndPermissionsActionBlock(\n    daoAddress: string,\n    params: ApplyUpdateParams,\n  ): DaoAction[] {\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const args = applyUpdateParamsToContract(params);\n\n    const hexBytes = pspInterface.encodeFunctionData(\"applyUpdate\", [\n      daoAddress,\n      args,\n    ]);\n    const pspAddress = this.web3.getAddress(\n      FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n    );\n\n    // Grant UPGRADE_PLUGIN_PERMISSION in the plugin to the PSP\n    const grantUpgradeAction = this.grantAction(daoAddress, {\n      where: params.pluginAddress,\n      who: pspAddress,\n      permission: Permissions.UPGRADE_PLUGIN_PERMISSION,\n    });\n    // Revoke UPGRADE_PLUGIN_PERMISSION in the plugin to the PSP\n    const revokeUpgradeAction = this.revokeAction(daoAddress, {\n      where: params.pluginAddress,\n      who: pspAddress,\n      permission: Permissions.UPGRADE_PLUGIN_PERMISSION,\n    });\n    // If the update requests permissions to be granted or revoked, the PSP needs temporary `ROOT_PERMISSION_ID` permission\n    if (params.permissions.length > 0) {\n      const grantRootAction = this.grantAction(daoAddress, {\n        where: daoAddress,\n        who: pspAddress,\n        permission: Permissions.ROOT_PERMISSION,\n      });\n      // Revoke ROOT_PERMISSION in the DAO to the PSP\n      const revokeRootAction = this.revokeAction(daoAddress, {\n        where: daoAddress,\n        who: pspAddress,\n        permission: Permissions.ROOT_PERMISSION,\n      });\n      return [\n        grantUpgradeAction,\n        grantRootAction,\n        {\n          to: pspAddress,\n          value: BigInt(0),\n          data: hexToBytes(hexBytes),\n        },\n        revokeRootAction,\n        revokeUpgradeAction,\n      ];\n    }\n    return [\n      grantUpgradeAction,\n      {\n        to: pspAddress,\n        value: BigInt(0),\n        data: hexToBytes(hexBytes),\n      },\n      revokeUpgradeAction,\n    ];\n  }\n\n  /**\n   * Computes the payload to be given when creating a proposal that grants a permission within a DAO\n   *\n   * @param {string} daoAddress\n   * @param {GrantPermissionParams} params\n   * @return {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public grantAction(\n    daoAddress: string,\n    params: GrantPermissionParams,\n  ): DaoAction {\n    AddressOrEnsSchema.strict().validateSync(daoAddress);\n    PermissionBaseSchema.strict().validateSync(params);\n    const { where, who } = params;\n    if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new InvalidAddressError();\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\"grant\", args);\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that grants a permission within a DAO given a certain condition\n   *\n   * @param {string} daoAddress\n   * @param {GrantPermissionWithConditionParams} params\n   * @return {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public grantWithConditionAction(\n    daoAddress: string,\n    params: GrantPermissionWithConditionParams,\n  ): DaoAction {\n    AddressOrEnsSchema.strict().validateSync(daoAddress);\n    PermissionWithConditionSchema.strict().validateSync(params);\n    const { where, who } = params;\n    if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new InvalidAddressError();\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionWithConditionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n        condition: params.condition,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\n      \"grantWithCondition\",\n      args,\n    );\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that revokes a permission within a DAO\n   *\n   * @param {string} daoAddress\n   * @param {RevokePermissionParams} params\n   * @return {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public revokeAction(\n    daoAddress: string,\n    params: RevokePermissionParams,\n  ): DaoAction {\n    AddressOrEnsSchema.strict().validateSync(daoAddress);\n    PermissionBaseSchema.strict().validateSync(params);\n    const { where, who } = params;\n    if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new InvalidAddressError();\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\"revoke\", args);\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that withdraws ether from the DAO\n   *\n   * @param {string} recipientAddressOrEns\n   * @param {WithdrawParams} value\n   * @return {Promise<DaoAction>}\n   * @memberof ClientEncoding\n   */\n  public async withdrawAction(params: WithdrawParams): Promise<DaoAction> {\n    let to = params.recipientAddressOrEns;\n    if (!isAddress(params.recipientAddressOrEns)) {\n      const resolvedAddress = await this.web3.getSigner()?.resolveName(\n        params.recipientAddressOrEns,\n      );\n      if (!resolvedAddress) {\n        throw new InvalidAddressOrEnsError();\n      }\n      to = resolvedAddress;\n    }\n    let iface: Interface;\n    let data: string;\n    switch (params.type) {\n      case TokenType.NATIVE:\n        await WithdrawEthSchema.strict().validate(params);\n        return { to, value: params.amount, data: new Uint8Array() };\n      case TokenType.ERC20:\n        await WithdrawErc20Schema.strict().validate(params);\n\n        iface = new Contract(\n          params.tokenAddress,\n          ERC20_ABI,\n        ).interface;\n        data = iface.encodeFunctionData(\"transfer\", [\n          params.recipientAddressOrEns,\n          params.amount,\n        ]);\n        return {\n          to: params.tokenAddress,\n          value: BigInt(0),\n          data: hexToBytes(data),\n        };\n      case TokenType.ERC721:\n        await WithdrawErc721Schema.strict().validate(params);\n        iface = new Contract(\n          params.tokenAddress,\n          ERC721_ABI,\n        ).interface;\n        data = iface.encodeFunctionData(\n          \"safeTransferFrom(address,address,uint256)\",\n          [\n            params.daoAddressOrEns, // from\n            params.recipientAddressOrEns, // to\n            params.tokenId, // tokenId\n          ],\n        );\n        return {\n          to: params.tokenAddress,\n          value: BigInt(0),\n          data: hexToBytes(data),\n        };\n      case TokenType.ERC1155:\n        await WithdrawErc1155Schema.strict().validate(params);\n        iface = new Contract(\n          params.tokenAddress,\n          ERC1155_ABI,\n        ).interface;\n        if (params.tokenIds.length === 1) {\n          data = iface.encodeFunctionData(\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n            [\n              params.daoAddressOrEns, // from\n              params.recipientAddressOrEns, // to\n              params.tokenIds[0], // tokenId\n              params.amounts[0], // amount\n              new Uint8Array(), // data\n            ],\n          );\n        } else {\n          data = iface.encodeFunctionData(\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\",\n            [\n              params.daoAddressOrEns, // from\n              params.recipientAddressOrEns, // to\n              params.tokenIds, // tokenIds\n              params.amounts, // amounts\n              new Uint8Array(), // data\n            ],\n          );\n        }\n        return {\n          to: params.tokenAddress,\n          value: BigInt(0),\n          data: hexToBytes(data),\n        };\n      default:\n        throw new NotImplementedError(\"Token type not supported\");\n    }\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that updates the metadata the DAO\n   *\n   * @param {string} daoAddressOrEns\n   * @param {DaoMetadata} params\n   * @return {Promise<DaoAction>}\n   * @memberof ClientEncoding\n   */\n  public async updateDaoMetadataAction(\n    daoAddressOrEns: string,\n    metadataUri: string,\n  ): Promise<DaoAction> {\n    await AddressOrEnsSchema.strict().validate(daoAddressOrEns);\n    await IpfsUriSchema.strict().validate(metadataUri);\n    let address = daoAddressOrEns;\n    if (!isAddress(daoAddressOrEns)) {\n      const resolvedAddress = await this.web3.getSigner()?.resolveName(\n        daoAddressOrEns,\n      );\n      if (!resolvedAddress) {\n        throw new InvalidEnsError();\n      }\n      address = resolvedAddress;\n    }\n    // upload metadata to IPFS\n    const daoInterface = DAO__factory.createInterface();\n    const args = toUtf8Bytes(metadataUri);\n    const hexBytes = daoInterface.encodeFunctionData(\"setMetadata\", [args]);\n    return {\n      to: address,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets the dao uri\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} daoUri\n   * @return {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public setDaoUriAction(\n    daoAddressOrEns: string,\n    daoUri: string,\n  ): DaoAction {\n    AddressOrEnsSchema.strict().validateSync(daoAddressOrEns);\n    string().url().strict().validateSync(daoUri);\n\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"setDaoURI\", [daoUri]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that registers a new standard callback\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} daoUri\n   * @return {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public registerStandardCallbackAction(\n    daoAddressOrEns: string,\n    params: RegisterStandardCallbackParams,\n  ): DaoAction {\n    AddressOrEnsSchema.strict().validateSync(daoAddressOrEns);\n    RegisterStandardCallbackSchema.strict().validateSync(params);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\n      \"registerStandardCallback\",\n      [params.interfaceId, params.callbackSelector, params.magicNumber],\n    );\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets the signature validator\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} signatureValidator\n   * @return {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public setSignatureValidatorAction(\n    daoAddressOrEns: string,\n    signatureValidator: string,\n  ): DaoAction {\n    AddressOrEnsSchema.strict().validateSync(daoAddressOrEns);\n    AddressOrEnsSchema.strict().validateSync(signatureValidator);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"setSignatureValidator\", [\n      signatureValidator,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets a new implementation for the proxy\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} implementationAddress\n   * @return {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public upgradeToAction(\n    daoAddressOrEns: string,\n    implementationAddress: string,\n  ): DaoAction {\n    AddressOrEnsSchema.strict().validateSync(daoAddressOrEns);\n    AddressOrEnsSchema.strict().validateSync(implementationAddress);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"upgradeTo\", [\n      implementationAddress,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets a new implementation for the proxy and calls the callback function with the specified data\n   *\n   * @param {string} daoAddressOrEns\n   * @param {UpgradeToAndCallParams} params\n   * @return {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public upgradeToAndCallAction(\n    daoAddressOrEns: string,\n    params: UpgradeToAndCallParams,\n  ): DaoAction {\n    AddressOrEnsSchema.strict().validateSync(daoAddressOrEns);\n    UpgradeToAndCallSchema.strict().validateSync(params);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"upgradeToAndCall\", [\n      params.implementationAddress,\n      params.data,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n\n  /**\n   * Computes an action to be passed to the upgradeToAndCallAction method when upgrading a DAO to a new version.\n   *\n   * @param {string} daoAddressOrEns\n   * @param {InitializeFromParams} params\n   * @return {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public initializeFromAction(\n    daoAddressOrEns: string,\n    params: InitializeFromParams,\n  ) {\n    AddressOrEnsSchema.strict().validateSync(daoAddressOrEns);\n    InitializeFromSchema.strict().validateSync(params);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"initializeFrom\", [\n      params.previousVersion,\n      params.initData ?? new Uint8Array(),\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n\n  /**\n   * Does the necessary steps to encode an action that updates a DAO\n   *\n   * @param {string} daoAddressOrEns\n   * @param {DaoUpdateParams} params\n   * @return {Promise<DaoAction>}\n   * @memberof ClientEncoding\n   */\n  public async daoUpdateAction(\n    daoAddressOrEns: string,\n    params: DaoUpdateParams,\n  ): Promise<DaoAction> {\n    AddressOrEnsSchema.strict().validateSync(daoAddressOrEns);\n    DaoUpdateSchema.strict().validateSync(params);\n    const initializeFromAction = this.initializeFromAction(\n      daoAddressOrEns,\n      params,\n    );\n    const { daoFactoryAddress } = params;\n    const daoFactory = DAOFactory__factory.connect(\n      daoFactoryAddress ??\n        this.web3.getAddress(FrameworkContractsNames.DAO_FACTORY),\n      this.web3.getProvider(),\n    );\n    const implementation = await daoFactory.daoBase();\n    return this.upgradeToAndCallAction(daoAddressOrEns, {\n      implementationAddress: implementation,\n      data: initializeFromAction.data,\n    });\n  }\n}\n","import {\n  DAOFactory,\n  DAOFactory__factory,\n  PluginRepo__factory,\n} from \"@aragon/osx-ethers\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { abi as ERC20_ABI } from \"@openzeppelin/contracts/build/contracts/ERC20.json\";\nimport {\n  CreateDaoParams,\n  DepositParams,\n  SetAllowanceParams,\n} from \"../../types\";\nimport {\n  estimateErc1155Deposit,\n  estimateErc20Deposit,\n  estimateErc721Deposit,\n  estimateNativeDeposit,\n} from \"../utils\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { IClientEstimation } from \"../interfaces\";\nimport {\n  ClientCore,\n  GasFeeEstimation,\n  InvalidAddressOrEnsError,\n  NoProviderError,\n  NotImplementedError,\n  prepareGenericInstallationEstimation,\n  prepareGenericUpdateEstimation,\n  PrepareInstallationParams,\n  PrepareInstallationSchema,\n  PrepareUpdateParams,\n  TokenType,\n} from \"@aragon/sdk-client-common\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  CreateDaoSchema,\n  DepositErc1155Schema,\n  DepositErc20Schema,\n  DepositErc721Schema,\n  DepositEthSchema,\n  SetAllowanceSchema,\n} from \"../schemas\";\nimport { FrameworkContractsNames } from \"@aragon/osx-commons-configs\";\n\n/**\n * Estimation module the SDK Generic Client\n */\nexport class ClientEstimation extends ClientCore implements IClientEstimation {\n  public async prepareInstallation(\n    params: PrepareInstallationParams,\n  ): Promise<GasFeeEstimation> {\n    await PrepareInstallationSchema.strict().validate(params);\n    return prepareGenericInstallationEstimation(this.web3, params);\n  }\n  /**\n   * Estimates the gas fee of creating a DAO\n   *\n   * @param {CreateDaoParams} _params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public async createDao(params: CreateDaoParams): Promise<GasFeeEstimation> {\n    await CreateDaoSchema.strict().validate(params);\n    const provider = this.web3.getProvider();\n\n    const daoInstance = DAOFactory__factory.connect(\n      this.web3.getAddress(FrameworkContractsNames.DAO_FACTORY),\n      provider,\n    );\n    const pluginInstallationData: DAOFactory.PluginSettingsStruct[] = [];\n    for (const plugin of params.plugins) {\n      const repo = PluginRepo__factory.connect(plugin.id, provider);\n\n      const currentRelease = await repo.latestRelease();\n      const latestVersion = await repo[\"getLatestVersion(uint8)\"](\n        currentRelease,\n      );\n      pluginInstallationData.push({\n        pluginSetupRef: {\n          pluginSetupRepo: repo.address,\n          versionTag: latestVersion.tag,\n        },\n        data: plugin.data,\n      });\n    }\n\n    const gasEstimation = await daoInstance.estimateGas.createDao(\n      {\n        subdomain: params.ensSubdomain ?? \"\",\n        metadata: toUtf8Bytes(params.metadataUri),\n        daoURI: params.daoUri ?? \"\",\n        trustedForwarder: params.trustedForwarder ?? AddressZero,\n      },\n      pluginInstallationData,\n    );\n\n    return this.web3.getApproximateGasFee(gasEstimation.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of depositing ether or an ERC20 token into the DAO\n   * This does not estimate the gas cost of updating the allowance of an ERC20 token\n   *\n   * @param {DepositParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public async deposit(\n    params: DepositParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    let estimation: BigNumber;\n    switch (params.type) {\n      case TokenType.NATIVE:\n        await DepositEthSchema.strict().validate(params);\n        estimation = await estimateNativeDeposit(signer, params);\n        break;\n      case TokenType.ERC20:\n        await DepositErc20Schema.strict().validate(params);\n        estimation = await estimateErc20Deposit(signer, params);\n        break;\n      case TokenType.ERC721:\n        await DepositErc721Schema.strict().validate(params);\n        estimation = await estimateErc721Deposit(signer, params);\n        break;\n      case TokenType.ERC1155:\n        await DepositErc1155Schema.strict().validate(params);\n        estimation = await estimateErc1155Deposit(signer, params);\n        break;\n      default:\n        throw new NotImplementedError(\n          \"Token type not valid\",\n        );\n    }\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of updating the allowance of an ERC20 token\n   *\n   * @param {SetAllowanceParams} _params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public async setAllowance(\n    params: SetAllowanceParams,\n  ): Promise<GasFeeEstimation> {\n    await SetAllowanceSchema.strict().validate(params);\n    const signer = this.web3.getConnectedSigner();\n    // resolve ens\n    let daoAddress = params.spender;\n    if (!isAddress(daoAddress)) {\n      await this.web3.ensureOnline();\n      const provider = this.web3.getProvider();\n      if (!provider) {\n        throw new NoProviderError();\n      }\n      const resolvedAddress = await provider.resolveName(daoAddress);\n      if (!resolvedAddress) {\n        throw new InvalidAddressOrEnsError();\n      }\n      daoAddress = resolvedAddress;\n    }\n\n    const contract = new Contract(\n      params.tokenAddress,\n      ERC20_ABI,\n      signer,\n    );\n    return contract.estimateGas.approve(\n      daoAddress,\n      params.amount,\n    ).then((gasLimit) => {\n      return this.web3.getApproximateGasFee(gasLimit.toBigInt());\n    });\n  }\n  /**\n   * Estimates the gas fee of preparing an update\n   *\n   * @param {PrepareUpdateParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public async prepareUpdate(\n    params: PrepareUpdateParams,\n  ): Promise<GasFeeEstimation> {\n    return await prepareGenericUpdateEstimation(this.web3, this.graphql, {\n      ...params,\n      pluginSetupProcessorAddress: this.web3.getAddress(\n        FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n      ),\n    });\n  }\n}\n","import {\n  DaoMetadata,\n  DaoUpdateDecodedParams,\n  GrantPermissionDecodedParams,\n  GrantPermissionWithConditionParams,\n  InitializeFromParams,\n  RegisterStandardCallbackParams,\n  RevokePermissionDecodedParams,\n  UpgradeToAndCallParams,\n  WithdrawParams,\n} from \"../../types\";\n\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport {\n  DAO__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  applyInstallatonParamsFromContract,\n  decodeApplyUpdateAction,\n  decodeGrantAction,\n  decodeInitializeFromAction,\n  decodeUpgradeToAction,\n  decodeUpgradeToAndCallAction,\n  findInterface,\n  permissionParamsFromContract,\n  permissionParamsWitConditionFromContract,\n  withdrawParamsFromContract,\n} from \"../utils\";\nimport { abi as ERC20_ABI } from \"@openzeppelin/contracts/build/contracts/ERC20.json\";\nimport { abi as ERC721_ABI } from \"@openzeppelin/contracts/build/contracts/ERC721.json\";\nimport { abi as ERC1155_ABI } from \"@openzeppelin/contracts/build/contracts/ERC1155.json\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { toUtf8String } from \"@ethersproject/strings\";\nimport { IClientDecoding } from \"../interfaces\";\nimport {\n  AddressOrEnsSchema,\n  BigintSchema,\n  bytesToHex,\n  ClientCore,\n  DecodedApplyInstallationParams,\n  DecodedApplyUninstallationParams,\n  DecodedApplyUpdateParams,\n  InterfaceParams,\n  InvalidActionError,\n  IpfsError,\n  resolveIpfsCid,\n  TokenType,\n  Uint8ArraySchema,\n} from \"@aragon/sdk-client-common\";\n\n/**\n * Decoding module the SDK Generic Client\n */\nexport class ClientDecoding extends ClientCore implements IClientDecoding {\n  /**\n   * @param {data} Uint8Array\n   * @return {DecodedApplyInstallationParams}\n   * @memberof ClientDecoding\n   */\n  public applyInstallationAction(\n    data: Uint8Array,\n  ): DecodedApplyInstallationParams {\n    Uint8ArraySchema.strict().validateSync(data);\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = pspInterface.getFunction(\"applyInstallation\");\n    const result = pspInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return applyInstallatonParamsFromContract(result);\n  }\n  /**\n   * @param {data} Uint8Array\n   * @return {DecodedApplyInstallationParams}\n   * @memberof ClientDecoding\n   */\n  public applyUninstallationAction(\n    data: Uint8Array,\n  ): DecodedApplyUninstallationParams {\n    Uint8ArraySchema.strict().validateSync(data);\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = pspInterface.getFunction(\"applyUninstallation\");\n    const result = pspInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return applyInstallatonParamsFromContract(result);\n  }\n\n  /**\n   * Decodes the apply update parameters from an encoded apply update action\n   *\n   * @param {Uint8Array} data\n   * @return {DecodedApplyUpdateParams}\n   * @memberof ClientDecoding\n   */\n  public applyUpdateAction(\n    data: Uint8Array,\n  ): DecodedApplyUpdateParams {\n    return decodeApplyUpdateAction(data);\n  }\n\n  /**\n   * Decodes the permission parameters from an encoded grant action\n   *\n   * @param {Uint8Array} data\n   * @return {GrantPermissionDecodedParams}\n   * @memberof ClientDecoding\n   */\n  public grantAction(data: Uint8Array): GrantPermissionDecodedParams {\n    Uint8ArraySchema.strict().validate(data);\n    return decodeGrantAction(data);\n  }\n  /**\n   * Decodes the grant permission with condition parameters from an encoded grant with condition action\n   *\n   * @param {Uint8Array} data\n   * @return {GrantPermissionWithConditionParams}\n   * @memberof ClientDecoding\n   */\n  public grantWithConditionAction(\n    data: Uint8Array,\n  ): GrantPermissionWithConditionParams {\n    Uint8ArraySchema.strict().validateSync(data);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"grantWithCondition\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return permissionParamsWitConditionFromContract(result);\n  }\n  /**\n   * Decodes the permission parameters from an encoded revoke action\n   *\n   * @param {Uint8Array} data\n   * @return {RevokePermissionDecodedParams}\n   * @memberof ClientDecoding\n   */\n  public revokeAction(data: Uint8Array): RevokePermissionDecodedParams {\n    Uint8ArraySchema.strict().validateSync(data);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"revoke\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return permissionParamsFromContract(result);\n  }\n  /**\n   * Decodes the withdraw parameters from an encoded withdraw action\n   *\n   * @param {Uint8Array} data\n   * @return {WithdrawParams}\n   * @memberof ClientDecoding\n   */\n  public withdrawAction(\n    to: string,\n    value: bigint,\n    data: Uint8Array,\n  ): WithdrawParams {\n    AddressOrEnsSchema.strict().validateSync(to);\n    BigintSchema.strict().validateSync(value);\n    Uint8ArraySchema.strict().validateSync(data);\n    // Native\n    if (!data?.length) {\n      return {\n        type: TokenType.NATIVE,\n        recipientAddressOrEns: to,\n        amount: value,\n      };\n    }\n\n    // ERC20 and other\n    const abiObjects = [\n      {\n        tokenStandard: TokenType.ERC20,\n        abi: ERC20_ABI,\n        batch: false,\n        function: \"transfer\",\n      },\n      {\n        tokenStandard: TokenType.ERC721,\n        abi: ERC721_ABI,\n        batch: false,\n        function: \"safeTransferFrom(address,address,uint256)\",\n      },\n      {\n        tokenStandard: TokenType.ERC1155,\n        abi: ERC1155_ABI,\n        batch: true,\n        function:\n          \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\",\n      },\n      {\n        tokenStandard: TokenType.ERC1155,\n        abi: ERC1155_ABI,\n        batch: false,\n        function: \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n      },\n    ];\n    for (const abiObject of abiObjects) {\n      try {\n        const hexBytes = bytesToHex(data);\n        const iface = new Contract(AddressZero, abiObject.abi).interface;\n        const expectedFunction = iface.getFunction(abiObject.function);\n        const result = iface.decodeFunctionData(expectedFunction, hexBytes);\n        return withdrawParamsFromContract(\n          to,\n          value,\n          result,\n          abiObject.tokenStandard,\n          abiObject.batch,\n        );\n      } catch (e) {\n        continue;\n      }\n    }\n    throw new InvalidActionError();\n  }\n  /**\n   * Decodes a dao metadata ipfs uri from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {string}\n   * @memberof ClientDecoding\n   */\n  public updateDaoMetadataRawAction(data: Uint8Array): string {\n    Uint8ArraySchema.strict().validateSync(data);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setMetadata\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    const metadataUri = toUtf8String(result[0]);\n    resolveIpfsCid(metadataUri);\n    return metadataUri;\n  }\n  /**\n   * Decodes a dao metadata from an encoded update metadata raw action\n   *\n   * @param {Uint8Array} data\n   * @return {Promise<DaoMetadata>}\n   * @memberof ClientDecoding\n   */\n  public async updateDaoMetadataAction(data: Uint8Array): Promise<DaoMetadata> {\n    await Uint8ArraySchema.strict().validate(data);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setMetadata\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    const metadataUri = toUtf8String(result[0]);\n    const ipfsCid = resolveIpfsCid(metadataUri);\n    try {\n      const stringMetadata = await this.ipfs.fetchString(ipfsCid);\n      return JSON.parse(stringMetadata);\n    } catch (e) {\n      throw new IpfsError(e);\n    }\n  }\n  /**\n   * Decodes the daoUri from a setDaoUriAction\n   *\n   * @param {Uint8Array} data\n   * @return {string}\n   * @memberof ClientDecoding\n   */\n  public setDaoUriAction(data: Uint8Array): string {\n    Uint8ArraySchema.strict().validateSync(data);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setDaoURI\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return result[0];\n  }\n  /**\n   * Decodes the RegisterStandardCallbackParams from a registerStandardCallbackAction\n   *\n   * @param {Uint8Array} data\n   * @return {RegisterStandardCallbackParams}\n   * @memberof ClientDecoding\n   */\n  public registerStandardCallbackAction(\n    data: Uint8Array,\n  ): RegisterStandardCallbackParams {\n    Uint8ArraySchema.strict().validateSync(data);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"registerStandardCallback\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return {\n      interfaceId: result[0],\n      callbackSelector: result[1],\n      magicNumber: result[2],\n    };\n  }\n  /**\n   * Decodes the implementation address from an encoded upgradeToAction\n   *\n   * @param {Uint8Array} data\n   * @return {string}\n   * @memberof ClientDecoding\n   */\n  public setSignatureValidatorAction(\n    data: Uint8Array,\n  ): string {\n    Uint8ArraySchema.strict().validateSync(data);\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"setSignatureValidator\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return result[0];\n  }\n  public upgradeToAction(data: Uint8Array): string {\n    return decodeUpgradeToAction(data);\n  }\n  /**\n   * Decodes upgradeToAndCallback params from an upgradeToAndCallAction\n   *\n   * @param {Uint8Array} data\n   * @return {UpgradeToAndCallParams}\n   * @memberof ClientDecoding\n   */\n  public upgradeToAndCallAction(\n    data: Uint8Array,\n  ): UpgradeToAndCallParams {\n    Uint8ArraySchema.strict().validate(data);\n    return decodeUpgradeToAndCallAction(data);\n  }\n\n  /**\n   * Decodes the initializeFrom params from an initializeFromAction\n   *\n   * @param {Uint8Array} data\n   * @return {InitializeFromParams}\n   * @memberof ClientDecoding\n   */\n  public initializeFromAction(data: Uint8Array): InitializeFromParams {\n    Uint8ArraySchema.strict().validate(data);\n    return decodeInitializeFromAction(data);\n  }\n\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {(InterfaceParams | null)}\n   * @memberof ClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    Uint8ArraySchema.strict().validate(data);\n    return findInterface(data, AVAILABLE_FUNCTION_SIGNATURES);\n  }\n\n  /**\n   * Decodes the dao update params from a daoUpdateAction\n   *\n   * @param {Uint8Array} data\n   * @return {DaoUpdateDecodedParams}\n   * @memberof ClientDecoding\n   */\n  public daoUpdateAction(\n    data: Uint8Array,\n  ): DaoUpdateDecodedParams {\n    const upgradeToAndCallDecodedParams = this.upgradeToAndCallAction(data);\n    const initializeFromDecodedParams = this.initializeFromAction(\n      upgradeToAndCallDecodedParams.data,\n    );\n    return {\n      implementationAddress:\n        upgradeToAndCallDecodedParams.implementationAddress,\n      previousVersion: initializeFromDecodedParams.previousVersion,\n      initData: initializeFromDecodedParams.initData,\n    };\n  }\n}\n","import { ClientMethods } from \"./internal/client/methods\";\nimport { ClientEncoding } from \"./internal/client/encoding\";\nimport { ClientEstimation } from \"./internal/client/estimation\";\nimport { ClientDecoding } from \"./internal/client/decoding\";\nimport {\n  IClient,\n  IClientDecoding,\n  IClientEncoding,\n  IClientEstimation,\n  IClientMethods,\n} from \"./internal/interfaces\";\nimport { ClientCore, Context } from \"@aragon/sdk-client-common\";\n\n/**\n * Provider a generic client with high level methods to manage and interact with DAO's\n */\nexport class Client extends ClientCore implements IClient {\n  public methods: IClientMethods;\n  public encoding: IClientEncoding;\n  public decoding: IClientDecoding;\n  public estimation: IClientEstimation;\n\n  constructor(context: Context) {\n    super(context);\n    this.methods = new ClientMethods(context);\n    this.encoding = new ClientEncoding(context);\n    this.decoding = new ClientDecoding(context);\n    this.estimation = new ClientEstimation(context);\n  }\n}\n","import {\n  MajorityVotingBase__factory,\n  Multisig__factory,\n} from \"@aragon/osx-ethers\";\n\nconst multisigInterface = Multisig__factory.createInterface();\nconst majorityVotingInterface = MajorityVotingBase__factory.createInterface();\n\nexport const FAILING_PROPOSAL_AVAILABLE_FUNCTION_SIGNATURES = [\n  multisigInterface.getFunction(\"addAddresses\")\n    .format(\"minimal\"),\n  multisigInterface.getFunction(\n    \"removeAddresses\",\n  ).format(\"minimal\"),\n  multisigInterface.getFunction(\n    \"updateMultisigSettings\",\n  ).format(\"minimal\"),\n  majorityVotingInterface.getFunction(\n    \"updateVotingSettings\",\n  ).format(\"minimal\"),\n];\n","// This file contains common types, interfaces, and enumerations\n\nexport enum DaoRole {\n  UPGRADE_ROLE = \"UPGRADE_ROLE\",\n  DAO_CONFIG_ROLE = \"DAO_CONFIG_ROLE\",\n  EXEC_ROLE = \"EXEC_ROLE\",\n  WITHDRAW_ROLE = \"WITHDRAW_ROLE\",\n  SET_SIGNATURE_VALIDATOR_ROLE = \"SET_SIGNATURE_VALIDATOR_ROLE\",\n}\n\n/**\n * Contains the general human readable information about the DAO\n */\nexport type DaoConfig = {\n  name: string;\n  metadataUri: string;\n};\n","import { IDAO } from \"@aragon/osx-ethers\";\nimport { VoteValues, VotingMode } from \"./types/plugin\";\nimport {\n  CreateMajorityVotingProposalParams,\n} from \"./types/plugin\";\nimport { FAILING_PROPOSAL_AVAILABLE_FUNCTION_SIGNATURES } from \"./internal\";\nimport {\n  DaoAction,\n  DecodedApplyInstallationParams,\n  InvalidVotingModeError,\n  getFunctionFragment,\n} from \"@aragon/sdk-client-common\";\n\nimport { Result } from \"@ethersproject/abi\";\n\nexport function unwrapProposalParams(\n  params: CreateMajorityVotingProposalParams,\n): [string, IDAO.ActionStruct[], number, number, boolean, number] {\n  return [\n    params.metadataUri,\n    params.actions ?? [],\n    // TODO: Verify => seconds?\n    params.startDate ? Math.floor(params.startDate.getTime() / 1000) : 0,\n    // TODO: Verify => seconds?\n    params.endDate ? Math.floor(params.endDate.getTime() / 1000) : 0,\n    params.executeOnPass ?? false,\n    params.creatorVote ?? VoteValues.ABSTAIN,\n  ];\n}\n\nexport function votingModeToContracts(votingMode: VotingMode): number {\n  switch (votingMode) {\n    case VotingMode.STANDARD:\n      return 0;\n    case VotingMode.EARLY_EXECUTION:\n      return 1;\n    case VotingMode.VOTE_REPLACEMENT:\n      return 2;\n    default:\n      throw new InvalidVotingModeError();\n  }\n}\n\nexport function votingModeFromContracts(votingMode: number): VotingMode {\n  switch (votingMode) {\n    case 0:\n      return VotingMode.STANDARD;\n    case 1:\n      return VotingMode.EARLY_EXECUTION;\n    case 2:\n      return VotingMode.VOTE_REPLACEMENT;\n    default:\n      throw new InvalidVotingModeError();\n  }\n}\n\nexport function isFailingProposal(actions: DaoAction[] = []): boolean {\n  // store the function names of the actions\n  const functionNames: string[] = actions.map((action) => {\n    try {\n      const fragment = getFunctionFragment(\n        action.data,\n        FAILING_PROPOSAL_AVAILABLE_FUNCTION_SIGNATURES,\n      );\n      return fragment.name;\n    } catch {\n      return \"\";\n    }\n  }).filter((name) => name !== \"\");\n\n  for (const [i, functionName] of functionNames.entries()) {\n    // if I add addresses, we must update the settings after\n    if (functionName === \"addAddresses\") {\n      // if there is not an updateVotingSettings after addAddresses then the proposal will fail\n      if (\n        functionNames.indexOf(\"updateVotingSettings\", i) === -1 &&\n        functionNames.indexOf(\"updateMultisigSettings\", i) === -1\n      ) {\n        return true;\n      }\n      // if I remove addresses, we must update the settings befor\n    } else if (functionName === \"removeAddresses\") {\n      // if there is not an updateVotingSettings before removeAddresses then the proposal will fail\n      const updateVotingSettingsIndex = functionNames.indexOf(\n        \"updateVotingSettings\",\n      ); // if there is not an updateVotingSettings before removeAddresses then the proposal will fail\n      const updateMultisigSettingsIndex = functionNames.indexOf(\n        \"updateMultisigSettings\",\n      );\n      if (\n        (updateVotingSettingsIndex === -1 || updateVotingSettingsIndex > i) &&\n        (updateMultisigSettingsIndex === -1 || updateMultisigSettingsIndex > i)\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function applyInstallatonParamsFromContract(\n  result: Result,\n): DecodedApplyInstallationParams {\n  const params = result[1];\n  return {\n    helpersHash: params.helpersHash,\n    permissions: params.permissions,\n    versionTag: params.pluginSetupRef.versionTag,\n    pluginAddress: params.plugin,\n    pluginRepo: params.pluginSetupRef.pluginSetupRepo,\n  };\n}\n","import { MajorityVotingBase__factory } from \"@aragon/osx-ethers\";\nimport { Result } from \"@ethersproject/abi\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { votingModeFromContracts, votingModeToContracts } from \"./utils\";\nimport {\n  ContractVotingSettings,\n  VotingMode,\n  VotingSettings,\n} from \"./types/plugin\";\nimport { bytesToHex, decodeRatio, encodeRatio, hexToBytes } from \"@aragon/sdk-client-common\";\n\nexport function decodeUpdatePluginSettingsAction(\n  data: Uint8Array,\n): VotingSettings {\n  const votingInterface = MajorityVotingBase__factory.createInterface();\n  const hexBytes = bytesToHex(data);\n  const expectedfunction = votingInterface.getFunction(\"updateVotingSettings\");\n  const result = votingInterface.decodeFunctionData(\n    expectedfunction,\n    hexBytes,\n  );\n  return pluginSettingsFromContract(result);\n}\n\nexport function encodeUpdateVotingSettingsAction(\n  params: VotingSettings,\n): Uint8Array {\n  const votingInterface = MajorityVotingBase__factory.createInterface();\n  const args = votingSettingsToContract(params);\n  // get hex bytes\n  const hexBytes = votingInterface.encodeFunctionData(\n    \"updateVotingSettings\",\n    [\n      {\n        votingMode: args[0],\n        supportThreshold: args[1],\n        minParticipation: args[2],\n        minDuration: args[3],\n        minProposerVotingPower: args[4],\n      },\n    ],\n  );\n  // Strip 0x => encode in Uint8Array\n  return hexToBytes(hexBytes);\n}\n\nfunction pluginSettingsFromContract(result: Result): VotingSettings {\n  return {\n    votingMode: votingModeFromContracts(result[0][0]),\n    supportThreshold: decodeRatio(result[0][1], 6),\n    minParticipation: decodeRatio(result[0][2], 6),\n    minDuration: result[0][3].toNumber(),\n    minProposerVotingPower: BigInt(result[0][4]),\n  };\n}\n\nexport function votingSettingsToContract(\n  params: VotingSettings,\n): ContractVotingSettings {\n  return [\n    BigNumber.from(\n      votingModeToContracts(params.votingMode || VotingMode.STANDARD),\n    ),\n    BigNumber.from(encodeRatio(params.supportThreshold, 6)),\n    BigNumber.from(encodeRatio(params.minParticipation, 6)),\n    BigNumber.from(params.minDuration),\n    BigNumber.from(params.minProposerVotingPower ?? 0),\n  ];\n}\n","import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingMembers = gql`\nquery AddresslistVotingMembers($where: AddresslistVotingVoter_filter!, $block: Block_height, $limit: Int!, $skip: Int!, $sortBy: AddresslistVotingVoter_orderBy!, $direction: OrderDirection!) {\n  addresslistVotingVoters(\n    where: $where\n    block: $block\n    first: $limit\n    skip: $skip\n    orderBy: $sortBy\n    orderDirection: $direction\n  ) {\n    address\n  }\n}`;\n\nexport const QueryAddresslistVotingIsMember = gql`\nquery AddresslistVotingIsMember($id: ID!, $block: Block_height) {\n  addresslistVotingVoter(\n    id: $id\n    block: $block\n  ) {\n    id\n  }\n}`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingProposal = gql`\nquery AddresslistVotingProposal($proposalId: ID!) {\n  addresslistVotingProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    creationBlockNumber\n    executionDate\n    executionBlockNumber\n    actions {\n      to\n      value\n      data\n    }\n    yes\n    no\n    abstain\n    votingMode\n    supportThreshold\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    approvalReached\n    isSignaling\n    executionTxHash\n    voters{\n      voter{\n        address\n      }\n      voteOption\n      voteReplaced\n    }\n    totalVotingPower\n    minVotingPower\n  }\n}\n`;\nexport const QueryAddresslistVotingProposals = gql`\nquery AddresslistVotingProposals($where: AddresslistVotingProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: AddresslistVotingProposal_orderBy!) {\n  addresslistVotingProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    actions {\n      to\n      value\n      data\n    }\n    creator\n    metadata\n    yes\n    no\n    abstain\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    approvalReached\n    isSignaling\n    voters{\n      voter{\n        address\n      }\n      voteOption\n      voteReplaced\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingSettings = gql`\nquery AddresslistVotingSettings($address: ID!, $block: Block_height) {\n  addresslistVotingPlugin(id: $address, block: $block){\n    minDuration\n    minProposerVotingPower\n    minParticipation\n    supportThreshold\n    votingMode\n  }\n}\n`;\n","import {\n  SubgraphAction,\n  SubgraphVoteValuesMap,\n  VoteValues,\n  votingSettingsToContract,\n} from \"../../client-common\";\nimport {\n  AddresslistVotingPluginInstall,\n  AddresslistVotingProposal,\n  AddresslistVotingProposalListItem,\n} from \"../types\";\nimport {\n  ContractAddresslistVotingInitParams,\n  SubgraphAddresslistVotingProposal,\n  SubgraphAddresslistVotingProposalListItem,\n  SubgraphAddresslistVotingVoterListItem,\n} from \"./types\";\nimport {\n  DaoAction,\n  decodeRatio,\n  getCompactProposalId,\n  hexToBytes,\n  InvalidProposalStatusError,\n  ProposalMetadata,\n  ProposalStatus,\n} from \"@aragon/sdk-client-common\";\n\nexport function toAddresslistVotingProposal(\n  proposal: SubgraphAddresslistVotingProposal,\n  metadata: ProposalMetadata,\n): AddresslistVotingProposal {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    metadataHash: proposal.metadata,\n    startDate,\n    endDate,\n    creationDate,\n    executionTxHash: proposal.executionTxHash || null,\n    creationBlockNumber: parseInt(proposal.creationBlockNumber),\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? parseInt(proposal.yes) : 0,\n      no: proposal.no ? parseInt(proposal.no) : 0,\n      abstain: proposal.abstain ? parseInt(proposal.abstain) : 0,\n    },\n    settings: {\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n    },\n    totalVotingWeight: parseInt(proposal.totalVotingPower),\n    votes: proposal.voters.map(\n      (voter: SubgraphAddresslistVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n        };\n      },\n    ),\n  };\n}\nexport function toAddresslistVotingProposalListItem(\n  proposal: SubgraphAddresslistVotingProposalListItem,\n  metadata: ProposalMetadata,\n): AddresslistVotingProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    metadataHash: proposal.metadata,\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? parseInt(proposal.yes) : 0,\n      no: proposal.no ? parseInt(proposal.no) : 0,\n      abstain: proposal.abstain ? parseInt(proposal.abstain) : 0,\n    },\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    votes: proposal.voters.map(\n      (voter: SubgraphAddresslistVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n        };\n      },\n    ),\n  };\n}\n\nexport function addresslistVotingInitParamsToContract(\n  params: AddresslistVotingPluginInstall,\n): ContractAddresslistVotingInitParams {\n  return [\n    votingSettingsToContract(params.votingSettings),\n    params.addresses,\n  ];\n}\n\nexport function computeProposalStatus(\n  proposal:\n    | SubgraphAddresslistVotingProposal\n    | SubgraphAddresslistVotingProposalListItem,\n): ProposalStatus {\n  const now = new Date();\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  // The proposal is executed so the status becomes EXECUTED\n  // independently of the other conditions\n  if (proposal.executed) {\n    return ProposalStatus.EXECUTED;\n  }\n  // The proposal is not executed and the start date is in the future\n  // so the status becomes PENDING\n  if (startDate >= now) {\n    return ProposalStatus.PENDING;\n  }\n  // The proposal is not executed and the start date is in the past.\n  // Accordingly, we check if the proposal reached enough approval\n  // (i.e., that the supportThreshold and minParticipation criteria are both met).\n  // If approvalReached is true and the vote has ended (end date is in the past), it has succeeded.\n  // This applies to normal mode and vote replacement mode.\n  if (proposal.approvalReached && endDate <= now) {\n    return ProposalStatus.SUCCEEDED;\n  }\n  // In early exeuction mode, we calculate if subsequent voting can change the result of the vote.\n  // If not, the proposal is early executable and is therefore succeeded as well.\n  if (proposal.earlyExecutable) {\n    return ProposalStatus.SUCCEEDED;\n  }\n  // The proposal is not executed and the start date is in the past\n  // and the approval threshold is not reached\n  // If the end date is in the future this means that you can still vote\n  // so the status becomes ACTIVE\n  if (now < endDate) {\n    return ProposalStatus.ACTIVE;\n  }\n  // If none of the other conditions are met the status becomes DEFEATED\n  return ProposalStatus.DEFEATED;\n}\n\nexport function computeProposalStatusFilter(status: ProposalStatus) {\n  let where = {};\n  const now = Math.round(new Date().getTime() / 1000).toString();\n  switch (status) {\n    case ProposalStatus.PENDING:\n      where = { startDate_gte: now };\n      break;\n    case ProposalStatus.ACTIVE:\n      where = { startDate_lt: now, endDate_gte: now, executed: false };\n      break;\n    case ProposalStatus.EXECUTED:\n      where = { executed: true };\n      break;\n    case ProposalStatus.SUCCEEDED:\n      where = {\n        or: [\n          { approvalReached: true, endDate_lt: now },\n          { earlyExecutable: true },\n        ],\n      };\n      break;\n    case ProposalStatus.DEFEATED:\n      where = {\n        potentiallyExecutable: false,\n        endDate_lt: now,\n        executed: false,\n      };\n      break;\n    default:\n      throw new InvalidProposalStatusError();\n  }\n  return where;\n}\n","import {\n  AddresslistVoting__factory,\n  MajorityVotingBase__factory,\n} from \"@aragon/osx-ethers\";\nimport { MetadataAbiInput } from \"@aragon/sdk-client-common\";\n\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  MajorityVotingBase__factory.createInterface().getFunction(\n    \"updateVotingSettings\",\n  )\n    .format(\"minimal\"),\n  AddresslistVoting__factory.createInterface().getFunction(\"addAddresses\")\n    .format(\"minimal\"),\n  AddresslistVoting__factory.createInterface().getFunction(\n    \"removeAddresses\",\n  ).format(\"minimal\"),\n];\n// TODO:\n// use abi from plugin metadata\nexport const UPDATE_ABI: { [build: number]: MetadataAbiInput[] } = {\n  1: [],\n};\n// TODO:\n// use abi from plugin metadata\nexport const INSTALLATION_ABI: MetadataAbiInput[] = [\n  {\n    components: [\n      {\n        internalType: \"enum MajorityVotingBase.VotingMode\",\n        name: \"votingMode\",\n        type: \"uint8\",\n        description:\n          \"A parameter to select the vote mode. In standard mode (0), early execution and vote replacement are disabled. In early execution mode (1), a proposal can be executed early before the end date if the vote outcome cannot mathematically change by more voters voting. In vote replacement mode (2), voters can change their vote multiple times and only the latest vote option is tallied.\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"supportThreshold\",\n        type: \"uint32\",\n        description:\n          \"The support threshold value. Its value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`.\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"minParticipation\",\n        type: \"uint32\",\n        description:\n          \"The minimum participation value. Its value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`.\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"minDuration\",\n        type: \"uint64\",\n        description: \"The minimum duration of the proposal vote in seconds.\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minProposerVotingPower\",\n        type: \"uint256\",\n        description: \"The minimum voting power required to create a proposal.\",\n      },\n    ],\n    internalType: \"struct MajorityVotingBase.VotingSettings\",\n    name: \"votingSettings\",\n    type: \"tuple\",\n    description:\n      \"The voting settings that will be enforced when proposals are created.\",\n  },\n  {\n    internalType: \"address[]\",\n    name: \"members\",\n    type: \"address[]\",\n    description: \"The addresses of the initial members to be added.\",\n  },\n];\n","import {\n  PrepareUpdateParams,\n  ProposalBase,\n  ProposalListItemBase,\n  TokenType,\n  VersionTag,\n} from \"@aragon/sdk-client-common\";\nimport {\n  MajorityVotingProposalSettings,\n  ProposalVoteBase,\n  VotingSettings,\n} from \"../client-common\";\n\nexport type TokenVotingPluginInstall = {\n  votingSettings: VotingSettings;\n  newToken?: NewTokenParams;\n  useToken?: ExistingTokenParams;\n};\n\ntype ExistingTokenParams = {\n  tokenAddress: string;\n  wrappedToken: {\n    name: string;\n    symbol: string;\n  };\n};\n\ntype NewTokenParams = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  minter?: string;\n  balances: { address: string; balance: bigint }[];\n};\n\n// PROPOSAL RETRIEVAL\nexport type TokenVotingProposalVote = ProposalVoteBase & {\n  weight: bigint;\n};\n\nexport type TokenVotingProposal = ProposalBase & {\n  result: TokenVotingProposalResult;\n  settings: MajorityVotingProposalSettings;\n  token: Erc20TokenDetails | Erc721TokenDetails | null;\n  usedVotingWeight: bigint;\n  votes: TokenVotingProposalVote[];\n  totalVotingWeight: bigint;\n};\n\nexport type TokenVotingProposalListItem = ProposalListItemBase & {\n  token: Erc20TokenDetails | Erc721TokenDetails | null;\n  result: TokenVotingProposalResult;\n  totalVotingWeight: bigint;\n  settings: MajorityVotingProposalSettings;\n  votes: TokenVotingProposalVote[];\n};\n\nexport type TokenVotingProposalResult = {\n  yes: bigint;\n  no: bigint;\n  abstain: bigint;\n};\n\nexport type Erc20TokenDetails = TokenBaseDetails & {\n  decimals: number;\n  type: TokenType.ERC20;\n};\n\nexport type Erc721TokenDetails = TokenBaseDetails & {\n  type: TokenType.ERC721;\n};\n\nexport type Erc20WrapperTokenDetails = Erc20TokenDetails & {\n  underlyingToken: Erc20TokenDetails;\n};\n\nexport type TokenBaseDetails = {\n  address: string;\n  name: string;\n  symbol: string;\n};\n\nexport type MintTokenParams = {\n  address: string;\n  amount: bigint;\n};\n\nexport type TokenVotingPluginPrepareInstallationParams = {\n  settings: TokenVotingPluginInstall;\n  daoAddressOrEns: string;\n  versionTag?: VersionTag;\n};\n\nexport type TokenVotingPluginPrepareUpdateParams = Omit<\n  PrepareUpdateParams,\n  \"pluginRepo\"\n>;\n\ntype WrapTokensBase = {\n  wrappedTokenAddress: string;\n  amount: bigint;\n};\n\nexport type WrapTokensParams = WrapTokensBase;\nexport type UnwrapTokensParams = WrapTokensBase;\n\nexport enum WrapTokensStep {\n  WRAPPING = \"wrapping\",\n  DONE = \"done\",\n}\n\nexport type WrapTokensStepValue =\n  | { key: WrapTokensStep.WRAPPING; txHash: string }\n  | { key: WrapTokensStep.DONE };\n\nexport enum UnwrapTokensStep {\n  UNWRAPPING = \"unwrapping\",\n  DONE = \"done\",\n}\nexport type UnwrapTokensStepValue =\n  | { key: UnwrapTokensStep.UNWRAPPING; txHash: string }\n  | { key: UnwrapTokensStep.DONE };\n\n/* Delegate */\nexport type DelegateTokensParams = {\n  tokenAddress: string;\n  delegatee: string;\n};\n\nexport const enum DelegateTokensStep {\n  DELEGATING = \"delegating\",\n  DONE = \"done\",\n}\n\nexport const enum UndelegateTokensStep {\n  UNDELEGATING = \"delegating\",\n  DONE = \"done\",\n}\n\ntype DelegateTokensStepCommon = {\n  key: DelegateTokensStep.DELEGATING | UndelegateTokensStep.UNDELEGATING;\n  txHash: string;\n} | { key: DelegateTokensStep.DONE | UndelegateTokensStep.DONE };\n\nexport type UndelegateTokensStepValue = DelegateTokensStepCommon;\nexport type DelegateTokensStepValue = DelegateTokensStepCommon;\n\nexport type TokenVotingMember = {\n  /** The address of the member */\n  address: string;\n  /** The balance of the member */\n  balance: bigint;\n  /** The voting power of the member taking into account the delagation */\n  votingPower: bigint;\n  /** The address that you delegated yout voting power to\n   *  If null, you are not delegating your voting power */\n  delegatee: string | null;\n  /** The list of addresses that delegated their voting power this member */\n  delegators: { address: string; balance: bigint }[];\n};\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  ContractVotingSettings,\n  MembersQueryParamsBase,\n  SubgraphAction,\n  SubgraphProposalBase,\n  SubgraphVoterListItemBase,\n  VotingMode,\n} from \"../../client-common\";\n\n/* Contract types */\nexport type ContractMintTokenParams = [string, BigNumber];\nexport type ContractTokenVotingInitParams = [\n  ContractVotingSettings,\n  [\n    string, // address\n    string, // name\n    string, // symbol\n  ],\n  [\n    string[], // receivers,\n    BigNumber[], // amounts\n  ],\n];\n\n/* Subgraph types */\nexport type SubgraphTokenVotingVoterListItem = SubgraphVoterListItemBase & {\n  votingPower: string;\n};\n\nexport type SubgraphTokenVotingProposalListItem = SubgraphProposalBase & {\n  plugin: {\n    token: SubgraphErc20Token | SubgraphErc721Token | SubgraphErc20WrapperToken;\n  };\n  voters: SubgraphTokenVotingVoterListItem[];\n  supportThreshold: string;\n  minVotingPower: bigint;\n  totalVotingPower: string;\n  votingMode: VotingMode;\n  earlyExecutable: boolean;\n};\n\ntype SubgraphBaseToken = {\n  symbol: string;\n  name: string;\n  id: string;\n};\nexport enum SubgraphTokenType {\n  ERC20 = \"ERC20Token\",\n  ERC721 = \"ERC721Token\",\n}\nexport enum SubgraphContractType {\n  ERC20 = \"ERC20Contract\",\n  ERC20_WRAPPER = \"ERC20WrapperContract\",\n  ERC721 = \"ERC721Contract\",\n}\n\nexport type SubgraphErc20Token = SubgraphBaseToken & {\n  __typename: SubgraphContractType.ERC20;\n  decimals: number;\n};\nexport type SubgraphErc20WrapperToken = SubgraphBaseToken & {\n  __typename: SubgraphContractType.ERC20_WRAPPER;\n  decimals: number;\n  underlyingToken: SubgraphErc20Token;\n};\nexport type SubgraphErc721Token = SubgraphBaseToken & {\n  __typename: SubgraphContractType.ERC721;\n};\n\nexport type SubgraphTokenVotingProposal =\n  & SubgraphTokenVotingProposalListItem\n  & {\n    createdAt: string;\n    actions: SubgraphAction[];\n    creationBlockNumber: string;\n    executionDate: string;\n    executionTxHash: string;\n    executionBlockNumber: string;\n  };\n\nexport type SubgraphTokenVotingMember = {\n  address: string;\n  balance: string;\n  votingPower: string;\n  delegatee?: {\n    address: string;\n  };\n  delegators: {\n    address: string;\n    balance: string;\n  }[];\n};\n\nexport enum TokenVotingMembersSortBy {\n  ADDRESS = \"address\",\n  BALANCE = \"balance\",\n  VOTING_POWER = \"votingPower\",\n}\nexport type TokenVotingMembersQueryParams = MembersQueryParamsBase & {\n  sortBy?: TokenVotingMembersSortBy;\n};\n\nexport enum TokenVotingTokenCompatibility {\n  COMPATIBLE = \"compatible\",\n  NEEDS_WRAPPING = \"needsWrapping\",\n  INCOMPATIBLE = \"incompatible\",\n}\n","import { isAddress } from \"@ethersproject/address\";\nimport { IAddresslistVotingClientMethods } from \"../interfaces\";\nimport {\n  CanVoteParams,\n  CreateMajorityVotingProposalParams,\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  MembersQueryParams,\n  MembersSortBy,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalQueryParams,\n  ProposalSortBy,\n  SubgraphMembers,\n  SubgraphVotingSettings,\n  VoteProposalParams,\n  VoteProposalStep,\n  VoteProposalStepValue,\n  VotingSettings,\n  votingSettingsToContract,\n} from \"../../../client-common\";\nimport {\n  QueryAddresslistVotingIsMember,\n  QueryAddresslistVotingMembers,\n  QueryAddresslistVotingProposal,\n  QueryAddresslistVotingProposals,\n  QueryAddresslistVotingSettings,\n} from \"../graphql-queries\";\nimport {\n  computeProposalStatusFilter,\n  toAddresslistVotingProposal,\n  toAddresslistVotingProposalListItem,\n} from \"../utils\";\nimport { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  AddresslistVotingPluginPrepareInstallationParams,\n  AddresslistVotingPluginPrepareUpdateParams,\n  AddresslistVotingProposal,\n  AddresslistVotingProposalListItem,\n} from \"../../types\";\nimport {\n  SubgraphAddresslistVotingProposal,\n  SubgraphAddresslistVotingProposalListItem,\n} from \"../types\";\nimport {\n  boolArrayToBitmap,\n  ClientCore,\n  decodeProposalId,\n  decodeRatio,\n  EMPTY_PROPOSAL_METADATA_LINK,\n  encodeProposalId,\n  findLog,\n  getExtendedProposalId,\n  InvalidAddressError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  IsMemberParams,\n  IsMemberSchema,\n  isProposalId,\n  MULTI_FETCH_TIMEOUT,\n  NoProviderError,\n  prepareGenericInstallation,\n  prepareGenericUpdate,\n  PrepareInstallationStepValue,\n  PrepareUpdateStepValue,\n  promiseWithTimeout,\n  ProposalCreationError,\n  ProposalMetadata,\n  resolveIpfsCid,\n  SizeMismatchError,\n  SortDirection,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-client-common\";\nimport { INSTALLATION_ABI, UPDATE_ABI } from \"../constants\";\nimport {\n  FrameworkContractsNames,\n  getNetworkByAlias,\n  NonFrameworkContractsNames,\n} from \"@aragon/osx-commons-configs\";\n\n/**\n * Methods module the SDK Address List Client\n */\nexport class AddresslistVotingClientMethods extends ClientCore\n  implements IAddresslistVotingClientMethods {\n  /**\n   * Creates a new proposal on the given AddressList plugin contract\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    // TODO\n    // implement a more sophisticated isFailingProposal function\n    // if (isFailingProposal(params.actions)) {\n    //   throw new AlwaysFailingProposalError();\n    // }\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new SizeMismatchError(\"failSafeActions\", \"actions\");\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await addresslistContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n      params.creatorVote || 0,\n      params.executeOnPass || false,\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const addresslistContractInterface = AddresslistVoting__factory\n      .createInterface();\n\n    const log = findLog(\n      receipt,\n      addresslistContractInterface,\n      \"ProposalCreated\",\n    );\n\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = addresslistContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Cast a vote on the given proposal using the client's wallet. Depending on the proposal settings, an affirmative vote may execute the proposal's actions on the DAO.\n   *\n   * @param {VoteProposalParams} params\n   * @return {AsyncGenerator<VoteProposalStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *voteProposal(\n    params: VoteProposalParams,\n  ): AsyncGenerator<VoteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await addresslistContract.vote(\n      id,\n      params.vote,\n      false,\n    );\n\n    yield {\n      key: VoteProposalStep.VOTING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: VoteProposalStep.DONE,\n    };\n  }\n\n  /**\n   * Executes the given proposal, provided that it has already passed\n   *\n   * @param {string} proposalId\n   * @return {AsyncGenerator<ExecuteProposalStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const tx = await addresslistContract.execute(id);\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n  /**\n   * Prepares the installation of a token voting plugin in a given dao\n   *\n   * @param {AddresslistVotingPluginPrepareInstallationParams} params\n   * @return {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *prepareInstallation(\n    params: AddresslistVotingPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const network = await this.web3.getProvider().getNetwork();\n    const aragonNetwork = getNetworkByAlias(network.name);\n    if (!aragonNetwork) {\n      throw new UnsupportedNetworkError(network.name);\n    }\n    yield* prepareGenericInstallation(this.web3, {\n      daoAddressOrEns: params.daoAddressOrEns,\n      pluginRepo: this.web3.getAddress(\n        NonFrameworkContractsNames.ADDRESSLIST_VOTING_REPO_PROXY,\n      ),\n      version: params.versionTag,\n      installationAbi: INSTALLATION_ABI,\n      installationParams: [\n        votingSettingsToContract(params.settings.votingSettings),\n        params.settings.addresses,\n      ],\n      pluginSetupProcessorAddress: this.web3.getAddress(\n        FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n      ),\n    });\n  }\n  /**\n   * Prepares the update of a token voting plugin in a given dao\n   *\n   * @param {AddresslistVotingPluginPrepareUpdateParams} params\n   * @return {AsyncGenerator<PrepareUpdateStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *prepareUpdate(\n    params: AddresslistVotingPluginPrepareUpdateParams,\n  ): AsyncGenerator<PrepareUpdateStepValue> {\n    yield* prepareGenericUpdate(this.web3, this.graphql, {\n      ...params,\n      pluginRepo: this.web3.getAddress(\n        NonFrameworkContractsNames.ADDRESSLIST_VOTING_REPO_PROXY,\n      ),\n      updateAbi: UPDATE_ABI[params.newVersion.build] ||\n        params.updateAbi || [],\n      pluginSetupProcessorAddress: this.web3.getAddress(\n        FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n      ),\n    });\n  }\n\n  /**\n   * Checks if an user can vote in a proposal\n   *\n   * @param {CanVoteParams} params\n   * @return {Promise<boolean>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async canVote(params: CanVoteParams): Promise<boolean> {\n    const provider = this.web3.getProvider();\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      provider,\n    );\n    return addresslistContract.callStatic.canVote(\n      id,\n      params.voterAddressOrEns,\n      params.vote,\n    );\n  }\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {Promise<boolean>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const provider = this.web3.getProvider();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      provider,\n    );\n\n    return addresslistContract.canExecute(id);\n  }\n  /**\n   * Returns the list of wallet addresses with signing capabilities on the plugin\n   *\n   * @param {MembersQueryParams} params\n   *     - pluginAddress\n   *     - blockNumber\n   *     - limit = 10\n   *     - skip = 0\n   *     - direction = SortDirection.ASC\n   *     - sortBy = MembersSortBy.ADDRESS\n   * @return {Promise<string[]>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getMembers({\n    pluginAddress,\n    blockNumber,\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = MembersSortBy.ADDRESS,\n  }: MembersQueryParams): Promise<string[]> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryAddresslistVotingMembers;\n    const params = {\n      where: { plugin: pluginAddress.toLowerCase() },\n      block: blockNumber ? { number: blockNumber } : null,\n      skip,\n      limit,\n      direction,\n      sortBy,\n    };\n    const name = \"AddresslistVotingVoting members\";\n    type T = { addresslistVotingVoters: SubgraphMembers };\n    const { addresslistVotingVoters } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return addresslistVotingVoters.map((\n      member: { address: string },\n    ) => member.address);\n  }\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {(Promise<AddresslistVotingProposal | null>)}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<AddresslistVotingProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryAddresslistVotingProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"AddresslistVoting proposal\";\n    type T = { addresslistVotingProposal: SubgraphAddresslistVotingProposal };\n    const { addresslistVotingProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!addresslistVotingProposal) {\n      return null;\n    } else if (!addresslistVotingProposal.metadata) {\n      return toAddresslistVotingProposal(\n        addresslistVotingProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    try {\n      const metadataCid = resolveIpfsCid(addresslistVotingProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toAddresslistVotingProposal(addresslistVotingProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toAddresslistVotingProposal(\n          addresslistVotingProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toAddresslistVotingProposal(\n        addresslistVotingProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {ProposalQueryParams} params\n   *       - daoAddressOrEns\n   *       - limit = 10\n   *       - status\n   *       - skip = 0\n   *       - direction = SortDirection.ASC\n   *       - sortBy = ProposalSortBy.CREATED_AT\n   * @return {Promise<AddresslistVotingProposalListItem[]>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: ProposalQueryParams): Promise<AddresslistVotingProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch {\n          throw new InvalidAddressOrEnsError();\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n\n    const query = QueryAddresslistVotingProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"AddresslistVoting proposals\";\n    type T = {\n      addresslistVotingProposals: SubgraphAddresslistVotingProposalListItem[];\n    };\n    const { addresslistVotingProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      addresslistVotingProposals.map(\n        async (\n          proposal: SubgraphAddresslistVotingProposalListItem,\n        ): Promise<AddresslistVotingProposalListItem> => {\n          // format in the metadata field\n          if (!proposal.metadata) {\n            return toAddresslistVotingProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            // Avoid blocking Promise.all if this individual fetch takes too long\n            const stringMetadata = await promiseWithTimeout(\n              this.ipfs.fetchString(metadataCid),\n              MULTI_FETCH_TIMEOUT,\n            );\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toAddresslistVotingProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toAddresslistVotingProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toAddresslistVotingProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n\n  /**\n   * Returns the settings of a plugin given the address of the plugin instance\n   *\n   * @param {string} pluginAddress\n   * @param {number} blockNumber\n   * @return {(Promise<VotingSettings | null>)}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n    blockNumber?: number,\n  ): Promise<VotingSettings | null> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryAddresslistVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n      block: blockNumber ? { number: blockNumber } : null,\n    };\n    const name = \"AddresslistVoting settings\";\n    type T = { addresslistVotingPlugin: SubgraphVotingSettings };\n    const { addresslistVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!addresslistVotingPlugin) {\n      return null;\n    }\n    return {\n      minDuration: parseInt(addresslistVotingPlugin.minDuration),\n      supportThreshold: decodeRatio(\n        BigInt(addresslistVotingPlugin.supportThreshold),\n        6,\n      ),\n      minParticipation: decodeRatio(\n        BigInt(addresslistVotingPlugin.minParticipation),\n        6,\n      ),\n      minProposerVotingPower: BigInt(\n        addresslistVotingPlugin.minProposerVotingPower,\n      ),\n      votingMode: addresslistVotingPlugin.votingMode,\n    };\n  }\n\n  /**\n   * Checks if a given address is a member of the AddresslistVoting contract.\n   * @param params - The parameters for the isMember method.\n   * @param params.pluginAddress - The address of the plugin.\n   * @param params.address - The address to check.\n   * @param params.blockNumber - The block number for specifying a specific block.\n   * @returns {boolean} A boolean indicating whether the address is a member or not.\n   */\n  public async isMember(params: IsMemberParams): Promise<boolean> {\n    IsMemberSchema.strict().validateSync(params);\n    const query = QueryAddresslistVotingIsMember;\n    const name = \"AddresslistVoting isMember\";\n    type T = { addresslistVotingVoter: { id: string } };\n    const { addresslistVotingVoter } = await this.graphql.request<T>({\n      query,\n      params: {\n        id:\n          `${params.pluginAddress.toLowerCase()}_${params.address.toLowerCase()}`,\n        blockHeight: params.blockNumber ? { number: params.blockNumber } : null,\n      },\n      name,\n    });\n    return !!addresslistVotingVoter;\n  }\n}\n","import { isAddress } from \"@ethersproject/address\";\nimport {\n  encodeUpdateVotingSettingsAction,\n  VotingSettings,\n  votingSettingsToContract,\n} from \"../../../client-common\";\nimport { IAddresslistVotingClientEncoding } from \"../interfaces\";\nimport { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport { AddresslistVotingPluginInstall } from \"../../types\";\nimport {\n  ClientCore,\n  DaoAction,\n  getNamedTypesFromMetadata,\n  getNetwork,\n  hexToBytes,\n  InvalidAddressError,\n  PluginInstallItem,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-client-common\";\nimport { INSTALLATION_ABI } from \"../constants\";\nimport {\n  contracts,\n  getNetworkNameByAlias,\n  SupportedVersions,\n} from \"@aragon/osx-commons-configs\";\n\n/**\n * Encoding module for the SDK AddressList Client\n */\nexport class AddresslistVotingClientEncoding extends ClientCore\n  implements IAddresslistVotingClientEncoding {\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {AddresslistVotingPluginInstall} params\n   * @param {Networkish} network\n   * @return {PluginInstallItem}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  static getPluginInstallItem(\n    params: AddresslistVotingPluginInstall,\n    network: Networkish,\n  ): PluginInstallItem {\n    const networkName = getNetwork(network).name;\n    const aragonNetwork = getNetworkNameByAlias(networkName);\n    if (!aragonNetwork) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    const hexBytes = defaultAbiCoder.encode(\n      getNamedTypesFromMetadata(INSTALLATION_ABI),\n      [\n        votingSettingsToContract(params.votingSettings),\n        params.addresses,\n      ],\n    );\n    const repoAddress = contracts[aragonNetwork][SupportedVersions.V1_3_0]\n      ?.AddresslistVotingRepoProxy?.address;\n    if (!repoAddress) {\n      throw new Error(\"AddresslistVotingRepoProxy address not found\");\n    }\n\n    return {\n      id: repoAddress,\n      data: hexToBytes(hexBytes),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {string} pluginAddress\n   * @param {VotingSettings} params\n   * @return {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public updatePluginSettingsAction(\n    pluginAddress: string,\n    params: VotingSettings,\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO: check if to and value are correct\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: encodeUpdateVotingSettingsAction(params),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that adds addresses to address list\n   *\n   * @param {string} pluginAddress\n   * @param {string[]} members\n   * @return {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public addMembersAction(pluginAddress: string, members: string[]): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    for (const member of members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\n      \"addAddresses\",\n      [members],\n    );\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that removes addresses from the address list\n   *\n   * @param {string} pluginAddress\n   * @param {string[]} members\n   * @return {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public removeMembersAction(\n    pluginAddress: string,\n    members: string[],\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    for (const member of members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\n      \"removeAddresses\",\n      [members],\n    );\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n","import {\n  decodeUpdatePluginSettingsAction,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport { IAddresslistVotingClientDecoding } from \"../interfaces\";\nimport { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\nimport {\n  bytesToHex,\n  ClientCore,\n  getFunctionFragment,\n  InterfaceParams,\n} from \"@aragon/sdk-client-common\";\n\n/**\n * Decoding module for the SDK AddressList Client\n */\nexport class AddresslistVotingClientDecoding extends ClientCore\n  implements IAddresslistVotingClientDecoding {\n  /**\n   * Decodes a dao metadata from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {VotingSettings}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public updatePluginSettingsAction(data: Uint8Array): VotingSettings {\n    return decodeUpdatePluginSettingsAction(data);\n  }\n  /**\n   * Decodes a list of addresses from an encoded add members action\n   *\n   * @param {Uint8Array} data\n   * @return {string[]}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public addMembersAction(data: Uint8Array): string[] {\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\"addAddresses\");\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of addresses from an encoded remove members action\n   *\n   * @param {Uint8Array} data\n   * @return {string[]}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public removeMembersAction(data: Uint8Array): string[] {\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\n      \"removeAddresses\",\n    );\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {(InterfaceParams | null)}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n","import { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\nimport {\n  CreateMajorityVotingProposalParams,\n  VoteProposalParams,\n} from \"../../../client-common\";\nimport { IAddresslistVotingClientEstimation } from \"../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  boolArrayToBitmap,\n  ClientCore,\n  decodeProposalId,\n  GasFeeEstimation,\n  prepareGenericUpdateEstimation,\n  SizeMismatchError,\n} from \"@aragon/sdk-client-common\";\nimport { AddresslistVotingPluginPrepareUpdateParams } from \"../../types\";\nimport {\n  FrameworkContractsNames,\n  NonFrameworkContractsNames,\n} from \"@aragon/osx-commons-configs\";\n\n/**\n * Estimation module the SDK Address List Client\n */\nexport class AddresslistVotingClientEstimation extends ClientCore\n  implements IAddresslistVotingClientEstimation {\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const provider = this.web3.getConnectedSigner();\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      params.pluginAddress,\n      provider,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new SizeMismatchError(\"failSafeActions\", \"actions\");\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimatedGasFee = await addresslistContract.estimateGas\n      .createProposal(\n        toUtf8Bytes(params.metadataUri),\n        params.actions || [],\n        allowFailureMap,\n        Math.round(startTimestamp / 1000),\n        Math.round(endTimestamp / 1000),\n        params.creatorVote || 0,\n        params.executeOnPass || false,\n      );\n    return this.web3.getApproximateGasFee(estimatedGasFee.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of casting a vote on a proposal\n   *\n   * @param {VoteProposalParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async voteProposal(\n    params: VoteProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const provider = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      provider,\n    );\n\n    const estimation = await addresslistContract.estimateGas.vote(\n      id,\n      params.vote,\n      false,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of executing an AddressList proposal\n   *\n   * @param {string} proposalId\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const provider = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      provider,\n    );\n    const estimation = await addresslistContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of preparing an update\n   *\n   * @param {AddresslistVotingPluginPrepareUpdateParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async prepareUpdate(\n    params: AddresslistVotingPluginPrepareUpdateParams,\n  ): Promise<GasFeeEstimation> {\n    return await prepareGenericUpdateEstimation(this.web3, this.graphql, {\n      ...params,\n      pluginSetupProcessorAddress: this.web3.getAddress(\n        FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n      ),\n      pluginRepo: this.web3.getAddress(\n        NonFrameworkContractsNames.ADDRESSLIST_VOTING_REPO_PROXY,\n      ),\n    });\n  }\n}\n","import {\n  IAddresslistVotingClient,\n  IAddresslistVotingClientDecoding,\n  IAddresslistVotingClientEncoding,\n  IAddresslistVotingClientEstimation,\n  IAddresslistVotingClientMethods,\n} from \"./internal/interfaces\";\nimport { AddresslistVotingClientMethods } from \"./internal/client/methods\";\nimport { AddresslistVotingClientEncoding } from \"./internal/client/encoding\";\nimport { AddresslistVotingClientDecoding } from \"./internal/client/decoding\";\nimport { AddresslistVotingClientEstimation } from \"./internal/client/estimation\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport { AddresslistVotingPluginInstall } from \"./types\";\nimport {\n  ClientCore,\n  Context,\n  PluginInstallItem,\n} from \"@aragon/sdk-client-common\";\n\n/**\n * Provider a generic client with high level methods to manage and interact an Address List Voting plugin installed in a DAO\n */\nexport class AddresslistVotingClient extends ClientCore\n  implements IAddresslistVotingClient {\n  public methods: IAddresslistVotingClientMethods;\n  public encoding: IAddresslistVotingClientEncoding;\n  public decoding: IAddresslistVotingClientDecoding;\n  public estimation: IAddresslistVotingClientEstimation;\n\n  constructor(context: Context) {\n    super(context);\n    this.methods = new AddresslistVotingClientMethods(context);\n    this.encoding = new AddresslistVotingClientEncoding(context);\n    this.decoding = new AddresslistVotingClientDecoding(context);\n    this.estimation = new AddresslistVotingClientEstimation(context);\n  }\n\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {AddresslistVotingPluginInstall} params\n     * @param {Networkish} [network=\"mainnet\"]\n     * @return {PluginInstallItem}\n     * @memberof AddresslistVotingClient\n     */\n    getPluginInstallItem: (\n      params: AddresslistVotingPluginInstall,\n      network: Networkish,\n    ): PluginInstallItem =>\n      AddresslistVotingClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingProposal = gql`\nquery TokenVotingProposal($proposalId: ID!) {\n  tokenVotingProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    creationBlockNumber\n    executionDate\n    executionBlockNumber\n    actions {\n      to\n      value\n      data\n    }\n    yes,\n    no,\n    abstain\n    votingMode\n    supportThreshold\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    approvalReached\n    isSignaling\n    executionTxHash\n    voters(first: 1000){\n      voter{\n        address\n      }\n      voteReplaced\n      voteOption\n      votingPower\n    }\n    plugin {\n      token {\n        id\n        name\n        symbol\n        __typename\n        ...on ERC20Contract {\n          decimals\n        }\n        ...on ERC20WrapperContract {\n          decimals\n          underlyingToken{\n            id\n            name\n            symbol\n            decimals\n          }\n        }\n      }\n    }\n    totalVotingPower\n    minVotingPower\n  }\n}\n`;\nexport const QueryTokenVotingProposals = gql`\nquery TokenVotingProposals($where: TokenVotingProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenVotingProposal_orderBy!) {\n  tokenVotingProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    yes,\n    no,\n    abstain\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    approvalReached\n    isSignaling\n    votingMode\n    supportThreshold\n    minVotingPower\n    totalVotingPower\n    actions {\n      to\n      value\n      data\n    }\n    voters{\n      voter{\n        address\n      }\n      voteReplaced\n      voteOption\n      votingPower\n    }\n    plugin{\n      token{\n        id\n        name\n        symbol\n        __typename\n        ...on ERC20Contract {\n          decimals\n        }\n        ...on ERC20WrapperContract {\n          decimals\n          underlyingToken{\n            id\n            name\n            symbol\n            decimals\n          }\n        }\n      }\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingSettings = gql`\nquery TokenVotingSettings($address: ID!,$block: Block_height) {\n  tokenVotingPlugin(id: $address, block: $block){\n    minDuration\n    minProposerVotingPower\n    minParticipation\n    supportThreshold\n    votingMode\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingPlugin = gql`\nquery TokenVotingPlugin($address: ID!) {\n  tokenVotingPlugin(id: $address){\n    token {\n      id\n      name\n      symbol\n      __typename\n      ...on ERC20WrapperContract {\n        decimals\n        underlyingToken{\n          id\n          name\n          symbol\n          decimals\n        }\n      }\n      ...on ERC20Contract {\n        decimals\n      }\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingMembers = gql`\nquery TokenVotingMembers($where: TokenVotingMember_filter!, $block: Block_height, $limit: Int!, $skip: Int!, $sortBy: TokenVotingMember_orderBy!, $direction: OrderDirection!) {\n  tokenVotingMembers(\n    where: $where\n    block: $block\n    first: $limit\n    skip: $skip\n    orderBy: $sortBy\n    orderDirection: $direction\n  ) {\n    address\n    balance\n    votingPower\n    delegatee{\n      address\n    }\n    delegators{\n      address\n      balance\n    }\n  }\n}\n`;\n\nexport const QueryTokenVotingIsMember = gql`\nquery TokenVotingIsMember($id: ID!, $block: Block_height) {\n  tokenVotingMember(\n    id: $id\n    block: $block\n  ) {\n    id\n  }\n}`;\n","import {\n  SubgraphAction,\n  SubgraphVoteValuesMap,\n  VoteValues,\n  votingSettingsToContract,\n} from \"../../client-common\";\nimport {\n  Erc20TokenDetails,\n  Erc20WrapperTokenDetails,\n  Erc721TokenDetails,\n  MintTokenParams,\n  TokenVotingMember,\n  TokenVotingPluginInstall,\n  TokenVotingProposal,\n  TokenVotingProposalListItem,\n} from \"../types\";\nimport {\n  ContractMintTokenParams,\n  ContractTokenVotingInitParams,\n  SubgraphContractType,\n  SubgraphErc20Token,\n  SubgraphErc20WrapperToken,\n  SubgraphErc721Token,\n  SubgraphTokenVotingMember,\n  SubgraphTokenVotingProposal,\n  SubgraphTokenVotingProposalListItem,\n  SubgraphTokenVotingVoterListItem,\n} from \"./types\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Result } from \"@ethersproject/abi\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport {\n  DaoAction,\n  decodeRatio,\n  getCompactProposalId,\n  hexToBytes,\n  InvalidProposalStatusError,\n  ProposalMetadata,\n  ProposalStatus,\n  TokenType,\n} from \"@aragon/sdk-client-common\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { abi as ERC_20_ABI } from \"@openzeppelin/contracts/build/contracts/ERC20.json\";\nimport { JsonRpcProvider } from \"@ethersproject/providers\";\n\nexport function toTokenVotingProposal(\n  proposal: SubgraphTokenVotingProposal,\n  metadata: ProposalMetadata,\n): TokenVotingProposal {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  let usedVotingWeight: bigint = BigInt(0);\n  for (const voter of proposal.voters) {\n    usedVotingWeight += BigInt(voter.votingPower);\n  }\n  const token = parseToken(proposal.plugin.token);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    metadataHash: proposal.metadata,\n    startDate,\n    endDate,\n    creationDate,\n    creationBlockNumber: parseInt(proposal.creationBlockNumber),\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    executionTxHash: proposal.executionTxHash || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? BigInt(proposal.yes) : BigInt(0),\n      no: proposal.no ? BigInt(proposal.no) : BigInt(0),\n      abstain: proposal.abstain ? BigInt(proposal.abstain) : BigInt(0),\n    },\n    settings: {\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n    },\n    token,\n    usedVotingWeight,\n    totalVotingWeight: BigInt(proposal.totalVotingPower),\n    votes: proposal.voters.map(\n      (voter: SubgraphTokenVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n          weight: BigInt(voter.votingPower),\n        };\n      },\n    ),\n  };\n}\n\nexport function toTokenVotingProposalListItem(\n  proposal: SubgraphTokenVotingProposalListItem,\n  metadata: ProposalMetadata,\n): TokenVotingProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const token = parseToken(proposal.plugin.token);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    settings: {\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    metadataHash: proposal.metadata,\n    totalVotingWeight: BigInt(proposal.totalVotingPower),\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? BigInt(proposal.yes) : BigInt(0),\n      no: proposal.no ? BigInt(proposal.no) : BigInt(0),\n      abstain: proposal.abstain ? BigInt(proposal.abstain) : BigInt(0),\n    },\n    token,\n    votes: proposal.voters.map(\n      (voter: SubgraphTokenVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n          weight: BigInt(voter.votingPower),\n        };\n      },\n    ),\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n  };\n}\n\nexport function mintTokenParamsToContract(\n  params: MintTokenParams,\n): ContractMintTokenParams {\n  return [params.address, BigNumber.from(params.amount)];\n}\n\nexport function mintTokenParamsFromContract(result: Result): MintTokenParams {\n  return {\n    address: result[0],\n    amount: BigInt(result[1]),\n  };\n}\n\nexport function tokenVotingInitParamsToContract(\n  params: TokenVotingPluginInstall,\n): ContractTokenVotingInitParams {\n  let token: [string, string, string] = [\"\", \"\", \"\"];\n  let balances: [string[], BigNumber[]] = [[], []];\n  if (params.newToken) {\n    token = [AddressZero, params.newToken.name, params.newToken.symbol];\n    balances = [\n      params.newToken.balances.map((balance) => balance.address),\n      params.newToken.balances.map(({ balance }) => BigNumber.from(balance)),\n    ];\n  } else if (params.useToken) {\n    token = [\n      params.useToken?.tokenAddress,\n      params.useToken.wrappedToken.name,\n      params.useToken.wrappedToken.symbol,\n    ];\n  }\n  return [\n    votingSettingsToContract(params.votingSettings),\n    token,\n    balances,\n  ];\n}\n\nexport function parseToken(\n  subgraphToken:\n    | SubgraphErc20Token\n    | SubgraphErc721Token\n    | SubgraphErc20WrapperToken,\n): Erc20TokenDetails | Erc721TokenDetails | null {\n  let token:\n    | Erc721TokenDetails\n    | Erc20TokenDetails\n    | Erc20WrapperTokenDetails\n    | null = null;\n  if (subgraphToken.__typename === SubgraphContractType.ERC20) {\n    token = {\n      address: subgraphToken.id,\n      symbol: subgraphToken.symbol,\n      name: subgraphToken.name,\n      decimals: subgraphToken.decimals,\n      type: TokenType.ERC20,\n    };\n  } else if (subgraphToken.__typename === SubgraphContractType.ERC721) {\n    token = {\n      address: subgraphToken.id,\n      symbol: subgraphToken.symbol,\n      name: subgraphToken.name,\n      type: TokenType.ERC721,\n    };\n  } else if (subgraphToken.__typename === SubgraphContractType.ERC20_WRAPPER) {\n    token = {\n      address: subgraphToken.id,\n      symbol: subgraphToken.symbol,\n      name: subgraphToken.name,\n      decimals: subgraphToken.decimals,\n      type: TokenType.ERC20,\n      underlyingToken: {\n        address: subgraphToken.underlyingToken.id,\n        symbol: subgraphToken.underlyingToken.symbol,\n        name: subgraphToken.underlyingToken.name,\n        decimals: subgraphToken.underlyingToken.decimals,\n        type: TokenType.ERC20,\n      },\n    };\n  }\n  return token;\n}\n\nexport function toTokenVotingMember(\n  member: SubgraphTokenVotingMember,\n): TokenVotingMember {\n  return {\n    address: member.address,\n    votingPower: BigInt(member.votingPower),\n    balance: BigInt(member.balance),\n    delegatee: member.delegatee?.address === member.address || !member.delegatee\n      ? null\n      : member.delegatee.address,\n    delegators: member.delegators.filter((delegator) =>\n      delegator.address !== member.address\n    ).map((delegator) => {\n      return {\n        address: delegator.address,\n        balance: BigInt(delegator.balance),\n      };\n    }),\n  };\n}\n\nexport function computeProposalStatus(\n  proposal: SubgraphTokenVotingProposal | SubgraphTokenVotingProposalListItem,\n): ProposalStatus {\n  const now = new Date();\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  // The proposal is executed so the status becomes EXECUTED\n  // independently of the other conditions\n  if (proposal.executed) {\n    return ProposalStatus.EXECUTED;\n  }\n  // The proposal is not executed and the start date is in the future\n  // so the status becomes PENDING\n  if (startDate >= now) {\n    return ProposalStatus.PENDING;\n  }\n  // The proposal is not executed and the start date is in the past.\n  // Accordingly, we check if the proposal reached enough approval\n  // (i.e., that the supportThreshold and minParticipation criteria are both met).\n  // If approvalReached is true and the vote has ended (end date is in the past), it has succeeded.\n  // This applies to normal mode and vote replacement mode.\n  if (proposal.approvalReached && endDate <= now) {\n    return ProposalStatus.SUCCEEDED;\n  }\n  // In early exeuction mode, we calculate if subsequent voting can change the result of the vote.\n  // If not, the proposal is early executable and is therefore succeeded as well.\n  if (proposal.earlyExecutable) {\n    return ProposalStatus.SUCCEEDED;\n  }\n  // The proposal is not executed and the start date is in the past\n  // and the approval threshold is not reached\n  // If the end date is in the future this means that you can still vote\n  // so the status becomes ACTIVE\n  if (now < endDate) {\n    return ProposalStatus.ACTIVE;\n  }\n  // If none of the other conditions are met the status becomes DEFEATED\n  return ProposalStatus.DEFEATED;\n}\n\nexport function computeProposalStatusFilter(status: ProposalStatus) {\n  let where = {};\n  const now = Math.round(new Date().getTime() / 1000).toString();\n  switch (status) {\n    case ProposalStatus.PENDING:\n      where = { startDate_gte: now };\n      break;\n    case ProposalStatus.ACTIVE:\n      where = { startDate_lt: now, endDate_gte: now, executed: false };\n      break;\n    case ProposalStatus.EXECUTED:\n      where = { executed: true };\n      break;\n    case ProposalStatus.SUCCEEDED:\n      where = {\n        or: [\n          { approvalReached: true, endDate_lt: now },\n          { earlyExecutable: true },\n        ],\n      };\n      break;\n    case ProposalStatus.DEFEATED:\n      where = {\n        potentiallyExecutable: false,\n        endDate_lt: now,\n        executed: false,\n      };\n      break;\n    default:\n      throw new InvalidProposalStatusError();\n  }\n  return where;\n}\n\n/**\n * Checks if the given address is an ERC20 token\n * This function is not 100% accurate.\n * It just checks if the token has a balanceOf\n * function and a decimals function\n *\n * @export\n * @param {string} tokenAddress\n * @param {Signer} signer\n * @return {Promise<boolean>}\n */\nexport async function isERC20Token(\n  tokenAddress: string,\n  signer: JsonRpcProvider,\n): Promise<boolean> {\n  const contract = new Contract(\n    tokenAddress,\n    ERC_20_ABI,\n    signer,\n  );\n  try {\n    await Promise.all([\n      contract.balanceOf(AddressZero),\n      contract.decimals(),\n    ]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n","import {\n  IERC20MintableUpgradeable__factory,\n  IGovernanceWrappedERC20__factory,\n  MajorityVotingBase__factory,\n} from \"@aragon/osx-ethers\";\nimport { getInterfaceId, MetadataAbiInput } from \"@aragon/sdk-client-common\";\nimport { abi as IVOTES_ABI } from \"@openzeppelin/contracts/build/contracts/IVotes.json\";\nimport { abi as IVOTES_UPGRADEABLE_ABI } from \"@openzeppelin/contracts-upgradeable/build/contracts/IVotesUpgradeable.json\";\nimport { abi as ERC165_ABI } from \"@openzeppelin/contracts/build/contracts/ERC165.json\";\nimport { Interface } from \"@ethersproject/abi\";\n\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  MajorityVotingBase__factory.createInterface().getFunction(\n    \"updateVotingSettings\",\n  )\n    .format(\"minimal\"),\n  IERC20MintableUpgradeable__factory.createInterface().getFunction(\"mint\")\n    .format(\"minimal\"),\n];\n\n// TODO:\n// use abi from plugin metadata\nexport const UPDATE_ABI: { [build: number]: MetadataAbiInput[] } = {\n  1: [],\n};\n// TODO:\n// use abi from plugin metadata\nexport const INSTALLATION_ABI: MetadataAbiInput[] = [\n  {\n    components: [\n      {\n        internalType: \"enum MajorityVotingBase.VotingMode\",\n        name: \"votingMode\",\n        type: \"uint8\",\n        description:\n          \"A parameter to select the vote mode. In standard mode (0), early execution and vote replacement are disabled. In early execution mode (1), a proposal can be executed early before the end date if the vote outcome cannot mathematically change by more voters voting. In vote replacement mode (2), voters can change their vote multiple times and only the latest vote option is tallied.\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"supportThreshold\",\n        type: \"uint32\",\n        description:\n          \"The support threshold value. Its value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`.\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"minParticipation\",\n        type: \"uint32\",\n        description:\n          \"The minimum participation value. Its value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`.\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"minDuration\",\n        type: \"uint64\",\n        description: \"The minimum duration of the proposal vote in seconds.\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minProposerVotingPower\",\n        type: \"uint256\",\n        description: \"The minimum voting power required to create a proposal.\",\n      },\n    ],\n    internalType: \"struct MajorityVotingBase.VotingSettings\",\n    name: \"votingSettings\",\n    type: \"tuple\",\n    description:\n      \"The voting settings that will be enforced when proposals are created.\",\n  },\n  {\n    components: [\n      {\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n        description:\n          \"The token address. If this is `address(0)`, a new `GovernanceERC20` token is deployed. If not, the existing token is wrapped as an `GovernanceWrappedERC20`.\",\n      },\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n        description:\n          \"The token name. This parameter is only relevant if the token address is `address(0)`.\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n        description:\n          \"The token symbol. This parameter is only relevant if the token address is `address(0)`.\",\n      },\n    ],\n    internalType: \"struct TokenVotingSetup.TokenSettings\",\n    name: \"tokenSettings\",\n    type: \"tuple\",\n    description:\n      \"The token settings that either specify an existing ERC-20 token (`token = address(0)`) or the name and symbol of a new `GovernanceERC20` token to be created.\",\n  },\n  {\n    components: [\n      {\n        internalType: \"address[]\",\n        name: \"receivers\",\n        type: \"address[]\",\n        description: \"The receivers of the tokens.\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amounts\",\n        type: \"uint256[]\",\n        description: \"The amounts of tokens to be minted for each receiver.\",\n      },\n    ],\n    internalType: \"struct GovernanceERC20.MintSettings\",\n    name: \"mintSettings\",\n    type: \"tuple\",\n    description:\n      \"The token mint settings struct containing the `receivers` and `amounts`.\",\n  },\n];\n\nexport const ERC165_INTERFACE_ID = getInterfaceId(\n  new Interface(ERC165_ABI),\n);\n\nexport const GOVERNANCE_SUPPORTED_INTERFACE_IDS = [\n  getInterfaceId(new Interface(IVOTES_UPGRADEABLE_ABI)),\n  getInterfaceId(new Interface(IVOTES_ABI)),\n  getInterfaceId(IGovernanceWrappedERC20__factory.createInterface()),\n];\n","import {\n  PrepareUpdateParams,\n  ProposalBase,\n  ProposalListItemBase,\n  VersionTag,\n} from \"@aragon/sdk-client-common\";\nimport { CreateProposalBaseParams } from \"../client-common\";\n\n/* Installation */\nexport type MultisigPluginInstallParams = MultisigPluginSettings;\n\nexport type MultisigPluginPrepareInstallationParams = {\n  settings: MultisigPluginSettings;\n  daoAddressOrEns: string;\n  versionTag?: VersionTag;\n};\n\nexport type MultisigVotingSettings = {\n  minApprovals: number;\n  onlyListed: boolean;\n};\n\nexport type MultisigPluginSettings = {\n  members: string[];\n  votingSettings: MultisigVotingSettings;\n};\n/* update members */\nexport type UpdateAddressesParams = {\n  pluginAddress: string;\n  members: string[];\n};\nexport type RemoveAddressesParams = UpdateAddressesParams;\nexport type AddAddressesParams = UpdateAddressesParams;\n\n/* update voting settings */\nexport type UpdateMultisigVotingSettingsParams = {\n  pluginAddress: string;\n  votingSettings: MultisigVotingSettings;\n};\n\n/* Create Proposal */\nexport type CreateMultisigProposalParams = CreateProposalBaseParams & {\n  approve?: boolean;\n  tryExecution?: boolean;\n  startDate?: Date;\n  /** Date at which the proposal will expire if not approved */\n  endDate?: Date;\n};\n\n/* Approve Proposal */\nexport type ApproveMultisigProposalParams = {\n  proposalId: string;\n  tryExecution: boolean;\n};\n\nexport type CanApproveParams = {\n  proposalId: string;\n  approverAddressOrEns: string;\n};\n\nexport enum ApproveProposalStep {\n  APPROVING = \"approving\",\n  DONE = \"done\",\n}\n\nexport type ApproveProposalStepValue =\n  | { key: ApproveProposalStep.APPROVING; txHash: string }\n  | { key: ApproveProposalStep.DONE };\n\n/* Proposal */\n\nexport type MultisigProposalListItem = ProposalListItemBase & {\n  approvals: string[];\n  settings: MultisigVotingSettings;\n};\n\nexport type MultisigProposal = ProposalBase & {\n  approvals: string[];\n  settings: MultisigVotingSettings;\n};\n\n/* Prepare Update */\nexport type MultisigPluginPrepareUpdateParams = Omit<\n  PrepareUpdateParams,\n  \"pluginRepo\"\n>;\n","import { isAddress } from \"@ethersproject/address\";\nimport {\n  CanVoteParams,\n  CreateMajorityVotingProposalParams,\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalQueryParams,\n  ProposalSortBy,\n  SubgraphVotingSettings,\n  VoteProposalParams,\n  VoteProposalStep,\n  VoteProposalStepValue,\n  VotingSettings,\n} from \"../../../client-common\";\nimport {\n  DelegateTokensParams,\n  DelegateTokensStep,\n  DelegateTokensStepValue,\n  Erc20TokenDetails,\n  Erc20WrapperTokenDetails,\n  Erc721TokenDetails,\n  TokenVotingMember,\n  TokenVotingPluginPrepareInstallationParams,\n  TokenVotingPluginPrepareUpdateParams,\n  TokenVotingProposal,\n  TokenVotingProposalListItem,\n  UndelegateTokensStepValue,\n  UnwrapTokensParams,\n  UnwrapTokensStep,\n  UnwrapTokensStepValue,\n  WrapTokensParams,\n  WrapTokensStep,\n  WrapTokensStepValue,\n} from \"../../types\";\nimport {\n  SubgraphContractType,\n  SubgraphErc20Token,\n  SubgraphErc20WrapperToken,\n  SubgraphErc721Token,\n  SubgraphTokenVotingMember,\n  SubgraphTokenVotingProposal,\n  SubgraphTokenVotingProposalListItem,\n  TokenVotingMembersQueryParams,\n  TokenVotingMembersSortBy,\n  TokenVotingTokenCompatibility,\n} from \"../types\";\nimport {\n  QueryTokenVotingIsMember,\n  QueryTokenVotingMembers,\n  QueryTokenVotingPlugin,\n  QueryTokenVotingProposal,\n  QueryTokenVotingProposals,\n  QueryTokenVotingSettings,\n} from \"../graphql-queries\";\nimport {\n  computeProposalStatusFilter,\n  isERC20Token,\n  tokenVotingInitParamsToContract,\n  toTokenVotingMember,\n  toTokenVotingProposal,\n  toTokenVotingProposalListItem,\n} from \"../utils\";\nimport {\n  GovernanceERC20__factory,\n  GovernanceWrappedERC20__factory,\n  TokenVoting__factory,\n} from \"@aragon/osx-ethers\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { ITokenVotingClientMethods } from \"../interfaces\";\nimport {\n  boolArrayToBitmap,\n  ClientCore,\n  decodeProposalId,\n  decodeRatio,\n  EMPTY_PROPOSAL_METADATA_LINK,\n  encodeProposalId,\n  findLog,\n  getExtendedProposalId,\n  InvalidAddressError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  IsMemberParams,\n  IsMemberSchema,\n  isProposalId,\n  MULTI_FETCH_TIMEOUT,\n  NoProviderError,\n  NotAContractError,\n  prepareGenericInstallation,\n  prepareGenericUpdate,\n  PrepareInstallationStepValue,\n  PrepareUpdateStepValue,\n  promiseWithTimeout,\n  ProposalCreationError,\n  ProposalMetadata,\n  resolveIpfsCid,\n  SizeMismatchError,\n  SortDirection,\n  TokenType,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-client-common\";\nimport {\n  ERC165_INTERFACE_ID,\n  GOVERNANCE_SUPPORTED_INTERFACE_IDS,\n  INSTALLATION_ABI,\n  UPDATE_ABI,\n} from \"../constants\";\nimport { abi as ERC165_ABI } from \"@openzeppelin/contracts/build/contracts/ERC165.json\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport {\n  FrameworkContractsNames,\n  getNetworkNameByAlias,\n  NonFrameworkContractsNames,\n} from \"@aragon/osx-commons-configs\";\n\n/**\n * Methods module the SDK TokenVoting Client\n */\nexport class TokenVotingClientMethods extends ClientCore\n  implements ITokenVotingClientMethods {\n  /**\n   * Creates a new proposal on the given TokenVoting plugin contract\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new SizeMismatchError(\"failSafeActions\", \"actions\");\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await tokenVotingContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n      params.creatorVote || 0,\n      params.executeOnPass || false,\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const tokenVotingContractInterface = TokenVoting__factory.createInterface();\n    const log = findLog(\n      receipt,\n      tokenVotingContractInterface,\n      \"ProposalCreated\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = tokenVotingContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Cast a vote on the given proposal using the client's wallet. Depending on the proposal settings, an affirmative vote may execute the proposal's actions on the DAO.\n   *\n   * @param {VoteProposalParams} params\n   * @param {VoteValues} vote\n   * @return {AsyncGenerator<VoteProposalStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *voteProposal(\n    params: VoteProposalParams,\n  ): AsyncGenerator<VoteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await tokenVotingContract.vote(\n      id,\n      params.vote,\n      false,\n    );\n\n    yield {\n      key: VoteProposalStep.VOTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: VoteProposalStep.DONE,\n    };\n  }\n  /**\n   * Executes the given proposal, provided that it has already passed\n   *\n   * @param {string} proposalId\n   * @return {AsyncGenerator<ExecuteProposalStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const tx = await tokenVotingContract.execute(id);\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n\n  /**\n   * Prepares the installation of a token voting plugin in a given dao\n   *\n   * @param {TokenVotingPluginPrepareInstallationParams} params\n   * @return {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async *prepareInstallation(\n    params: TokenVotingPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const network = await this.web3.getProvider().getNetwork();\n    const networkName = network.name;\n    const aragonNetwork = getNetworkNameByAlias(networkName);\n    if (!aragonNetwork) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    yield* prepareGenericInstallation(this.web3, {\n      daoAddressOrEns: params.daoAddressOrEns,\n      pluginRepo: this.web3.getAddress(\n        NonFrameworkContractsNames.TOKEN_VOTING_REPO_PROXY,\n      ),\n      version: params.versionTag,\n      installationAbi: INSTALLATION_ABI,\n      installationParams: tokenVotingInitParamsToContract(params.settings),\n      pluginSetupProcessorAddress: this.web3.getAddress(\n        FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n      ),\n    });\n  }\n  /**\n   * Prepares the update of a token voting plugin in a given dao\n   *\n   * @param {TokenVotingPluginPrepareUpdateParams} params\n   * @return {AsyncGenerator<PrepareUpdateStepValue>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async *prepareUpdate(\n    params: TokenVotingPluginPrepareUpdateParams,\n  ): AsyncGenerator<PrepareUpdateStepValue> {\n    yield* prepareGenericUpdate(this.web3, this.graphql, {\n      ...params,\n      pluginRepo: this.web3.getAddress(\n        NonFrameworkContractsNames.TOKEN_VOTING_REPO_PROXY,\n      ),\n      updateAbi: UPDATE_ABI[params.newVersion.build] ||\n        params.updateAbi || [],\n      pluginSetupProcessorAddress: this.web3.getAddress(\n        FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n      ),\n    });\n  }\n\n  public async *wrapTokens(\n    params: WrapTokensParams,\n  ): AsyncGenerator<WrapTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!isAddress(params.wrappedTokenAddress)) {\n      throw new InvalidAddressError();\n    }\n    const wrappedErc20Contract = GovernanceWrappedERC20__factory.connect(\n      params.wrappedTokenAddress,\n      signer,\n    );\n\n    const account = await signer.getAddress();\n\n    const tx = await wrappedErc20Contract.depositFor(\n      account,\n      params.amount,\n    );\n\n    yield {\n      key: WrapTokensStep.WRAPPING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: WrapTokensStep.DONE,\n    };\n  }\n  public async *unwrapTokens(\n    params: UnwrapTokensParams,\n  ): AsyncGenerator<UnwrapTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!isAddress(params.wrappedTokenAddress)) {\n      throw new InvalidAddressError();\n    }\n    const wrappedErc20Contract = GovernanceWrappedERC20__factory.connect(\n      params.wrappedTokenAddress,\n      signer,\n    );\n\n    const account = await signer.getAddress();\n\n    const tx = await wrappedErc20Contract.withdrawTo(\n      account,\n      params.amount,\n    );\n\n    yield {\n      key: UnwrapTokensStep.UNWRAPPING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: UnwrapTokensStep.DONE,\n    };\n  }\n  /**\n   * Delegates all the signer's voting power to a delegatee\n   *\n   * @param {DelegateTokensParams} params\n   * @return {AsyncGenerator<DelegateTokensStepValue>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async *delegateTokens(\n    params: DelegateTokensParams,\n  ): AsyncGenerator<DelegateTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const governanceErc20Contract = GovernanceERC20__factory.connect(\n      params.tokenAddress,\n      signer,\n    );\n    const tx = await governanceErc20Contract.delegate(params.delegatee);\n    yield {\n      key: DelegateTokensStep.DELEGATING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: DelegateTokensStep.DONE,\n    };\n  }\n  /**\n   * Delegates all the signer's tokens back to itself\n   *\n   * @param {string} tokenAddress\n   * @return {AsyncGenerator<UndelegateTokensStepValue>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async *undelegateTokens(\n    tokenAddress: string,\n  ): AsyncGenerator<UndelegateTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    yield* this.delegateTokens({\n      tokenAddress,\n      delegatee: await signer.getAddress(),\n    });\n  }\n  /**\n   * Retrieves the current signer's delegatee for the given token\n   *\n   * @param {string} tokenAddress\n   * @return {Promise<string | null>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async getDelegatee(tokenAddress: string): Promise<string | null> {\n    const signer = this.web3.getConnectedSigner();\n    const governanceErc20Contract = GovernanceERC20__factory.connect(\n      tokenAddress,\n      signer,\n    );\n    const address = await signer.getAddress();\n    const delegatee = await governanceErc20Contract.delegates(address);\n    return address === delegatee ? null : delegatee;\n  }\n\n  /**\n   * Checks if an user can vote in a proposal\n   *\n   * @param {CanVoteParams} params\n   * @returns   {Promise<boolean>}\n   */\n  public async canVote(params: CanVoteParams): Promise<boolean> {\n    const provider = this.web3.getProvider();\n\n    if (!isAddress(params.voterAddressOrEns)) {\n      throw new InvalidAddressError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      provider,\n    );\n    return tokenVotingContract.callStatic.canVote(\n      id,\n      params.voterAddressOrEns,\n      params.vote,\n    );\n  }\n\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {Promise<boolean>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const provider = this.web3.getProvider();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      provider,\n    );\n\n    return tokenVotingContract.canExecute(id);\n  }\n  /**\n   * Returns the list of wallet addresses holding tokens from the underlying Token contract used by the plugin\n   *\n   * @param {MembersQueryParams} params\n   *     - pluginAddress\n   *     - blockNumber\n   *     - limit = 10\n   *     - skip = 0\n   *     - direction = SortDirection.ASC\n   *     - sortBy = MembersSortBy.ADDRESS\n   * @return {Promise<string[]>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async getMembers({\n    pluginAddress,\n    blockNumber,\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = TokenVotingMembersSortBy.VOTING_POWER,\n  }: TokenVotingMembersQueryParams): Promise<TokenVotingMember[]> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingMembers;\n    const params = {\n      where: { plugin: pluginAddress.toLowerCase() },\n      block: blockNumber ? { number: blockNumber } : null,\n      skip,\n      limit,\n      direction,\n      sortBy,\n    };\n    const name = \"TokenVoting members\";\n    type T = { tokenVotingMembers: SubgraphTokenVotingMember[] };\n    const { tokenVotingMembers } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return tokenVotingMembers.map((\n      member: SubgraphTokenVotingMember,\n    ) => toTokenVotingMember(member));\n  }\n\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {Promise<TokenVotingProposal>}\n   * @memberof TokenVotingClient\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<TokenVotingProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryTokenVotingProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"TokenVoting proposal\";\n    type T = { tokenVotingProposal: SubgraphTokenVotingProposal };\n    const { tokenVotingProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingProposal) {\n      return null;\n    } else if (!tokenVotingProposal.metadata) {\n      return toTokenVotingProposal(\n        tokenVotingProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    // format in the metadata field\n    try {\n      const metadataCid = resolveIpfsCid(tokenVotingProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toTokenVotingProposal(tokenVotingProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toTokenVotingProposal(\n          tokenVotingProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toTokenVotingProposal(\n        tokenVotingProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {ProposalQueryParams} params\n   * @return {Promise<TokenVotingProposalListItem[]>}\n   * @memberof TokenVotingClient\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: ProposalQueryParams): Promise<TokenVotingProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch (e) {\n          throw new InvalidAddressOrEnsError(e);\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n    const query = QueryTokenVotingProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"TokenVoting proposals\";\n    type T = { tokenVotingProposals: SubgraphTokenVotingProposalListItem[] };\n    const { tokenVotingProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      tokenVotingProposals.map(\n        async (\n          proposal: SubgraphTokenVotingProposalListItem,\n        ): Promise<TokenVotingProposalListItem> => {\n          // format in the metadata field\n          if (!proposal.metadata) {\n            return toTokenVotingProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            // Avoid blocking Promise.all if this individual fetch takes too long\n            const stringMetadata = await promiseWithTimeout(\n              this.ipfs.fetchString(metadataCid),\n              MULTI_FETCH_TIMEOUT,\n            );\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toTokenVotingProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toTokenVotingProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toTokenVotingProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n\n  /**\n   * Returns the settings of a plugin given the address of the plugin instance\n   *\n   * @param {string} pluginAddress\n   * @param {number} blockNumber\n   * @return {Promise<VotingSettings>}\n   * @memberof TokenVotingClient\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n    blockNumber?: number,\n  ): Promise<VotingSettings | null> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n      block: blockNumber ? { number: blockNumber } : null,\n    };\n    const name = \"TokenVoting settings\";\n    type T = { tokenVotingPlugin: SubgraphVotingSettings };\n    const { tokenVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingPlugin) {\n      return null;\n    }\n    return {\n      minDuration: parseInt(tokenVotingPlugin.minDuration),\n      supportThreshold: decodeRatio(\n        BigInt(tokenVotingPlugin.supportThreshold),\n        6,\n      ),\n      minParticipation: decodeRatio(\n        BigInt(tokenVotingPlugin.minParticipation),\n        6,\n      ),\n      minProposerVotingPower: BigInt(\n        tokenVotingPlugin.minProposerVotingPower,\n      ),\n      votingMode: tokenVotingPlugin.votingMode,\n    };\n  }\n\n  /**\n   * Returns the details of the token used in a specific plugin instance\n   *\n   * @param {string} pluginAddress\n   * @return {Promise<Erc20TokenDetails | null>}\n   * @memberof TokenVotingClient\n   */\n  public async getToken(\n    pluginAddress: string,\n  ): Promise<\n    Erc20TokenDetails | Erc721TokenDetails | Erc20WrapperTokenDetails | null\n  > {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingPlugin;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"TokenVoting token\";\n    type T = {\n      tokenVotingPlugin: {\n        token:\n          | SubgraphErc20Token\n          | SubgraphErc721Token\n          | SubgraphErc20WrapperToken;\n      };\n    };\n    const { tokenVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingPlugin) {\n      return null;\n    }\n    let token:\n      | SubgraphErc20Token\n      | SubgraphErc721Token\n      | SubgraphErc20WrapperToken = tokenVotingPlugin.token;\n    // type erc20\n    if (token.__typename === SubgraphContractType.ERC20) {\n      return {\n        address: token.id,\n        name: token.name,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        type: TokenType.ERC20,\n      };\n      // type erc721\n    } else if (token.__typename === SubgraphContractType.ERC721) {\n      return {\n        address: token.id,\n        name: token.name,\n        symbol: token.symbol,\n        type: TokenType.ERC721,\n      };\n      // type erc20Wrapper\n    } else if (token.__typename === SubgraphContractType.ERC20_WRAPPER) {\n      return {\n        address: token.id,\n        name: token.name,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        underlyingToken: {\n          address: token.underlyingToken.id,\n          name: token.underlyingToken.name,\n          symbol: token.underlyingToken.symbol,\n          decimals: token.underlyingToken.decimals,\n          type: TokenType.ERC20,\n        },\n        type: TokenType.ERC20,\n      };\n    }\n    return null;\n  }\n\n  /**\n   * Checks if the given token is compatible with the TokenVoting plugin\n   *\n   * @param {string} tokenAddress\n   * @return {Promise<TokenVotingTokenCompatibility>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async isTokenVotingCompatibleToken(\n    tokenAddress: string,\n  ): Promise<TokenVotingTokenCompatibility> {\n    // check if is address\n    if (!isAddress(tokenAddress) || tokenAddress === AddressZero) {\n      throw new InvalidAddressError();\n    }\n    const provider = this.web3.getProvider();\n    // check if is a contract\n    if (await provider.getCode(tokenAddress) === \"0x\") {\n      throw new NotAContractError();\n    }\n    const contract = new Contract(\n      tokenAddress,\n      ERC165_ABI,\n      provider,\n    );\n\n    if (!await isERC20Token(tokenAddress, provider)) {\n      return TokenVotingTokenCompatibility.INCOMPATIBLE;\n    }\n    try {\n      if (!await contract.supportsInterface(ERC165_INTERFACE_ID)) {\n        return TokenVotingTokenCompatibility.NEEDS_WRAPPING;\n      }\n      for (const interfaceId of GOVERNANCE_SUPPORTED_INTERFACE_IDS) {\n        const isSupported = await contract.supportsInterface(interfaceId);\n        if (isSupported) {\n          return TokenVotingTokenCompatibility.COMPATIBLE;\n        }\n      }\n      return TokenVotingTokenCompatibility.NEEDS_WRAPPING;\n    } catch (e) {\n      return TokenVotingTokenCompatibility.NEEDS_WRAPPING;\n    }\n  }\n  /**\n   * Checks if a given address is a member of the tokenVoting contract.\n   * @param params - The parameters for the isMember method.\n   * @param params.pluginAddress - The address of the plugin.\n   * @param params.address - The address to check.\n   * @param params.blockNumber - The block number for specifying a specific block.\n   * @returns {boolean} A boolean indicating whether the address is a member or not.\n   */\n  public async isMember(params: IsMemberParams): Promise<boolean> {\n    IsMemberSchema.strict().validateSync(params);\n    const query = QueryTokenVotingIsMember;\n    const name = \"TokenVoting isMember\";\n    type T = { tokenVotingMember: { id: string } };\n    const { tokenVotingMember } = await this.graphql.request<T>({\n      query,\n      params: {\n        id:\n          `${params.pluginAddress.toLowerCase()}_${params.address.toLowerCase()}`,\n        blockHeight: params.blockNumber ? { number: params.blockNumber } : null,\n      },\n      name,\n    });\n    return !!tokenVotingMember;\n  }\n}\n","import {\n  encodeUpdateVotingSettingsAction,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { ITokenVotingClientEncoding } from \"../interfaces\";\nimport { MintTokenParams, TokenVotingPluginInstall } from \"../../types\";\nimport { IERC20MintableUpgradeable__factory } from \"@aragon/osx-ethers\";\nimport {\n  mintTokenParamsToContract,\n  tokenVotingInitParamsToContract,\n} from \"../utils\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport {\n  ClientCore,\n  DaoAction,\n  getNamedTypesFromMetadata,\n  getNetwork,\n  hexToBytes,\n  InvalidAddressError,\n  PluginInstallItem,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-client-common\";\nimport { INSTALLATION_ABI } from \"../constants\";\nimport {\n  contracts,\n  getNetworkNameByAlias,\n  SupportedVersions,\n} from \"@aragon/osx-commons-configs\";\n\n/**\n * Encoding module the SDK TokenVoting Client\n */\nexport class TokenVotingClientEncoding extends ClientCore\n  implements ITokenVotingClientEncoding {\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {TokenVotingPluginInstall} params\n   * @param {Networkish} network\n   * @return {PluginInstallItem}\n   * @memberof TokenVotingClientEncoding\n   */\n  static getPluginInstallItem(\n    params: TokenVotingPluginInstall,\n    network: Networkish,\n  ): PluginInstallItem {\n    const networkName = getNetwork(network).name;\n    const aragonNetwork = getNetworkNameByAlias(networkName);\n    if (!aragonNetwork) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    const args = tokenVotingInitParamsToContract(params);\n    const hexBytes = defaultAbiCoder.encode(\n      getNamedTypesFromMetadata(INSTALLATION_ABI),\n      args,\n    );\n\n    const repoAddress = contracts[aragonNetwork][SupportedVersions.V1_3_0]\n      ?.TokenVotingRepoProxy?.address;\n    if (!repoAddress) {\n      throw new Error();\n    }\n    return {\n      id: repoAddress,\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {string} pluginAddress\n   * @param {VotingSettings} params\n   * @return {DaoAction}\n   * @memberof TokenVotingClientEncoding\n   */\n  public updatePluginSettingsAction(\n    pluginAddress: string,\n    params: VotingSettings,\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO: check if to and value are correct\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: encodeUpdateVotingSettingsAction(params),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that mints an amount of ERC-20 tokens to an address\n   *\n   * @param {string} minterAddress\n   * @param {MintTokenParams} params\n   * @return {DaoAction}\n   * @memberof TokenVotingClientEncoding\n   */\n  public mintTokenAction(\n    minterAddress: string,\n    params: MintTokenParams,\n  ): DaoAction {\n    if (!isAddress(minterAddress) || !isAddress(params.address)) {\n      throw new InvalidAddressError();\n    }\n    const votingInterface = IERC20MintableUpgradeable__factory\n      .createInterface();\n    const args = mintTokenParamsToContract(params);\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\"mint\", args);\n    return {\n      to: minterAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n","import {\n  decodeUpdatePluginSettingsAction,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport { MintTokenParams } from \"../../types\";\nimport { ITokenVotingClientDecoding } from \"../interfaces\";\nimport { IERC20MintableUpgradeable__factory } from \"@aragon/osx-ethers\";\nimport { mintTokenParamsFromContract } from \"../utils\";\nimport {\n  bytesToHex,\n  ClientCore,\n  getFunctionFragment,\n  InterfaceParams,\n} from \"@aragon/sdk-client-common\";\n\n/**\n * Decoding module the SDK TokenVoting Client\n */\nexport class TokenVotingClientDecoding extends ClientCore\n  implements ITokenVotingClientDecoding {\n  /**\n   * Decodes a dao metadata from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {VotingSettings}\n   * @memberof TokenVotingClientDecoding\n   */\n  public updatePluginSettingsAction(data: Uint8Array): VotingSettings {\n    return decodeUpdatePluginSettingsAction(data);\n  }\n  /**\n   * Decodes the mint token params from an encoded mint token action\n   *\n   * @param {Uint8Array} data\n   * @return {MintTokenParams}\n   * @memberof TokenVotingClientDecoding\n   */\n  public mintTokenAction(data: Uint8Array): MintTokenParams {\n    const votingInterface = IERC20MintableUpgradeable__factory\n      .createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\"mint\");\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return mintTokenParamsFromContract(result);\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {(InterfaceParams | null)}\n   * @memberof TokenVotingClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n","import {\n  GovernanceERC20__factory,\n  TokenVoting__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  CreateMajorityVotingProposalParams,\n  VoteProposalParams,\n} from \"../../../client-common\";\nimport { ITokenVotingClientEstimation } from \"../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  DelegateTokensParams,\n  TokenVotingPluginPrepareUpdateParams,\n} from \"../../types\";\nimport {\n  boolArrayToBitmap,\n  ClientCore,\n  decodeProposalId,\n  GasFeeEstimation,\n  prepareGenericUpdateEstimation,\n  SizeMismatchError,\n} from \"@aragon/sdk-client-common\";\nimport {\n  FrameworkContractsNames,\n  NonFrameworkContractsNames,\n} from \"@aragon/osx-commons-configs\";\n/**\n * Estimation module the SDK TokenVoting Client\n */\nexport class TokenVotingClientEstimation extends ClientCore\n  implements ITokenVotingClientEstimation {\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const provider = this.web3.getConnectedSigner();\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      params.pluginAddress,\n      provider,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new SizeMismatchError(\"failSafeActions\", \"actions\");\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimatedGasFee = await tokenVotingContract.estimateGas\n      .createProposal(\n        toUtf8Bytes(params.metadataUri),\n        params.actions || [],\n        allowFailureMap,\n        Math.round(startTimestamp / 1000),\n        Math.round(endTimestamp / 1000),\n        params.creatorVote || 0,\n        params.executeOnPass || false,\n      );\n    return this.web3.getApproximateGasFee(estimatedGasFee.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of casting a vote on a proposal\n   *\n   * @param {VoteProposalParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async voteProposal(\n    params: VoteProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const provider = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      provider,\n    );\n\n    const estimation = await tokenVotingContract.estimateGas.vote(\n      id,\n      params.vote,\n      false,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of executing a TokenVoting proposal\n   *\n   * @param {string} proposalId\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const provider = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      provider,\n    );\n    const estimation = await tokenVotingContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of delegating voting power to a delegatee\n   *\n   * @param {DelegateTokensParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async delegateTokens(\n    params: DelegateTokensParams,\n  ): Promise<GasFeeEstimation> {\n    const provider = this.web3.getConnectedSigner();\n    const governanceErc20Contract = GovernanceERC20__factory.connect(\n      params.tokenAddress,\n      provider,\n    );\n    const estimation = await governanceErc20Contract.estimateGas.delegate(\n      params.delegatee,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of undelegating voting power\n   *\n   * @param {string} tokenAddress\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async undelegateTokens(\n    tokenAddress: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    return this.delegateTokens({\n      tokenAddress,\n      delegatee: await signer.getAddress(),\n    });\n  }\n  /**\n   * Estimates the gas fee of preparing an update\n   *\n   * @param {TokenVotingPluginPrepareUpdateParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async prepareUpdate(\n    params: TokenVotingPluginPrepareUpdateParams,\n  ): Promise<GasFeeEstimation> {\n    return await prepareGenericUpdateEstimation(this.web3, this.graphql, {\n      ...params,\n      pluginSetupProcessorAddress: this.web3.getAddress(\n        FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n      ),\n      pluginRepo: this.web3.getAddress(\n        NonFrameworkContractsNames.TOKEN_VOTING_REPO_PROXY,\n      ),\n    });\n  }\n}\n","import {\n  ITokenVotingClient,\n  ITokenVotingClientDecoding,\n  ITokenVotingClientEncoding,\n  ITokenVotingClientEstimation,\n  ITokenVotingClientMethods,\n} from \"./internal/interfaces\";\nimport { TokenVotingClientMethods } from \"./internal/client/methods\";\nimport { TokenVotingClientEncoding } from \"./internal/client/encoding\";\nimport { TokenVotingClientDecoding } from \"./internal/client/decoding\";\nimport { TokenVotingClientEstimation } from \"./internal/client/estimation\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport { TokenVotingPluginInstall } from \"./types\";\nimport {\n  ClientCore,\n  Context,\n  PluginInstallItem,\n} from \"@aragon/sdk-client-common\";\n\n/**\n * Provider a generic client with high level methods to manage and interact a Token Voting plugin installed in a DAO\n */\nexport class TokenVotingClient extends ClientCore\n  implements ITokenVotingClient {\n  public methods: ITokenVotingClientMethods;\n  public encoding: ITokenVotingClientEncoding;\n  public decoding: ITokenVotingClientDecoding;\n  public estimation: ITokenVotingClientEstimation;\n\n  constructor(context: Context) {\n    super(context);\n    this.methods = new TokenVotingClientMethods(context);\n    this.encoding = new TokenVotingClientEncoding(context);\n    this.decoding = new TokenVotingClientDecoding(context);\n    this.estimation = new TokenVotingClientEstimation(context);\n  }\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {TokenVotingPluginInstall} params\n     * @param {Networkish} [network=\"mainnet\"]\n     * @return {PluginInstallItem}\n     * @memberof TokenVotingClient\n     */\n    getPluginInstallItem: (\n      params: TokenVotingPluginInstall,\n      network: Networkish,\n    ): PluginInstallItem =>\n      TokenVotingClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n","import { gql } from \"graphql-request\";\n\nexport const QueryMultisigProposal = gql`\nquery MultisigProposal($proposalId: ID!) {\n  multisigProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    startDate\n    endDate\n    actions {\n      to\n      value\n      data\n    }\n    executionDate\n    executionBlockNumber\n    creationBlockNumber\n    plugin {\n      onlyListed\n    }\n    minApprovals\n    executionTxHash\n    executed\n    approvalReached\n    isSignaling\n    approvals(first: 1000){\n      approver{\n        address\n      }\n    }\n  }\n}\n`;\nexport const QueryMultisigProposals = gql`\nquery MultisigProposals($where: MultisigProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: MultisigProposal_orderBy!) {\n  multisigProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    executed\n    approvalReached\n    isSignaling\n    approvalCount\n    startDate\n    endDate\n    executionDate\n    executionBlockNumber\n    creationBlockNumber\n    approvals(first: 1000){\n      approver{\n        address\n      }\n    }\n    actions {\n      to\n      value\n      data\n    }\n    minApprovals\n    plugin{\n      onlyListed\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryMultisigVotingSettings = gql`\nquery MultisigVotingSettings($address: ID!, $block: Block_height) {\n    multisigPlugin(id: $address, block: $block){\n        minApprovals\n        onlyListed\n    }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryMultisigMembers = gql`\nquery MultisigMembers($where: MultisigApprover_filter!, $block: Block_height, $limit: Int!, $skip: Int!, $sortBy: MultisigApprover_orderBy!, $direction: OrderDirection!) {\n  multisigApprovers(\n    where: $where\n    block: $block\n    first: $limit\n    skip: $skip\n    orderBy: $sortBy\n    orderDirection: $direction\n  ) {\n    address\n    isActive\n  }\n}\n`;\n\nexport const QueryMultisigIsMember = gql`\nquery MultisigIsMember($id: ID!, $block: Block_height) {\n  multisigApprover(\n    id: $id\n    block: $block\n  ) {\n    id\n  }\n}`;\n","import { SubgraphAction } from \"../../client-common\";\nimport { MultisigProposal, MultisigProposalListItem } from \"../types\";\nimport {\n  SubgraphMultisigProposal,\n  SubgraphMultisigProposalListItem,\n} from \"./types\";\nimport {\n  DaoAction,\n  getCompactProposalId,\n  hexToBytes,\n  InvalidProposalStatusError,\n  ProposalMetadata,\n  ProposalStatus,\n} from \"@aragon/sdk-client-common\";\n\nexport function toMultisigProposal(\n  proposal: SubgraphMultisigProposal,\n  metadata: ProposalMetadata,\n): MultisigProposal {\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(\n    parseInt(proposal.endDate) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    metadataHash: proposal.metadata,\n    settings: {\n      onlyListed: proposal.plugin.onlyListed,\n      minApprovals: proposal.minApprovals,\n    },\n    creationBlockNumber: parseInt(proposal.creationBlockNumber) || 0,\n    creationDate,\n    startDate,\n    endDate,\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    executionTxHash: proposal.executionTxHash || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    approvals: proposal.approvals.map(\n      (a) => a.approver.address,\n    ),\n  };\n}\nexport function toMultisigProposalListItem(\n  proposal: SubgraphMultisigProposalListItem,\n  metadata: ProposalMetadata,\n): MultisigProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(\n    parseInt(proposal.endDate) * 1000,\n  );\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    metadataHash: proposal.metadata,\n    approvals: proposal.approvals.map(\n      (a) => a.approver.address,\n    ),\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    settings: {\n      onlyListed: proposal.plugin.onlyListed,\n      minApprovals: proposal.minApprovals,\n    },\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n  };\n}\n\nexport function computeProposalStatus(\n  proposal: SubgraphMultisigProposal | SubgraphMultisigProposalListItem,\n): ProposalStatus {\n  const now = new Date();\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  // The proposal is executed so the status becomes EXECUTED\n  // independently of the other conditions\n  if (proposal.executed) {\n    return ProposalStatus.EXECUTED;\n  }\n  // The proposal is not executed and the start date is in the future\n  // so the status becomes PENDING\n  if (startDate >= now) {\n    return ProposalStatus.PENDING;\n  }\n  // The proposal is not executed and the start date is in the past\n  // So we must check if the proposal reached the approval threshold\n  // If it reached the approval threshold and it's a signaling proposal\n  // the status becomes SUCCEEDED\n  // If it reached the approval threshold and it's not a signaling proposal\n  // the status becomes SUCCEEDED if if it hasn't reached the end date\n  if (proposal.approvalReached) {\n    if (proposal.isSignaling) {\n      return ProposalStatus.SUCCEEDED;\n    }\n    if (now <= endDate) {\n      return ProposalStatus.SUCCEEDED;\n    }\n  }\n  // The proposal is not executed and the start date is in the past\n  // and the approval threshold is not reached\n  // If the end date is in the future this means that you can still vote\n  // so the status becomes ACTIVE\n  if (now <= endDate) {\n    return ProposalStatus.ACTIVE;\n  }\n  // If none of the other conditions are met the status becomes DEFEATED\n  return ProposalStatus.DEFEATED;\n}\n\nexport function computeProposalStatusFilter(status: ProposalStatus) {\n  let where = {};\n  const now = Math.round(new Date().getTime() / 1000).toString();\n  switch (status) {\n    case ProposalStatus.PENDING:\n      where = { startDate_gte: now };\n      break;\n    case ProposalStatus.ACTIVE:\n      where = { startDate_lt: now, endDate_gte: now, executed: false };\n      break;\n    case ProposalStatus.EXECUTED:\n      where = { executed: true };\n      break;\n    case ProposalStatus.SUCCEEDED:\n      where = {\n        or: [\n          { approvalReached: true, endDate_lt: now, isSignaling: false },\n          { approvalReached: true, isSignaling: true },\n        ],\n      };\n      break;\n    case ProposalStatus.DEFEATED:\n      where = {\n        endDate_lt: now,\n        executed: false,\n      };\n      break;\n    default:\n      throw new InvalidProposalStatusError();\n  }\n  return where;\n}\n","// @ts-ignore\n// todo fix new contracts-ethers\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\nimport { MetadataAbiInput } from \"@aragon/sdk-client-common\";\n\n// TODO update with function names\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  Multisig__factory.createInterface().getFunction(\"addAddresses\")\n    .format(\"minimal\"),\n  Multisig__factory.createInterface().getFunction(\n    \"removeAddresses\",\n  ).format(\"minimal\"),\n  Multisig__factory.createInterface().getFunction(\n    \"updateMultisigSettings\",\n  ).format(\"minimal\"),\n];\n\n// TODO:\n// use abi from plugin metadata\nexport const UPDATE_ABI: { [build: number]: MetadataAbiInput[] } = {\n  1: [],\n};\n\n// TODO:\n// use abi from plugin metadata\nexport const INSTALLATION_ABI: MetadataAbiInput[] = [\n  {\n    internalType: \"address[]\",\n    name: \"members\",\n    type: \"address[]\",\n    description: \"The addresses of the initial members to be added.\",\n  },\n  {\n    components: [\n      {\n        internalType: \"bool\",\n        name: \"onlyListed\",\n        type: \"bool\",\n        description:\n          \"Whether only listed addresses can create a proposal or not.\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"minApprovals\",\n        type: \"uint16\",\n        description:\n          \"The minimal number of approvals required for a proposal to pass.\",\n      },\n    ],\n    internalType: \"struct Multisig.MultisigSettings\",\n    name: \"multisigSettings\",\n    type: \"tuple\",\n    description: \"The inital multisig settings.\",\n  },\n];\n","import { isAddress } from \"@ethersproject/address\";\nimport {\n  ApproveMultisigProposalParams,\n  ApproveProposalStep,\n  ApproveProposalStepValue,\n  CanApproveParams,\n  CreateMultisigProposalParams,\n  MultisigPluginPrepareInstallationParams,\n  MultisigPluginPrepareUpdateParams,\n  MultisigProposal,\n  MultisigProposalListItem,\n  MultisigVotingSettings,\n} from \"../../types\";\nimport {\n  SubgraphMultisigProposal,\n  SubgraphMultisigProposalListItem,\n  SubgraphMultisigVotingSettings,\n} from \"../types\";\nimport {\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  MembersQueryParams,\n  MembersSortBy,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalQueryParams,\n  ProposalSortBy,\n} from \"../../../client-common\";\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\nimport {\n  QueryMultisigIsMember,\n  QueryMultisigMembers,\n  QueryMultisigProposal,\n  QueryMultisigProposals,\n  QueryMultisigVotingSettings,\n} from \"../graphql-queries\";\nimport {\n  computeProposalStatusFilter,\n  toMultisigProposal,\n  toMultisigProposalListItem,\n} from \"../utils\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { IMultisigClientMethods } from \"../interfaces\";\nimport {\n  boolArrayToBitmap,\n  ClientCore,\n  decodeProposalId,\n  EMPTY_PROPOSAL_METADATA_LINK,\n  encodeProposalId,\n  findLog,\n  getExtendedProposalId,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  IsMemberParams,\n  IsMemberSchema,\n  isProposalId,\n  MULTI_FETCH_TIMEOUT,\n  NoProviderError,\n  prepareGenericInstallation,\n  prepareGenericUpdate,\n  PrepareInstallationStepValue,\n  PrepareUpdateStepValue,\n  promiseWithTimeout,\n  ProposalCreationError,\n  ProposalMetadata,\n  resolveIpfsCid,\n  SizeMismatchError,\n  SortDirection,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-client-common\";\nimport { INSTALLATION_ABI, UPDATE_ABI } from \"../constants\";\nimport {\n  FrameworkContractsNames,\n  getNetworkNameByAlias,\n  NonFrameworkContractsNames,\n} from \"@aragon/osx-commons-configs\";\n\n/**\n * Methods module the SDK Address List Client\n */\nexport class MultisigClientMethods extends ClientCore\n  implements IMultisigClientMethods {\n  /**\n   * Creates a new proposal on the given multisig plugin contract\n   *\n   * @param {CreateMultisigProposalParams} params\n   * @return {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *createProposal(\n    params: CreateMultisigProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    // TODO\n    // implement a more sophisticated isFailingProposal function\n    // if (isFailingProposal(params.actions)) {\n    //   throw new AlwaysFailingProposalError();\n    // }\n\n    const multisigContract = Multisig__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new SizeMismatchError(\"failSafeActions\", \"actions\");\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await multisigContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      params.approve || false,\n      params.tryExecution || false,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const multisigContractInterface = Multisig__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      multisigContractInterface,\n      \"ProposalCreated\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = multisigContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {Promise<string>}\n   * @memberof MultisigClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Allow a wallet in the multisig give approval to a proposal\n   *\n   * @param {ApproveMultisigProposalParams} params\n   * @return {AsyncGenerator<ApproveProposalStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *approveProposal(\n    params: ApproveMultisigProposalParams,\n  ): AsyncGenerator<ApproveProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await multisigContract.approve(\n      id,\n      params.tryExecution,\n    );\n\n    yield {\n      key: ApproveProposalStep.APPROVING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: ApproveProposalStep.DONE,\n    };\n  }\n  /**\n   * Allow a wallet in the multisig give approval to a proposal\n   *\n   * @param {string} proposalId\n   * @return {AsyncGenerator<ExecuteMultisigProposalStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await multisigContract.execute(\n      id,\n    );\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n  /**\n   * Prepares the installation of a multisig plugin in a given dao\n   *\n   * @param {MultisigPluginPrepareInstallationParams} params\n   * @return {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *prepareInstallation(\n    params: MultisigPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const network = await this.web3.getProvider().getNetwork();\n    const networkName = network.name;\n    const aragonNetwork = getNetworkNameByAlias(networkName);\n    if (!aragonNetwork) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    // TODO\n    // Check params with yup\n    yield* prepareGenericInstallation(this.web3, {\n      daoAddressOrEns: params.daoAddressOrEns,\n      pluginRepo: this.web3.getAddress(\n        NonFrameworkContractsNames.MULTISIG_REPO_PROXY,\n      ),\n      version: params.versionTag,\n      installationAbi: INSTALLATION_ABI,\n      installationParams: [\n        params.settings.members,\n        [\n          params.settings.votingSettings.onlyListed,\n          params.settings.votingSettings.minApprovals,\n        ],\n      ],\n      pluginSetupProcessorAddress: this.web3.getAddress(\n        FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n      ),\n    });\n  }\n  /**\n   * Prepares the update of a multisig plugin in a given dao\n   *\n   * @param {MultisigPluginPrepareUpdateParams} params\n   * @return {AsyncGenerator<PrepareUpdateStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *prepareUpdate(\n    params: MultisigPluginPrepareUpdateParams,\n  ): AsyncGenerator<PrepareUpdateStepValue> {\n    yield* prepareGenericUpdate(this.web3, this.graphql, {\n      ...params,\n      pluginRepo: this.web3.getAddress(\n        NonFrameworkContractsNames.MULTISIG_REPO_PROXY,\n      ),\n      updateAbi: UPDATE_ABI[params.newVersion.build] ||\n        params.updateAbi || [],\n      pluginSetupProcessorAddress: this.web3.getAddress(\n        FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n      ),\n    });\n  }\n\n  /**\n   * Checks whether the current proposal can be approved by the given address\n   *\n   * @param {string} addressOrEns\n   * @return {Promise<boolean>}\n   * @memberof MultisigClientMethods\n   */\n  public async canApprove(\n    params: CanApproveParams,\n  ): Promise<boolean> {\n    const provider = this.web3.getProvider();\n    if (!isAddress(params.approverAddressOrEns)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      provider,\n    );\n\n    return multisigContract.canApprove(id, params.approverAddressOrEns);\n  }\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {Promise<boolean>}\n   * @memberof MultisigClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const provider = this.web3.getProvider();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      provider,\n    );\n\n    return multisigContract.canExecute(id);\n  }\n  /**\n   * Returns the voting settings\n   *\n   * @param {string} addressOrEns\n   * @param {number} blockNumber\n   * @return {Promise<MultisigVotingSettings>}\n   * @memberof MultisigClientMethods\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n    blockNumber?: number,\n  ): Promise<MultisigVotingSettings> {\n    // TODO\n    // update this with yup validation\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const query = QueryMultisigVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n      block: blockNumber ? { number: blockNumber } : null,\n    };\n    const name = \"Multisig settings\";\n    type T = { multisigPlugin: SubgraphMultisigVotingSettings };\n    const { multisigPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return {\n      onlyListed: multisigPlugin.onlyListed,\n      minApprovals: multisigPlugin.minApprovals,\n    };\n  }\n  /**\n   * returns the members of the multisig\n   *\n   * @param {MembersQueryParams} params\n   *     - pluginAddress\n   *     - blockNumber\n   *     - limit = 10\n   *     - skip = 0\n   *     - direction = SortDirection.ASC\n   *     - sortBy = MembersSortBy.ADDRESS\n   * @return {Promise<string[]>}\n   * @memberof MultisigClientMethods\n   */\n  public async getMembers({\n    pluginAddress,\n    blockNumber,\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = MembersSortBy.ADDRESS,\n  }: MembersQueryParams): Promise<string[]> {\n    // TODO\n    // update this with yup validation\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const query = QueryMultisigMembers;\n    const params = {\n      where: { plugin: pluginAddress.toLowerCase() },\n      block: blockNumber ? { number: blockNumber } : null,\n      skip,\n      limit,\n      direction,\n      sortBy,\n    };\n    const name = \"Multisig members\";\n    type T = { multisigApprovers: any };\n    const { multisigApprovers } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return multisigApprovers.filter((member: any) => member.isActive).map((member: any) => member.address);\n  }\n\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {(Promise<MultisigProposal | null>)}\n   * @memberof MultisigClientMethods\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<MultisigProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryMultisigProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"Multisig proposal\";\n    type T = { multisigProposal: SubgraphMultisigProposal };\n    const { multisigProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!multisigProposal) {\n      return null;\n    } else if (!multisigProposal.metadata) {\n      return toMultisigProposal(\n        multisigProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    try {\n      const metadataCid = resolveIpfsCid(multisigProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toMultisigProposal(multisigProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toMultisigProposal(\n          multisigProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toMultisigProposal(\n        multisigProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {ProposalQueryParams} params\n   *       - daoAddressOrEns\n   *       - limit = 10\n   *       - status\n   *       - skip = 0\n   *       - direction = SortDirection.ASC\n   *       - sortBy = ProposalSortBy.CREATED_AT\n   * @return {Promise<MultisigProposalListItem[]>}\n   * @memberof MultisigClientMethods\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: ProposalQueryParams): Promise<MultisigProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch (e) {\n          throw new InvalidAddressOrEnsError(e);\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n    const query = QueryMultisigProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"Multisig proposals\";\n    type T = { multisigProposals: SubgraphMultisigProposalListItem[] };\n    const { multisigProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      multisigProposals.map(\n        async (\n          proposal: SubgraphMultisigProposalListItem,\n        ): Promise<MultisigProposalListItem> => {\n          if (!proposal.metadata) {\n            return toMultisigProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          // format in the metadata field\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            // Avoid blocking Promise.all if this individual fetch takes too long\n            const stringMetadata = await promiseWithTimeout(\n              this.ipfs.fetchString(metadataCid),\n              MULTI_FETCH_TIMEOUT,\n            );\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toMultisigProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toMultisigProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toMultisigProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n\n  /**\n   * Checks if a given address is a member of the tokenVoting contract.\n   * @param params - The parameters for the isMember method.\n   * @param params.pluginAddress - The address of the plugin.\n   * @param params.address - The address to check.\n   * @param params.blockNumber - The block number for specifying a specific block.\n   * @returns {boolean} A boolean indicating whether the address is a member or not.\n   */\n  public async isMember(params: IsMemberParams): Promise<boolean> {\n    IsMemberSchema.strict().validateSync(params);\n    const query = QueryMultisigIsMember;\n    const name = \"multisig isMember\";\n    type T = { multisigApprover: { id: string } };\n    const { multisigApprover } = await this.graphql.request<T>({\n      query,\n      params: {\n        id:\n          `${params.pluginAddress.toLowerCase()}_${params.address.toLowerCase()}`,\n        blockHeight: params.blockNumber ? { number: params.blockNumber } : null,\n      },\n      name,\n    });\n    return !!multisigApprover;\n  }\n}\n","import { isAddress } from \"@ethersproject/address\";\nimport {\n  AddAddressesParams,\n  MultisigPluginInstallParams,\n  RemoveAddressesParams,\n  UpdateMultisigVotingSettingsParams,\n} from \"../../types\";\n// @ts-ignore\n// todo fix new contracts-ethers\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport { IMultisigClientEncoding } from \"../interfaces\";\nimport {\n  ClientCore,\n  DaoAction,\n  getNamedTypesFromMetadata,\n  getNetwork,\n  hexToBytes,\n  InvalidAddressError,\n  PluginInstallItem,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-client-common\";\nimport { INSTALLATION_ABI } from \"../constants\";\nimport {\n  contracts,\n  getNetworkNameByAlias,\n  SupportedVersions,\n} from \"@aragon/osx-commons-configs\";\n\n/**\n * Encoding module for the SDK Multisig Client\n */\nexport class MultisigClientEncoding extends ClientCore\n  implements IMultisigClientEncoding {\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {MultisigPluginInstallParams} params\n   * @param {Networkish} network\n   *\n   * @return {PluginInstallItem}\n   * @memberof MultisigClientEncoding\n   */\n  static getPluginInstallItem(\n    params: MultisigPluginInstallParams,\n    network: Networkish,\n  ): PluginInstallItem {\n    const networkName = getNetwork(network).name;\n    const aragonNetwork = getNetworkNameByAlias(networkName);\n    if (!aragonNetwork) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    const hexBytes = defaultAbiCoder.encode(\n      getNamedTypesFromMetadata(INSTALLATION_ABI),\n      [\n        params.members,\n        [\n          params.votingSettings.onlyListed,\n          params.votingSettings.minApprovals,\n        ],\n      ],\n    );\n    const repoAddress = contracts[aragonNetwork][SupportedVersions.V1_3_0]\n      ?.MultisigRepoProxy?.address;\n    if (!repoAddress) {\n      throw new Error(\"AddresslistVotingRepoProxy address not found\");\n    }\n    return {\n      // this case will return \"\" when the version 1.3.0 of the contracts is not deployed\n      // in the specified network\n      id: repoAddress,\n      data: hexToBytes(hexBytes),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {AddAddressesParams} params\n   * @return {DaoAction[]}\n   * @memberof MultisigClientEncoding\n   */\n  public addAddressesAction(\n    params: AddAddressesParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO yup validation\n    for (const member of params.members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"addAddresses\",\n      [params.members],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that adds addresses to address list\n   *\n   * @param {RemoveAddressesParams} params\n   * @return {DaoAction[]}\n   * @memberof MultisigClientEncoding\n   */\n  public removeAddressesAction(\n    params: RemoveAddressesParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO yup validation\n    for (const member of params.members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"removeAddresses\",\n      [params.members],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal updates multisig settings\n   *\n   * @param {UpdateMultisigVotingSettingsParams} params\n   * @return {DaoAction}\n   * @memberof MultisigClientEncoding\n   */\n  public updateMultisigVotingSettings(\n    params: UpdateMultisigVotingSettingsParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"updateMultisigSettings\",\n      [params.votingSettings],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n","import { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport { MultisigVotingSettings } from \"../../types\";\n// @ts-ignore\n// todo fix new contracts-ethers\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\nimport { IMultisigClientDecoding } from \"../interfaces\";\nimport {\n  bytesToHex,\n  ClientCore,\n  getFunctionFragment,\n  InterfaceParams,\n} from \"@aragon/sdk-client-common\";\n\n/**\n * Decoding module for the SDK AddressList Client\n */\nexport class MultisigClientDecoding extends ClientCore\n  implements IMultisigClientDecoding {\n  /**\n   * Decodes a list of addresses from an encoded add members action\n   *\n   * @param {Uint8Array} data\n   * @return {string[]}\n   * @memberof MultisigClientDecoding\n   */\n  public addAddressesAction(data: Uint8Array): string[] {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n\n    const expectedfunction = multisigInterface.getFunction(\"addAddresses\");\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of addresses from an encoded remove members action\n   *\n   * @param {Uint8Array} data\n   * @return {string[]}\n   * @memberof MultisigClientDecoding\n   */\n  public removeAddressesAction(data: Uint8Array): string[] {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = multisigInterface.getFunction(\n      \"removeAddresses\",\n    );\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of min approvals from an encoded update min approval action\n   *\n   * @param {Uint8Array} data\n   * @return {MultisigVotingSettings}\n   * @memberof MultisigClientDecoding\n   */\n  public updateMultisigVotingSettings(\n    data: Uint8Array,\n  ): MultisigVotingSettings {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = multisigInterface.getFunction(\n      \"updateMultisigSettings\",\n    );\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return {\n      minApprovals: result[0].minApprovals,\n      onlyListed: result[0].onlyListed,\n    };\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {(InterfaceParams | null)}\n   * @memberof MultisigClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n","import { Multisig__factory } from \"@aragon/osx-ethers\";\nimport { IMultisigClientEstimation } from \"../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  ApproveMultisigProposalParams,\n  CreateMultisigProposalParams,\n  MultisigPluginPrepareUpdateParams,\n} from \"../../types\";\nimport {\n  boolArrayToBitmap,\n  ClientCore,\n  decodeProposalId,\n  GasFeeEstimation,\n  prepareGenericUpdateEstimation,\n  SizeMismatchError,\n} from \"@aragon/sdk-client-common\";\nimport {\n  FrameworkContractsNames,\n  NonFrameworkContractsNames,\n} from \"@aragon/osx-commons-configs\";\n/**\n * Estimation module the SDK Address List Client\n */\nexport class MultisigClientEstimation extends ClientCore\n  implements IMultisigClientEstimation {\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMultisigProposalParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async createProposal(\n    params: CreateMultisigProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const provider = this.web3.getConnectedSigner();\n\n    const multisigContract = Multisig__factory.connect(\n      params.pluginAddress,\n      provider,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new SizeMismatchError(\"failSafeActions\", \"actions\");\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimation = await multisigContract.estimateGas.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      params.approve || false,\n      params.tryExecution || true,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of approving a proposal\n   *\n   * @param {ApproveMultisigProposalParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async approveProposal(\n    params: ApproveMultisigProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const provider = this.web3.getConnectedSigner();\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      provider,\n    );\n\n    const estimation = await multisigContract.estimateGas.approve(\n      id,\n      params.tryExecution,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of executing a proposal\n   *\n   * @param {string} proposalId\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const provider = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      provider,\n    );\n\n    const estimation = await multisigContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of preparing an update\n   *\n   * @param {MultisigPluginPrepareUpdateParams} params\n   * @return {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async prepareUpdate(\n    params: MultisigPluginPrepareUpdateParams,\n  ): Promise<GasFeeEstimation> {\n    return await prepareGenericUpdateEstimation(this.web3, this.graphql, {\n      ...params,\n      pluginSetupProcessorAddress: this.web3.getAddress(\n        FrameworkContractsNames.PLUGIN_SETUP_PROCESSOR,\n      ),\n      pluginRepo: this.web3.getAddress(\n        NonFrameworkContractsNames.MULTISIG_REPO_PROXY,\n      ),\n    });\n  }\n}\n","import {\n  IMultisigClient,\n  IMultisigClientDecoding,\n  IMultisigClientEncoding,\n  IMultisigClientEstimation,\n  IMultisigClientMethods,\n} from \"./internal/interfaces\";\nimport { MultisigClientMethods } from \"./internal/client/methods\";\nimport { MultisigClientEncoding } from \"./internal/client/encoding\";\nimport { MultisigClientDecoding } from \"./internal/client/decoding\";\nimport { MultisigClientEstimation } from \"./internal/client/estimation\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport { MultisigPluginInstallParams } from \"./types\";\nimport { ClientCore, Context } from \"@aragon/sdk-client-common\";\nimport { PluginInstallItem } from \"@aragon/sdk-client-common\";\n\n/**\n * Provider a generic client with high level methods to manage and interact an Address List Voting plugin installed in a DAO\n */\nexport class MultisigClient extends ClientCore implements IMultisigClient {\n  public methods: IMultisigClientMethods;\n  public encoding: IMultisigClientEncoding;\n  public decoding: IMultisigClientDecoding;\n  public estimation: IMultisigClientEstimation;\n  constructor(context: Context) {\n    super(context);\n    this.methods = new MultisigClientMethods(context);\n    this.encoding = new MultisigClientEncoding(context);\n    this.decoding = new MultisigClientDecoding(context);\n    this.estimation = new MultisigClientEstimation(context);\n  }\n\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {MultisigPluginInstallParams} params\n     * @param {Networkish} [network=\"mainnet\"]\n     * @return {PluginInstallItem}\n     * @memberof MultisigClient\n     */\n\n    getPluginInstallItem: (\n      params: MultisigPluginInstallParams,\n      network: Networkish,\n    ): PluginInstallItem =>\n      MultisigClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n"],"names":["DaoCreationSteps","DaoSortBy","DaoDepositSteps","TransferType","SetAllowanceSteps","ProposalSettingsErrorCause","PluginUpdateProposalInValidityCause","DaoUpdateProposalInvalidityCause","PluginPreparationType","SubgraphTransferType","QueryDao","gql","_templateObject","_taggedTemplateLiteralLoose","QueryDaos","_templateObject2","QueryTokenBalances","QueryTokenTransfers","QueryPlugins","QueryPlugin","QueryIPlugin","_templateObject3","QueryPluginPreparations","_templateObject4","QueryPluginPreparationsExtended","_templateObject5","QueryPluginInstallations","_templateObject6","QueryIProposal","PluginSortBy","AssetBalanceSortBy","TransferSortBy","PluginPreparationSortBy","SubgraphPluginPermissionOperation","ProposalActionTypes","SubgraphTransferTypeMap","Map","DEPOSIT","WITHDRAW","SupportedPluginRepo","AVAILABLE_FUNCTION_SIGNATURES","Contract","AddressZero","ERC20_ABI","getFunction","format","ERC721_ABI","DAO__factory","createInterface","UNSUPPORTED_DAO_METADATA_LINK","name","description","links","EMPTY_DAO_METADATA_LINK","UNAVAILABLE_DAO_METADATA","UNSUPPORTED_RELEASE_METADATA_LINK","images","EMPTY_RELEASE_METADATA_LINK","UNAVAILABLE_RELEASE_METADATA","UNSUPPORTED_BUILD_METADATA_LINK","ui","change","pluginSetup","prepareInstallation","prepareUninstallation","prepareUpdate","EMPTY_BUILD_METADATA_LINK","UNAVAILABLE_BUILD_METADATA","PreparationType","SupportedPluginRepoArray","Object","values","UPDATE_PLUGIN_SIGNATURES","PluginSetupProcessor__factory","PLUGIN_UPDATE_ACTION_PATTERN","GRANT_PLUGIN_UPGRADE_PERMISSION","APPLY_UPDATE","REVOKE_PLUGIN_UPGRADE_PERMISSION","PLUGIN_UPDATE_WITH_ROOT_ACTION_PATTERN","GRANT_ROOT_PERMISSION","REVOKE_ROOT_PERMISSION","CreateDaoSchema","object","metadataUri","IpfsUriSchema","required","daoUri","string","url","notRequired","ensSubdomain","SubdomainSchema","trustedForwarder","AddressOrEnsSchema","plugins","array","PluginInstallItemSchema","min","DaoMetadataSchema","avatar","mixed","test","item","some","schema","strict","isValidSync","DepositEthSchema","type","oneOf","daoAddressOrEns","amount","BigintSchema","DepositErc20Schema","tokenAddress","DepositErc721Schema","tokenId","DepositErc1155Schema","tokenIds","amounts","SizeMismatchError","message","value","length","SetAllowanceSchema","spender","HasPermissionSchema","who","where","permission","data","Uint8ArraySchema","DaoQuerySchema","PaginationSchema","concat","sortBy","DaoBalancesQuerySchema","PluginQuerySchema","subdomain","PermissionBaseSchema","PermissionWithConditionSchema","condition","WithdrawEthSchema","recipientAddressOrEns","WithdrawErc20Schema","WithdrawErc721Schema","WithdrawErc1155Schema","RegisterStandardCallbackSchema","interfaceId","callbackSelector","magicNumber","UpgradeToAndCallSchema","implementationAddress","InitializeFromSchema","previousVersion","of","number","initData","DaoUpdateSchema","daoFactoryAddress","PluginPreparationQuerySchema","ID","INSTALLATION","UPDATE","pluginAddress","pluginRepoAddress","toDaoDetails","dao","metadata","address","id","ensDomain","undefined","metadataHash","creationDate","Date","parseInt","createdAt","filter","plugin","appliedPreparation","appliedVersion","appliedPluginRepo","map","release","build","instanceAddress","toDaoListItem","toAssetBalance","balance","__typename","TokenType","NATIVE","BigInt","updateDate","lastUpdated","toNativeBalance","ERC20","token","symbol","decimals","toErc20Balance","ERC721","toErc721Balance","ERC1155","balances","toErc1155Balance","InvalidParameter","toTokenTransfer","transfer","_transfer$proposal","tokenType","transactionId","txHash","from","to","proposalId","proposal","toErc20Transfer","_transfer$proposal2","toErc721Transfer","_transfer$proposal4","toNativeTransfer","_transfer$proposal3","toErc1155Transfer","toPluginRepo","pluginRepo","releaseMetadata","buildMetadata","_pluginRepo$releases","_pluginRepo$releases2","releases","builds","current","applyInstallatonParamsFromContract","result","params","helpersHash","permissions","versionTag","pluginSetupRef","pluginSetupRepo","permissionParamsToContract","keccak256","toUtf8Bytes","permissionParamsFromContract","_Object$keys$find","permissionId","keys","PermissionIds","find","k","replace","withdrawParamsFromContract","_value","tokenStandard","isBatch","NotImplementedError","estimateNativeDeposit","_x","_x2","_estimateNativeDeposit","apply","this","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","signer","daoInstance","wrap","_context","prev","next","validate","connect","estimateGas","deposit","abrupt","sent","stop","estimateErc20Deposit","_x3","_x4","_estimateErc20Deposit","_callee2","_context2","estimateErc721Deposit","_x5","_x6","_estimateErc721Deposit","_callee3","erc721Contract","_context3","t0","getAddress","t1","t2","t3","call","estimateErc1155Deposit","_x7","_x8","_estimateErc1155Deposit","_callee4","erc1155Contract","estimation","_context4","ERC1155_ABI","t4","t5","Uint8Array","t6","t7","t8","t9","t10","t11","decodeGrantAction","daoInterface","hexBytes","bytesToHex","expectedFunction","decodeFunctionData","decodeRevokeAction","decodeApplyUpdateAction","pspInterface","hexToBytes","toDaoActions","actions","action","decodeUpgradeToAndCallAction","decodeUpgradeToAction","decodeInitializeFromAction","toPluginPreparationListItem","pluginPreparation","creator","pluginVersion","operation","toPluginPermissionOperationType","helpers","GRANT","PermissionOperationType","REVOKE","GRANT_WITH_CONDITION","InvalidPermissionOperationType","compareArrays","array1","array2","JSON","stringify","getPluginInstallations","_x9","_x10","_x11","_getPluginInstallations","_callee5","daoAddress","graphql","query","_context5","toLowerCase","request","pluginInstallations","validateGrantUpgradePluginPermissionAction","_x12","_x13","_x14","_x15","_validateGrantUpgradePluginPermissionAction","_callee6","pspAddress","causes","decodedPermission","_context6","push","PLUGIN_NOT_INSTALLED","toString","NON_ZERO_GRANT_UPGRADE_PLUGIN_PERMISSION_CALL_VALUE","INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_TO_ADDRESS","INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_WHO_ADDRESS","Permissions","UPGRADE_PLUGIN_PERMISSION","INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_PERMISSION_NAME","UPGRADE_PLUGIN_PERMISSION_ID","INVALID_GRANT_UPGRADE_PLUGIN_PERMISSION_PERMISSION_ID","validateRevokeUpgradePluginPermissionAction","_x16","_x17","_x18","_x19","_validateRevokeUpgradePluginPermissionAction","_callee7","_context7","INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_TO_ADDRESS","NON_ZERO_REVOKE_UPGRADE_PLUGIN_PERMISSION_CALL_VALUE","INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_WHO_ADDRESS","INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_PERMISSION_NAME","INVALID_REVOKE_UPGRADE_PLUGIN_PERMISSION_PERMISSION_ID","validateGrantRootPermissionAction","NON_ZERO_GRANT_ROOT_PERMISSION_CALL_VALUE","INVALID_GRANT_ROOT_PERMISSION_TO_ADDRESS","INVALID_GRANT_ROOT_PERMISSION_WHERE_ADDRESS","INVALID_GRANT_ROOT_PERMISSION_WHO_ADDRESS","ROOT_PERMISSION","INVALID_GRANT_ROOT_PERMISSION_PERMISSION_NAME","ROOT_PERMISSION_ID","INVALID_GRANT_ROOT_PERMISSION_PERMISSION_ID","validateRevokeRootPermissionAction","NON_ZERO_REVOKE_ROOT_PERMISSION_CALL_VALUE","INVALID_REVOKE_ROOT_PERMISSION_TO_ADDRESS","INVALID_REVOKE_ROOT_PERMISSION_WHERE_ADDRESS","INVALID_REVOKE_ROOT_PERMISSION_WHO_ADDRESS","INVALID_REVOKE_ROOT_PERMISSION_PERMISSION_NAME","INVALID_REVOKE_ROOT_PERMISSION_PERMISSION_ID","validateApplyUpdateFunction","_x20","_x21","_x22","_x23","_validateApplyUpdateFunction","_callee8","ipfs","_plugin$appliedVersio","_plugin$appliedVersio2","_plugin$appliedVersio3","_metadataJson$pluginS","_plugin$appliedVersio4","decodedParams","preparedSetupId","metadataCid","metadataJson","updateAbi","_metadataJson$pluginS2","_plugin$appliedVersio5","_context8","NON_ZERO_APPLY_UPDATE_CALL_VALUE","_plugin$appliedPrepar","UPDATE_TO_INCOMPATIBLE_RELEASE","UPDATE_TO_OLDER_OR_SAME_BUILD","MISSING_PLUGIN_REPO","includes","NOT_ARAGON_PLUGIN_REPO","preparationType","defaultAbiCoder","encode","pluginPreparations","MISSING_PLUGIN_PREPARATION","INVALID_PLUGIN_REPO_METADATA","MultiUri","ipfsCid","fetchString","parse","inputs","Error","decode","getNamedTypesFromMetadata","INVALID_DATA","classifyProposalActions","_step2","classifiedActions","_iterator2","_createForOfIteratorHelperLoose","done","getFunctionFragment","UPGRADE_TO","UPGRADE_TO_AND_CALL","UNKNOWN","ACTION_NOT_ALLOWED","_unused2","containsPluginUpdateActionBlockWithRootPermission","receivedPattern","slice","containsPluginUpdateActionBlock","startsWithDaoUpdateAction","validateUpdateDaoProposalActions","expectedImplementationAddress","currentDaoVersion","actionErrorCauses","proposalSettingsErrorCauses","isValid","INVALID_ACTIONS","upgradeActionType","upgradeAction","INVALID_TO_ADDRESS","NON_ZERO_CALL_VALUE","INVALID_UPGRADE_TO_IMPLEMENTATION_ADDRESS","upgradeToAndCallDecodedParams","initializeFromDecodedParams","INVALID_UPGRADE_TO_AND_CALL_IMPLEMENTATION_ADDRESS","INVALID_UPGRADE_TO_AND_CALL_VERSION","INVALID_UPGRADE_TO_AND_CALL_DATA","validateUpdatePluginProposalActions","_x24","_x25","_x26","_x27","_x28","_validateUpdatePluginProposalActions","_callee9","resCauses","_iterator3","_step3","_step3$value","index","recCauses","_iterator4","_step4","_step4$value","_index","_recCauses","_context9","entries","every","cause","ClientMethods","VoteValues","VotingMode","SubgraphVoteValues","_ClientCore","_inheritsLoose","_proto","prototype","_this","_wrapAsyncGenerator","_awaitAsyncGenerator","PrepareInstallationSchema","delegateYield","_asyncGeneratorDelegate","_asyncIterator","prepareGenericInstallation","web3","_extends","pluginSetupProcessorAddress","FrameworkContractsNames","PLUGIN_SETUP_PROCESSOR","createDao","_this2","_params$ensSubdomain","_params$daoUri","_params$trustedForwar","_receipt$logs","_receipt$logs2","daoFactoryInstance","pluginInstallationData","_iterator","_step","repo","currentRelease","pluginSetupProcessor","execPermissionFound","daoBaseAddr","_i","_pluginInstallationDa","installData","tx","receipt","daoFactoryInterface","log","installedLogs","parsedLog","getConnectedSigner","DAOFactory__factory","DAO_FACTORY","PluginRepo__factory","latestRelease","tag","daoBase","callStatic","EXECUTE_PERMISSION_ID","MissingExecPermissionError","daoURI","key","CREATING","hash","wait","DAORegistry__factory","logs","e","topics","getEvent","DaoCreationError","parseLog","args","DONE","pluginAddresses","pinMetadata","_pinMetadata","cid","add","pin","IpfsPinError","_this3","depositNative","depositErc20","depositErc721","depositErc1155","_this4","override","DEPOSITING","findLog","FailedDepositError","AmountMismatchError","toBigInt","_this5","tokenContract","currentAllowance","abi","allowance","CHECKED_ALLOWANCE","lt","setAllowance","_this6","_this7","logName","logArg","t12","t13","t14","t15","_this8","tokenInstance","approve","SETTING_ALLOWANCE","UpdateAllowanceError","BigNumber","gt","ALLOWANCE_SET","_this9","_callee10","_params$pluginInstall","selectedInstallation","_params$uninstallatio","_params$uninstallatio2","pspContract","_context10","PrepareUninstallationSchema","iplugin","installations","pluginInstallationIndex","InstallationNotFoundError","uninstallationAbi","uninstallationParams","setupPayload","currentHelpers","PrepareUninstallationSteps","PREPARING","PluginUninstallationPreparationError","_this10","_callee11","_context11","prepareGenericUpdate","hasPermission","_hasPermission","_callee12","provider","_context12","getProvider","getDao","_getDao","_callee13","resolvedAddress","_context13","isAddress","ensureOnline","NoProviderError","resolveName","InvalidAddressOrEnsError","resolveIpfsCid","InvalidCidError","getDaos","_getDaos","_callee15","_ref","_ref$limit","limit","_ref$skip","skip","_ref$direction","direction","_ref$sortBy","_this11","_context15","SortDirection","ASC","CREATED_AT","Promise","all","daos","_ref2","_callee14","_context14","promiseWithTimeout","MULTI_FETCH_TIMEOUT","getDaoBalances","_getDaoBalances","_callee16","_ref3","_ref3$limit","_ref3$skip","_ref3$direction","_ref3$sortBy","tokenBalances","_context16","LAST_UPDATED","getDaoTransfers","_getDaoTransfers","_callee17","_ref4","_ref4$limit","_ref4$skip","_ref4$direction","_ref4$sortBy","tokenTransfers","_context17","get","getMetadata","_getMetadata","_callee18","ipfsUri","resolvedMetadata","_context18","getPluginRepo","_getPluginRepo","_callee19","inlcudeMetadata","_pluginRepo$releases$","_pluginRepo$releases$2","releaseIpfsUri","buildIpfsUri","_context19","EmptyMultiUriError","getPlugins","_getPlugins","_callee20","_temp","_ref5","_ref5$limit","_ref5$skip","_ref5$direction","_ref5$sortBy","_ref5$includeMetadata","includeMetadata","_this12","_context20","SUBDOMAIN","subdomain_contains_nocase","pluginRepos","getPlugin","_getPlugin","_callee21","_context21","getProtocolVersion","_getProtocolVersion","_callee22","contractAddress","protocolInstance","version","_context22","IProtocolVersion__factory","protocolVersion","isDaoUpdateProposal","_isDaoUpdateProposal","_callee23","iproposal","_context23","getExtendedProposalId","isPluginUpdateProposal","_isPluginUpdateProposal","_callee24","_context24","isPluginUpdateProposalValid","_isPluginUpdateProposalValid","_callee25","daoActions","_context25","PROPOSAL_NOT_FOUND","allowFailureMap","NON_ZERO_ALLOW_FAILURE_MAP_VALUE","isDaoUpdateProposalValid","_isDaoUpdateProposalValid","_callee26","_context26","contracts","getNetworkName","DAOFactory","getDaoImplementation","_getDaoImplementation","_callee27","daoFactoryImplementation","_context27","getPluginPreparations","_getPluginPreparations","_callee28","_ref6","_ref6$limit","_ref6$skip","_ref6$direction","_ref6$sortBy","_context28","ClientCore","ClientEncoding","applyInstallationAction","validateSync","ApplyInstallationSchema","applyInstallatonParamsToContract","encodeFunctionData","grantAction","revokeAction","applyUninstallationAction","ApplyUninstallationSchema","applyUninstallationParamsToContract","applyUpdateAndPermissionsActionBlock","applyUpdateParamsToContract","grantUpgradeAction","revokeUpgradeAction","grantRootAction","revokeRootAction","InvalidAddressError","grantWithConditionAction","permissionWithConditionParamsToContract","withdrawAction","_withdrawAction","_this$web3$getSigner","iface","getSigner","updateDaoMetadataAction","_updateDaoMetadataAction","_this$web3$getSigner2","InvalidEnsError","setDaoUriAction","registerStandardCallbackAction","setSignatureValidatorAction","signatureValidator","upgradeToAction","upgradeToAndCallAction","initializeFromAction","_params$initData","daoUpdateAction","_daoUpdateAction","daoFactory","ClientEstimation","_prepareInstallation","prepareGenericInstallationEstimation","_createDao","getApproximateGasFee","_deposit","_setAllowance","contract","then","gasLimit","_prepareUpdate","prepareGenericUpdateEstimation","ClientDecoding","applyUpdateAction","_abiObjects","batch","function","abiObject","InvalidActionError","updateDaoMetadataRawAction","toUtf8String","IpfsError","findInterface","functionSignatures","func","functionName","substring","_unused","Client","context","methods","encoding","decoding","ProposalCreationSteps","VoteProposalStep","ExecuteProposalStep","SubgraphVoteValuesMap","YES","NO","ABSTAIN","ProposalSortBy","MembersSortBy","DaoRole","multisigInterface","Multisig__factory","majorityVotingInterface","MajorityVotingBase__factory","FAILING_PROPOSAL_AVAILABLE_FUNCTION_SIGNATURES","votingModeToContracts","votingMode","STANDARD","EARLY_EXECUTION","VOTE_REPLACEMENT","InvalidVotingModeError","votingModeFromContracts","decodeUpdatePluginSettingsAction","votingInterface","expectedfunction","supportThreshold","decodeRatio","minParticipation","minDuration","toNumber","minProposerVotingPower","encodeUpdateVotingSettingsAction","votingSettingsToContract","_params$minProposerVo","encodeRatio","QueryAddresslistVotingMembers","QueryAddresslistVotingIsMember","QueryAddresslistVotingProposal","QueryAddresslistVotingProposals","QueryAddresslistVotingSettings","toAddresslistVotingProposal","startDate","endDate","executionDate","getCompactProposalId","creatorAddress","title","summary","resources","media","executionTxHash","creationBlockNumber","executionBlockNumber","status","computeProposalStatus","yes","no","abstain","settings","minVotingPower","totalVotingPower","duration","totalVotingWeight","votes","voters","voter","voteReplaced","vote","voteOption","toAddresslistVotingProposalListItem","now","executed","ProposalStatus","EXECUTED","PENDING","approvalReached","earlyExecutable","SUCCEEDED","ACTIVE","DEFEATED","computeProposalStatusFilter","Math","round","getTime","startDate_gte","startDate_lt","endDate_gte","or","endDate_lt","potentiallyExecutable","InvalidProposalStatusError","WrapTokensStep","UnwrapTokensStep","SubgraphTokenType","SubgraphContractType","TokenVotingMembersSortBy","TokenVotingTokenCompatibility","AddresslistVoting__factory","UPDATE_ABI","INSTALLATION_ABI","components","internalType","AddresslistVotingClientMethods","createProposal","_params$failSafeActio","_params$actions","_params$startDate","_params$endDate","addresslistContract","startTimestamp","endTimestamp","addresslistContractInterface","failSafeActions","boolArrayToBitmap","creatorVote","executeOnPass","ProposalCreationError","encodeProposalId","Number","voteProposal","_decodeProposalId","decodeProposalId","VOTING","executeProposal","_decodeProposalId2","execute","EXECUTING","network","getNetwork","getNetworkByAlias","UnsupportedNetworkError","NonFrameworkContractsNames","ADDRESSLIST_VOTING_REPO_PROXY","installationAbi","installationParams","votingSettings","addresses","newVersion","canVote","_canVote","_decodeProposalId3","voterAddressOrEns","canExecute","_canExecute","_decodeProposalId4","getMembers","_getMembers","blockNumber","ADDRESS","block","addresslistVotingVoters","member","getProposal","_getProposal","extendedProposalId","addresslistVotingProposal","isProposalId","InvalidProposalIdError","EMPTY_PROPOSAL_METADATA_LINK","UNSUPPORTED_PROPOSAL_METADATA_LINK","UNAVAILABLE_PROPOSAL_METADATA","getProposals","_getProposals","_ref2$limit","_ref2$skip","_ref2$direction","_ref2$sortBy","addresslistVotingProposals","getVotingSettings","_getVotingSettings","addresslistVotingPlugin","isMember","_isMember","IsMemberSchema","blockHeight","addresslistVotingVoter","AddresslistVotingClientEncoding","getPluginInstallItem","_contracts$aragonNetw","networkName","aragonNetwork","getNetworkNameByAlias","repoAddress","SupportedVersions","V1_3_0","AddresslistVotingRepoProxy","updatePluginSettingsAction","addMembersAction","members","removeMembersAction","AddresslistVotingClientDecoding","AddresslistVotingClientEstimation","_createProposal","_voteProposal","_executeProposal","AddresslistVotingClient","QueryTokenVotingProposal","QueryTokenVotingProposals","QueryTokenVotingSettings","QueryTokenVotingPlugin","QueryTokenVotingMembers","QueryTokenVotingIsMember","toTokenVotingProposal","usedVotingWeight","votingPower","parseToken","weight","toTokenVotingProposalListItem","tokenVotingInitParamsToContract","newToken","useToken","_params$useToken","wrappedToken","subgraphToken","ERC20_WRAPPER","underlyingToken","toTokenVotingMember","_member$delegatee","delegatee","delegators","delegator","isERC20Token","_isERC20Token","ERC_20_ABI","balanceOf","ApproveProposalStep","IERC20MintableUpgradeable__factory","ERC165_INTERFACE_ID","getInterfaceId","Interface","ERC165_ABI","GOVERNANCE_SUPPORTED_INTERFACE_IDS","IVOTES_UPGRADEABLE_ABI","IVOTES_ABI","IGovernanceWrappedERC20__factory","TokenVotingClientMethods","tokenVotingContract","tokenVotingContractInterface","TokenVoting__factory","TOKEN_VOTING_REPO_PROXY","wrapTokens","wrappedErc20Contract","account","wrappedTokenAddress","GovernanceWrappedERC20__factory","depositFor","WRAPPING","unwrapTokens","withdrawTo","UNWRAPPING","delegateTokens","governanceErc20Contract","GovernanceERC20__factory","delegate","undelegateTokens","getDelegatee","_getDelegatee","delegates","VOTING_POWER","tokenVotingMembers","tokenVotingProposal","tokenVotingProposals","tokenVotingPlugin","getToken","_getToken","isTokenVotingCompatibleToken","_isTokenVotingCompatibleToken","getCode","NotAContractError","INCOMPATIBLE","supportsInterface","NEEDS_WRAPPING","COMPATIBLE","tokenVotingMember","TokenVotingClientEncoding","TokenVotingRepoProxy","mintTokenAction","minterAddress","mintTokenParamsToContract","TokenVotingClientDecoding","TokenVotingClientEstimation","_delegateTokens","_undelegateTokens","TokenVotingClient","QueryMultisigProposal","QueryMultisigProposals","QueryMultisigVotingSettings","QueryMultisigMembers","QueryMultisigIsMember","toMultisigProposal","onlyListed","minApprovals","approvals","a","approver","toMultisigProposalListItem","isSignaling","MultisigClientMethods","multisigContract","multisigContractInterface","tryExecution","approveProposal","APPROVING","MULTISIG_REPO_PROXY","canApprove","_canApprove","approverAddressOrEns","multisigPlugin","multisigApprovers","isActive","multisigProposal","multisigProposals","multisigApprover","MultisigClientEncoding","MultisigRepoProxy","addAddressesAction","removeAddressesAction","updateMultisigVotingSettings","MultisigClientDecoding","MultisigClientEstimation","_approveProposal","MultisigClient","functionNames","_step$value","i","indexOf","updateVotingSettingsIndex","updateMultisigSettingsIndex","_params$executeOnPass","_params$creatorVote","floor"],"mappings":"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"}