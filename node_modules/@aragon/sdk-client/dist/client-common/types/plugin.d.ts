import { DaoAction, Pagination, ProposalStatus } from "@aragon/sdk-client-common";
import { BigNumber } from "@ethersproject/bignumber";
/**
 * Contains the states of a proposal. Note that on chain
 * proposals cannot be in draft state
 */
export declare enum VoteValues {
    ABSTAIN = 1,
    YES = 2,
    NO = 3
}
export type ProposalVoteBase = {
    address: string;
    vote: VoteValues;
    voteReplaced: boolean;
};
export type MajorityVotingSettingsBase = {
    /** Float between 0 and 1 */
    supportThreshold: number;
    /** Float between 0 and 1 */
    minParticipation: number;
};
export type MajorityVotingProposalSettings = MajorityVotingSettingsBase & {
    duration: number;
};
export type MajorityVotingSettings = MajorityVotingSettingsBase & {
    votingMode?: VotingMode;
    minDuration: number;
    minProposerVotingPower?: bigint;
};
export type VotingSettings = MajorityVotingSettings;
export declare enum VotingMode {
    STANDARD = "Standard",
    EARLY_EXECUTION = "EarlyExecution",
    VOTE_REPLACEMENT = "VoteReplacement"
}
export type ContractVotingSettings = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
];
export type CreateProposalBaseParams = {
    pluginAddress: string;
    actions?: DaoAction[];
    /** For every action item, denotes whether its execution could fail
     * without aborting the whole proposal execution */
    failSafeActions?: Array<boolean>;
    metadataUri: string;
};
export type CreateMajorityVotingProposalParams = CreateProposalBaseParams & {
    startDate?: Date;
    endDate?: Date;
    executeOnPass?: boolean;
    creatorVote?: VoteValues;
};
export type VoteProposalParams = {
    vote: VoteValues;
    proposalId: string;
};
export type CanVoteParams = {
    proposalId: string;
    voterAddressOrEns: string;
    vote: VoteValues;
};
export declare enum SubgraphVoteValues {
    YES = "Yes",
    NO = "No",
    ABSTAIN = "Abstain"
}
export declare const SubgraphVoteValuesMap: Map<SubgraphVoteValues, VoteValues>;
export type SubgraphVoterListItemBase = {
    voter: {
        address: string;
    };
    voteReplaced: boolean;
    voteOption: SubgraphVoteValues;
};
export type SubgraphAction = {
    to: string;
    value: string;
    data: string;
};
export type SubgraphProposalBase = {
    id: string;
    dao: {
        id: string;
        subdomain: string;
    };
    creator: string;
    metadata: string;
    yes: string;
    no: string;
    abstain: string;
    startDate: string;
    endDate: string;
    executed: boolean;
    approvalReached: boolean;
    isSignaling: boolean;
    actions: SubgraphAction[];
};
export type ProposalQueryParams = Pagination & {
    sortBy?: ProposalSortBy;
    status?: ProposalStatus;
    daoAddressOrEns?: string;
};
export declare enum ProposalSortBy {
    CREATED_AT = "createdAt"
}
export declare enum ProposalCreationSteps {
    CREATING = "creating",
    DONE = "done"
}
export type ProposalCreationStepValue = {
    key: ProposalCreationSteps.CREATING;
    txHash: string;
} | {
    key: ProposalCreationSteps.DONE;
    proposalId: string;
};
export declare enum VoteProposalStep {
    VOTING = "voting",
    DONE = "done"
}
export type VoteProposalStepValue = {
    key: VoteProposalStep.VOTING;
    txHash: string;
} | {
    key: VoteProposalStep.DONE;
};
export declare enum ExecuteProposalStep {
    EXECUTING = "executing",
    DONE = "done"
}
export type ExecuteProposalStepValue = {
    key: ExecuteProposalStep.EXECUTING;
    txHash: string;
} | {
    key: ExecuteProposalStep.DONE;
};
export type ContractPluginSettings = [BigNumber, BigNumber, BigNumber];
export type SubgraphVotingSettings = {
    minDuration: string;
    minProposerVotingPower: string;
    minParticipation: string;
    supportThreshold: string;
    votingMode: VotingMode;
};
export type SubgraphMembers = {
    address: string;
}[];
export type MembersQueryParamsBase = Pagination & {
    pluginAddress: string;
    blockNumber?: number;
};
export type MembersQueryParams = MembersQueryParamsBase & {
    sortBy?: MembersSortBy;
};
export declare enum MembersSortBy {
    ADDRESS = "address"
}
