import { AssetBalance, DaoDetails, DaoListItem, DaoMetadata, DaoUpdateProposalValidity, DecodedInitializeFromParams, DepositErc1155Params, DepositErc20Params, DepositErc721Params, DepositEthParams, GrantPermissionDecodedParams, GrantPermissionParams, GrantPermissionWithConditionDecodedParams, GrantPermissionWithConditionParams, PluginPreparationListItem, PluginRepo, PluginRepoBuildMetadata, PluginRepoReleaseMetadata, PluginUpdateProposalInValidityCause, PluginUpdateProposalValidity, RevokePermissionDecodedParams, RevokePermissionParams, Transfer, UpgradeToAndCallParams, WithdrawParams } from "../types";
import { ContractPermissionParams, ContractPermissionWithConditionParams, ProposalActionTypes, SubgraphBalance, SubgraphDao, SubgraphDaoListItem, SubgraphPluginPermissionOperation, SubgraphPluginPreparationListItem, SubgraphPluginRepo, SubgraphTransferListItem } from "./types";
import { Result } from "@ethersproject/abi";
import { PluginSetupProcessor } from "@aragon/osx-ethers";
import { ApplyInstallationParams, ApplyUninstallationParams, ApplyUpdateParams, DaoAction, DecodedApplyInstallationParams, DecodedApplyUpdateParams, InterfaceParams, MultiTargetPermission, PermissionOperationType, TokenType } from "@aragon/sdk-client-common";
import { Signer } from "@ethersproject/abstract-signer";
import { BigNumber } from "@ethersproject/bignumber";
import { SubgraphAction } from "../client-common";
import { PreparationType } from "./constants";
import { IClientGraphQLCore, IClientIpfsCore } from "@aragon/sdk-client-common/dist/internal";
export declare function unwrapDepositParams(params: DepositEthParams | DepositErc20Params): [string, bigint, string, string];
export declare function toDaoDetails(dao: SubgraphDao, metadata: DaoMetadata): DaoDetails;
export declare function toDaoListItem(dao: SubgraphDaoListItem, metadata: DaoMetadata): DaoListItem;
export declare function toAssetBalance(balance: SubgraphBalance): AssetBalance;
export declare function toTokenTransfer(transfer: SubgraphTransferListItem): Transfer;
export declare function toPluginRepo(pluginRepo: SubgraphPluginRepo, releaseMetadata: PluginRepoReleaseMetadata, buildMetadata: PluginRepoBuildMetadata): PluginRepo;
export declare function applyInstallatonParamsToContract(params: ApplyInstallationParams): PluginSetupProcessor.ApplyInstallationParamsStruct;
export declare function applyUninstallationParamsToContract(params: ApplyUninstallationParams): PluginSetupProcessor.ApplyUninstallationParamsStruct;
export declare function applyInstallatonParamsFromContract(result: Result): DecodedApplyInstallationParams;
export declare function applyUpdateParamsToContract(params: ApplyUpdateParams): PluginSetupProcessor.ApplyUpdateParamsStruct;
export declare function applyUpdateParamsFromContract(result: Result): DecodedApplyUpdateParams;
export declare function permissionParamsToContract(params: GrantPermissionParams | RevokePermissionParams): ContractPermissionParams;
export declare function permissionWithConditionParamsToContract(params: GrantPermissionWithConditionParams): ContractPermissionWithConditionParams;
export declare function permissionParamsFromContract(result: Result): GrantPermissionDecodedParams | RevokePermissionDecodedParams;
export declare function permissionParamsWitConditionFromContract(result: Result): GrantPermissionWithConditionDecodedParams;
export declare function withdrawParamsFromContract(to: string, _value: bigint, result: Result, tokenStandard: TokenType, isBatch: boolean): WithdrawParams;
export declare function estimateNativeDeposit(signer: Signer, params: DepositEthParams): Promise<BigNumber>;
export declare function estimateErc20Deposit(signer: Signer, params: DepositErc20Params): Promise<BigNumber>;
export declare function estimateErc721Deposit(signer: Signer, params: DepositErc721Params): Promise<BigNumber>;
export declare function estimateErc1155Deposit(signer: Signer, params: DepositErc1155Params): Promise<BigNumber>;
export declare function decodeGrantAction(data: Uint8Array): GrantPermissionDecodedParams;
export declare function decodeRevokeAction(data: Uint8Array): RevokePermissionDecodedParams;
export declare function decodeApplyUpdateAction(data: Uint8Array): DecodedApplyUpdateParams;
export declare function findInterface(data: Uint8Array, functionSignatures: string[]): InterfaceParams | null;
export declare function findActionIndex(actions: DaoAction[], functionSignature: string): number;
export declare function toDaoActions(actions: SubgraphAction[]): DaoAction[];
export declare function hashPermissions(permissions: MultiTargetPermission[]): string;
export declare function getPreparedSetupId(params: DecodedApplyInstallationParams | DecodedApplyUpdateParams, preparationType: PreparationType): string;
export declare function decodeUpgradeToAndCallAction(data: Uint8Array): UpgradeToAndCallParams;
export declare function decodeUpgradeToAction(data: Uint8Array): any;
export declare function decodeInitializeFromAction(data: Uint8Array): DecodedInitializeFromParams;
export declare function toPluginPreparationListItem(pluginPreparation: SubgraphPluginPreparationListItem): PluginPreparationListItem;
export declare function toPluginPermissionOperationType(operation: SubgraphPluginPermissionOperation): PermissionOperationType;
export declare function compareArrays<T>(array1: T[], array2: T[]): boolean;
export declare function validateGrantUpgradePluginPermissionAction(action: DaoAction, pspAddress: string, daoAddress: string, graphql: IClientGraphQLCore): Promise<PluginUpdateProposalInValidityCause[]>;
export declare function validateRevokeUpgradePluginPermissionAction(action: DaoAction, pspAddress: string, daoAddress: string, graphql: IClientGraphQLCore): Promise<PluginUpdateProposalInValidityCause[]>;
export declare function validateGrantRootPermissionAction(action: DaoAction, daoAddress: string, pspAddress: string): PluginUpdateProposalInValidityCause[];
export declare function validateRevokeRootPermissionAction(action: DaoAction, daoAddress: string, pspAddress: string): PluginUpdateProposalInValidityCause[];
/**
 * Validate a plugin update proposal
 *
 * @export
 * @param {DaoAction} action
 * @param {string} daoAddress
 * @param {IClientGraphQLCore} graphql
 * @param {IClientIpfsCore} ipfs
 * @return {Promise<PluginUpdateProposalInValidityCause[]>}
 */
export declare function validateApplyUpdateFunction(action: DaoAction, daoAddress: string, graphql: IClientGraphQLCore, ipfs: IClientIpfsCore): Promise<PluginUpdateProposalInValidityCause[]>;
/**
 * Given a list of actions, it decodes the actions and returns the
 * type of action
 *
 * @export
 * @param {DaoAction[]} actions
 * @return {ProposalActionTypes[]}
 */
export declare function classifyProposalActions(actions: DaoAction[]): ProposalActionTypes[];
/**
 * Returns true if the actions are valid for a plugin update proposal with root permission
 *
 * @export
 * @param {ProposalActionTypes[]} actions
 * @return {boolean}
 */
export declare function containsPluginUpdateActionBlockWithRootPermission(actions: ProposalActionTypes[]): boolean;
/**
 * Returns true if the actions are valid for a plugin update proposal without root permission
 *
 * @export
 * @param {ProposalActionTypes[]} actions
 * @return {boolean}
 */
export declare function containsPluginUpdateActionBlock(actions: ProposalActionTypes[]): boolean;
/**
 * Returns true if the actions are valid for a plugin update proposal
 *
 * @export
 * @param {ProposalActionTypes[]} actions
 * @return {boolean}
 */
export declare function startsWithDaoUpdateAction(actions: ProposalActionTypes[]): boolean;
export declare function validateUpdateDaoProposalActions(actions: DaoAction[], daoAddress: string, expectedImplementationAddress: string, currentDaoVersion: [number, number, number]): DaoUpdateProposalValidity;
export declare function validateUpdatePluginProposalActions(actions: DaoAction[], daoAddress: string, pspAddress: string, graphql: IClientGraphQLCore, ipfs: IClientIpfsCore): Promise<PluginUpdateProposalValidity>;
export declare function toSubgraphActions(actions: DaoAction[]): SubgraphAction[];
